{"ast":null,"code":"'use strict';\n\n/*!\n * Module dependencies.\n */\nconst EventEmitter = require('events').EventEmitter;\nconst Kareem = require('kareem');\nconst MongooseError = require('./error/mongooseError');\nconst SchemaType = require('./schemaType');\nconst SchemaTypeOptions = require('./options/schemaTypeOptions');\nconst VirtualOptions = require('./options/virtualOptions');\nconst VirtualType = require('./virtualType');\nconst addAutoId = require('./helpers/schema/addAutoId');\nconst clone = require('./helpers/clone');\nconst get = require('./helpers/get');\nconst getConstructorName = require('./helpers/getConstructorName');\nconst getIndexes = require('./helpers/schema/getIndexes');\nconst handleReadPreferenceAliases = require('./helpers/query/handleReadPreferenceAliases');\nconst idGetter = require('./helpers/schema/idGetter');\nconst merge = require('./helpers/schema/merge');\nconst mpath = require('mpath');\nconst setupTimestamps = require('./helpers/timestamps/setupTimestamps');\nconst utils = require('./utils');\nconst validateRef = require('./helpers/populate/validateRef');\nconst util = require('util');\nlet MongooseTypes;\nconst queryHooks = require('./helpers/query/applyQueryMiddleware').middlewareFunctions;\nconst documentHooks = require('./helpers/model/applyHooks').middlewareFunctions;\nconst hookNames = queryHooks.concat(documentHooks).reduce((s, hook) => s.add(hook), new Set());\nconst isPOJO = utils.isPOJO;\nlet id = 0;\nconst numberRE = /^\\d+$/;\n\n/**\n * Schema constructor.\n *\n * #### Example:\n *\n *     const child = new Schema({ name: String });\n *     const schema = new Schema({ name: String, age: Number, children: [child] });\n *     const Tree = mongoose.model('Tree', schema);\n *\n *     // setting schema options\n *     new Schema({ name: String }, { _id: false, autoIndex: false })\n *\n * #### Options:\n *\n * - [autoIndex](https://mongoosejs.com/docs/guide.html#autoIndex): bool - defaults to null (which means use the connection's autoIndex option)\n * - [autoCreate](https://mongoosejs.com/docs/guide.html#autoCreate): bool - defaults to null (which means use the connection's autoCreate option)\n * - [bufferCommands](https://mongoosejs.com/docs/guide.html#bufferCommands): bool - defaults to true\n * - [bufferTimeoutMS](https://mongoosejs.com/docs/guide.html#bufferTimeoutMS): number - defaults to 10000 (10 seconds). If `bufferCommands` is enabled, the amount of time Mongoose will wait for connectivity to be restablished before erroring out.\n * - [capped](https://mongoosejs.com/docs/guide.html#capped): bool | number | object - defaults to false\n * - [collection](https://mongoosejs.com/docs/guide.html#collection): string - no default\n * - [discriminatorKey](https://mongoosejs.com/docs/guide.html#discriminatorKey): string - defaults to `__t`\n * - [id](https://mongoosejs.com/docs/guide.html#id): bool - defaults to true\n * - [_id](https://mongoosejs.com/docs/guide.html#_id): bool - defaults to true\n * - [minimize](https://mongoosejs.com/docs/guide.html#minimize): bool - controls [document#toObject](https://mongoosejs.com/docs/api/document.html#Document.prototype.toObject()) behavior when called manually - defaults to true\n * - [read](https://mongoosejs.com/docs/guide.html#read): string\n * - [writeConcern](https://mongoosejs.com/docs/guide.html#writeConcern): object - defaults to null, use to override [the MongoDB server's default write concern settings](https://www.mongodb.com/docs/manual/reference/write-concern/)\n * - [shardKey](https://mongoosejs.com/docs/guide.html#shardKey): object - defaults to `null`\n * - [strict](https://mongoosejs.com/docs/guide.html#strict): bool - defaults to true\n * - [strictQuery](https://mongoosejs.com/docs/guide.html#strictQuery): bool - defaults to false\n * - [toJSON](https://mongoosejs.com/docs/guide.html#toJSON) - object - no default\n * - [toObject](https://mongoosejs.com/docs/guide.html#toObject) - object - no default\n * - [typeKey](https://mongoosejs.com/docs/guide.html#typeKey) - string - defaults to 'type'\n * - [validateBeforeSave](https://mongoosejs.com/docs/guide.html#validateBeforeSave) - bool - defaults to `true`\n * - [validateModifiedOnly](https://mongoosejs.com/docs/api/document.html#Document.prototype.validate()) - bool - defaults to `false`\n * - [versionKey](https://mongoosejs.com/docs/guide.html#versionKey): string or object - defaults to \"__v\"\n * - [optimisticConcurrency](https://mongoosejs.com/docs/guide.html#optimisticConcurrency): bool - defaults to false. Set to true to enable [optimistic concurrency](https://thecodebarbarian.com/whats-new-in-mongoose-5-10-optimistic-concurrency.html).\n * - [collation](https://mongoosejs.com/docs/guide.html#collation): object - defaults to null (which means use no collation)\n * - [timeseries](https://mongoosejs.com/docs/guide.html#timeseries): object - defaults to null (which means this schema's collection won't be a timeseries collection)\n * - [selectPopulatedPaths](https://mongoosejs.com/docs/guide.html#selectPopulatedPaths): boolean - defaults to `true`\n * - [skipVersioning](https://mongoosejs.com/docs/guide.html#skipVersioning): object - paths to exclude from versioning\n * - [timestamps](https://mongoosejs.com/docs/guide.html#timestamps): object or boolean - defaults to `false`. If true, Mongoose adds `createdAt` and `updatedAt` properties to your schema and manages those properties for you.\n * - [pluginTags](https://mongoosejs.com/docs/guide.html#pluginTags): array of strings - defaults to `undefined`. If set and plugin called with `tags` option, will only apply that plugin to schemas with a matching tag.\n * - [virtuals](https://mongoosejs.com/docs/tutorials/virtuals.html#virtuals-via-schema-options): object - virtuals to define, alias for [`.virtual`](https://mongoosejs.com/docs/api/schema.html#Schema.prototype.virtual())\n * - [collectionOptions]: object with options passed to [`createCollection()`](https://www.mongodb.com/docs/manual/reference/method/db.createCollection/) when calling `Model.createCollection()` or `autoCreate` set to true.\n *\n * #### Options for Nested Schemas:\n *\n * - `excludeIndexes`: bool - defaults to `false`. If `true`, skip building indexes on this schema's paths.\n *\n * #### Note:\n *\n * _When nesting schemas, (`children` in the example above), always declare the child schema first before passing it into its parent._\n *\n * @param {Object|Schema|Array} [definition] Can be one of: object describing schema paths, or schema to copy, or array of objects and schemas\n * @param {Object} [options]\n * @inherits NodeJS EventEmitter https://nodejs.org/api/events.html#class-eventemitter\n * @event `init`: Emitted after the schema is compiled into a `Model`.\n * @api public\n */\n\nfunction Schema(obj, options) {\n  if (!(this instanceof Schema)) {\n    return new Schema(obj, options);\n  }\n  this.obj = obj;\n  this.paths = {};\n  this.aliases = {};\n  this.subpaths = {};\n  this.virtuals = {};\n  this.singleNestedPaths = {};\n  this.nested = {};\n  this.inherits = {};\n  this.callQueue = [];\n  this._indexes = [];\n  this.methods = options && options.methods || {};\n  this.methodOptions = {};\n  this.statics = options && options.statics || {};\n  this.tree = {};\n  this.query = options && options.query || {};\n  this.childSchemas = [];\n  this.plugins = [];\n  // For internal debugging. Do not use this to try to save a schema in MDB.\n  this.$id = ++id;\n  this.mapPaths = [];\n  this.s = {\n    hooks: new Kareem()\n  };\n  this.options = this.defaultOptions(options);\n\n  // build paths\n  if (Array.isArray(obj)) {\n    for (const definition of obj) {\n      this.add(definition);\n    }\n  } else if (obj) {\n    this.add(obj);\n  }\n\n  // build virtual paths\n  if (options && options.virtuals) {\n    const virtuals = options.virtuals;\n    const pathNames = Object.keys(virtuals);\n    for (const pathName of pathNames) {\n      const pathOptions = virtuals[pathName].options ? virtuals[pathName].options : undefined;\n      const virtual = this.virtual(pathName, pathOptions);\n      if (virtuals[pathName].get) {\n        virtual.get(virtuals[pathName].get);\n      }\n      if (virtuals[pathName].set) {\n        virtual.set(virtuals[pathName].set);\n      }\n    }\n  }\n\n  // check if _id's value is a subdocument (gh-2276)\n  const _idSubDoc = obj && obj._id && utils.isObject(obj._id);\n\n  // ensure the documents get an auto _id unless disabled\n  const auto_id = !this.paths['_id'] && this.options._id && !_idSubDoc;\n  if (auto_id) {\n    addAutoId(this);\n  }\n  this.setupTimestamp(this.options.timestamps);\n}\n\n/**\n * Create virtual properties with alias field\n * @api private\n */\nfunction aliasFields(schema, paths) {\n  for (const path of Object.keys(paths)) {\n    let alias = null;\n    if (paths[path] != null) {\n      alias = paths[path];\n    } else {\n      const options = get(schema.paths[path], 'options');\n      if (options == null) {\n        continue;\n      }\n      alias = options.alias;\n    }\n    if (!alias) {\n      continue;\n    }\n    const prop = schema.paths[path].path;\n    if (Array.isArray(alias)) {\n      for (const a of alias) {\n        if (typeof a !== 'string') {\n          throw new Error('Invalid value for alias option on ' + prop + ', got ' + a);\n        }\n        schema.aliases[a] = prop;\n        schema.virtual(a).get(function (p) {\n          return function () {\n            if (typeof this.get === 'function') {\n              return this.get(p);\n            }\n            return this[p];\n          };\n        }(prop)).set(function (p) {\n          return function (v) {\n            return this.$set(p, v);\n          };\n        }(prop));\n      }\n      continue;\n    }\n    if (typeof alias !== 'string') {\n      throw new Error('Invalid value for alias option on ' + prop + ', got ' + alias);\n    }\n    schema.aliases[alias] = prop;\n    schema.virtual(alias).get(function (p) {\n      return function () {\n        if (typeof this.get === 'function') {\n          return this.get(p);\n        }\n        return this[p];\n      };\n    }(prop)).set(function (p) {\n      return function (v) {\n        return this.$set(p, v);\n      };\n    }(prop));\n  }\n}\n\n/*!\n * Inherit from EventEmitter.\n */\nSchema.prototype = Object.create(EventEmitter.prototype);\nSchema.prototype.constructor = Schema;\nSchema.prototype.instanceOfSchema = true;\n\n/*!\n * ignore\n */\n\nObject.defineProperty(Schema.prototype, '$schemaType', {\n  configurable: false,\n  enumerable: false,\n  writable: true\n});\n\n/**\n * Array of child schemas (from document arrays and single nested subdocs)\n * and their corresponding compiled models. Each element of the array is\n * an object with 2 properties: `schema` and `model`.\n *\n * This property is typically only useful for plugin authors and advanced users.\n * You do not need to interact with this property at all to use mongoose.\n *\n * @api public\n * @property childSchemas\n * @memberOf Schema\n * @instance\n */\n\nObject.defineProperty(Schema.prototype, 'childSchemas', {\n  configurable: false,\n  enumerable: true,\n  writable: true\n});\n\n/**\n * Object containing all virtuals defined on this schema.\n * The objects' keys are the virtual paths and values are instances of `VirtualType`.\n *\n * This property is typically only useful for plugin authors and advanced users.\n * You do not need to interact with this property at all to use mongoose.\n *\n * #### Example:\n *\n *     const schema = new Schema({});\n *     schema.virtual('answer').get(() => 42);\n *\n *     console.log(schema.virtuals); // { answer: VirtualType { path: 'answer', ... } }\n *     console.log(schema.virtuals['answer'].getters[0].call()); // 42\n *\n * @api public\n * @property virtuals\n * @memberOf Schema\n * @instance\n */\n\nObject.defineProperty(Schema.prototype, 'virtuals', {\n  configurable: false,\n  enumerable: true,\n  writable: true\n});\n\n/**\n * The original object passed to the schema constructor\n *\n * #### Example:\n *\n *     const schema = new Schema({ a: String }).add({ b: String });\n *     schema.obj; // { a: String }\n *\n * @api public\n * @property obj\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.obj;\n\n/**\n * The paths defined on this schema. The keys are the top-level paths\n * in this schema, and the values are instances of the SchemaType class.\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: String }, { _id: false });\n *     schema.paths; // { name: SchemaString { ... } }\n *\n *     schema.add({ age: Number });\n *     schema.paths; // { name: SchemaString { ... }, age: SchemaNumber { ... } }\n *\n * @api public\n * @property paths\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.paths;\n\n/**\n * Schema as a tree\n *\n * #### Example:\n *\n *     {\n *         '_id'     : ObjectId\n *       , 'nested'  : {\n *             'key' : String\n *         }\n *     }\n *\n * @api private\n * @property tree\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.tree;\n\n/**\n * Returns a deep copy of the schema\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: String });\n *     const clone = schema.clone();\n *     clone === schema; // false\n *     clone.path('name'); // SchemaString { ... }\n *\n * @return {Schema} the cloned schema\n * @api public\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.clone = function () {\n  const s = this._clone();\n\n  // Bubble up `init` for backwards compat\n  s.on('init', v => this.emit('init', v));\n  return s;\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._clone = function _clone(Constructor) {\n  Constructor = Constructor || (this.base == null ? Schema : this.base.Schema);\n  const s = new Constructor({}, this._userProvidedOptions);\n  s.base = this.base;\n  s.obj = this.obj;\n  s.options = clone(this.options);\n  s.callQueue = this.callQueue.map(function (f) {\n    return f;\n  });\n  s.methods = clone(this.methods);\n  s.methodOptions = clone(this.methodOptions);\n  s.statics = clone(this.statics);\n  s.query = clone(this.query);\n  s.plugins = Array.prototype.slice.call(this.plugins);\n  s._indexes = clone(this._indexes);\n  s.s.hooks = this.s.hooks.clone();\n  s.tree = clone(this.tree);\n  s.paths = Object.fromEntries(Object.entries(this.paths).map(([key, value]) => [key, value.clone()]));\n  s.nested = clone(this.nested);\n  s.subpaths = clone(this.subpaths);\n  for (const schemaType of Object.values(s.paths)) {\n    if (schemaType.$isSingleNested) {\n      const path = schemaType.path;\n      for (const key of Object.keys(schemaType.schema.paths)) {\n        s.singleNestedPaths[path + '.' + key] = schemaType.schema.paths[key];\n      }\n      for (const key of Object.keys(schemaType.schema.singleNestedPaths)) {\n        s.singleNestedPaths[path + '.' + key] = schemaType.schema.singleNestedPaths[key];\n      }\n      for (const key of Object.keys(schemaType.schema.subpaths)) {\n        s.singleNestedPaths[path + '.' + key] = schemaType.schema.subpaths[key];\n      }\n      for (const key of Object.keys(schemaType.schema.nested)) {\n        s.singleNestedPaths[path + '.' + key] = 'nested';\n      }\n    }\n  }\n  s.childSchemas = gatherChildSchemas(s);\n  s.virtuals = clone(this.virtuals);\n  s.$globalPluginsApplied = this.$globalPluginsApplied;\n  s.$isRootDiscriminator = this.$isRootDiscriminator;\n  s.$implicitlyCreated = this.$implicitlyCreated;\n  s.$id = ++id;\n  s.$originalSchemaId = this.$id;\n  s.mapPaths = [].concat(this.mapPaths);\n  if (this.discriminatorMapping != null) {\n    s.discriminatorMapping = Object.assign({}, this.discriminatorMapping);\n  }\n  if (this.discriminators != null) {\n    s.discriminators = Object.assign({}, this.discriminators);\n  }\n  if (this._applyDiscriminators != null) {\n    s._applyDiscriminators = new Map(this._applyDiscriminators);\n  }\n  s.aliases = Object.assign({}, this.aliases);\n  return s;\n};\n\n/**\n * Returns a new schema that has the picked `paths` from this schema.\n *\n * This method is analagous to [Lodash's `pick()` function](https://lodash.com/docs/4.17.15#pick) for Mongoose schemas.\n *\n * #### Example:\n *\n *     const schema = Schema({ name: String, age: Number });\n *     // Creates a new schema with the same `name` path as `schema`,\n *     // but no `age` path.\n *     const newSchema = schema.pick(['name']);\n *\n *     newSchema.path('name'); // SchemaString { ... }\n *     newSchema.path('age'); // undefined\n *\n * @param {String[]} paths List of Paths to pick for the new Schema\n * @param {Object} [options] Options to pass to the new Schema Constructor (same as `new Schema(.., Options)`). Defaults to `this.options` if not set.\n * @return {Schema}\n * @api public\n */\n\nSchema.prototype.pick = function (paths, options) {\n  const newSchema = new Schema({}, options || this.options);\n  if (!Array.isArray(paths)) {\n    throw new MongooseError('Schema#pick() only accepts an array argument, ' + 'got \"' + typeof paths + '\"');\n  }\n  for (const path of paths) {\n    if (this.nested[path]) {\n      newSchema.add({\n        [path]: get(this.tree, path)\n      });\n    } else {\n      const schematype = this.path(path);\n      if (schematype == null) {\n        throw new MongooseError('Path `' + path + '` is not in the schema');\n      }\n      newSchema.add({\n        [path]: schematype\n      });\n    }\n  }\n  return newSchema;\n};\n\n/**\n * Returns a new schema that has the `paths` from the original schema, minus the omitted ones.\n *\n * This method is analagous to [Lodash's `omit()` function](https://lodash.com/docs/#omit) for Mongoose schemas.\n *\n * #### Example:\n *\n *     const schema = Schema({ name: String, age: Number });\n *     // Creates a new schema omitting the `age` path\n *     const newSchema = schema.omit(['age']);\n *\n *     newSchema.path('name'); // SchemaString { ... }\n *     newSchema.path('age'); // undefined\n *\n * @param {String[]} paths List of Paths to omit for the new Schema\n * @param {Object} [options] Options to pass to the new Schema Constructor (same as `new Schema(.., Options)`). Defaults to `this.options` if not set.\n * @return {Schema}\n * @api public\n */\n\nSchema.prototype.omit = function (paths, options) {\n  const newSchema = new Schema(this, options || this.options);\n  if (!Array.isArray(paths)) {\n    throw new MongooseError('Schema#omit() only accepts an array argument, ' + 'got \"' + typeof paths + '\"');\n  }\n  newSchema.remove(paths);\n  for (const nested in newSchema.singleNestedPaths) {\n    if (paths.includes(nested)) {\n      delete newSchema.singleNestedPaths[nested];\n    }\n  }\n  return newSchema;\n};\n\n/**\n * Returns default options for this schema, merged with `options`.\n *\n * @param {Object} [options] Options to overwrite the default options\n * @return {Object} The merged options of `options` and the default options\n * @api private\n */\n\nSchema.prototype.defaultOptions = function (options) {\n  this._userProvidedOptions = options == null ? {} : clone(options);\n  const baseOptions = this.base && this.base.options || {};\n  const strict = 'strict' in baseOptions ? baseOptions.strict : true;\n  const strictQuery = 'strictQuery' in baseOptions ? baseOptions.strictQuery : false;\n  const id = 'id' in baseOptions ? baseOptions.id : true;\n  options = {\n    strict,\n    strictQuery,\n    bufferCommands: true,\n    capped: false,\n    // { size, max, autoIndexId }\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    // the following are only applied at construction time\n    _id: true,\n    id: id,\n    typeKey: 'type',\n    ...options\n  };\n  if (options.versionKey && typeof options.versionKey !== 'string') {\n    throw new MongooseError('`versionKey` must be falsy or string, got `' + typeof options.versionKey + '`');\n  }\n  if (typeof options.read === 'string') {\n    options.read = handleReadPreferenceAliases(options.read);\n  } else if (Array.isArray(options.read) && typeof options.read[0] === 'string') {\n    options.read = {\n      mode: handleReadPreferenceAliases(options.read[0]),\n      tags: options.read[1]\n    };\n  }\n  if (options.optimisticConcurrency && !options.versionKey) {\n    throw new MongooseError('Must set `versionKey` if using `optimisticConcurrency`');\n  }\n  return options;\n};\n\n/**\n * Inherit a Schema by applying a discriminator on an existing Schema.\n *\n *\n * #### Example:\n *\n *     const eventSchema = new mongoose.Schema({ timestamp: Date }, { discriminatorKey: 'kind' });\n *\n *     const clickedEventSchema = new mongoose.Schema({ element: String }, { discriminatorKey: 'kind' });\n *     const ClickedModel = eventSchema.discriminator('clicked', clickedEventSchema);\n *\n *     const Event = mongoose.model('Event', eventSchema);\n *\n *     Event.discriminators['clicked']; // Model { clicked }\n *\n *     const doc = await Event.create({ kind: 'clicked', element: '#hero' });\n *     doc.element; // '#hero'\n *     doc instanceof ClickedModel; // true\n *\n * @param {String} name the name of the discriminator\n * @param {Schema} schema the discriminated Schema\n * @return {Schema} the Schema instance\n * @api public\n */\nSchema.prototype.discriminator = function (name, schema) {\n  this._applyDiscriminators = this._applyDiscriminators || new Map();\n  this._applyDiscriminators.set(name, schema);\n  return this;\n};\n\n/**\n * Adds key path / schema type pairs to this schema.\n *\n * #### Example:\n *\n *     const ToySchema = new Schema();\n *     ToySchema.add({ name: 'string', color: 'string', price: 'number' });\n *\n *     const TurboManSchema = new Schema();\n *     // You can also `add()` another schema and copy over all paths, virtuals,\n *     // getters, setters, indexes, methods, and statics.\n *     TurboManSchema.add(ToySchema).add({ year: Number });\n *\n * @param {Object|Schema} obj plain object with paths to add, or another schema\n * @param {String} [prefix] path to prefix the newly added paths with\n * @return {Schema} the Schema instance\n * @api public\n */\n\nSchema.prototype.add = function add(obj, prefix) {\n  if (obj instanceof Schema || obj != null && obj.instanceOfSchema) {\n    merge(this, obj);\n    return this;\n  }\n\n  // Special case: setting top-level `_id` to false should convert to disabling\n  // the `_id` option. This behavior never worked before 5.4.11 but numerous\n  // codebases use it (see gh-7516, gh-7512).\n  if (obj._id === false && prefix == null) {\n    this.options._id = false;\n  }\n  prefix = prefix || '';\n  // avoid prototype pollution\n  if (prefix === '__proto__.' || prefix === 'constructor.' || prefix === 'prototype.') {\n    return this;\n  }\n  const keys = Object.keys(obj);\n  const typeKey = this.options.typeKey;\n  for (const key of keys) {\n    if (utils.specialProperties.has(key)) {\n      continue;\n    }\n    const fullPath = prefix + key;\n    const val = obj[key];\n    if (val == null) {\n      throw new TypeError('Invalid value for schema path `' + fullPath + '`, got value \"' + val + '\"');\n    }\n    // Retain `_id: false` but don't set it as a path, re: gh-8274.\n    if (key === '_id' && val === false) {\n      continue;\n    }\n    // Deprecate setting schema paths to primitive types (gh-7558)\n    let isMongooseTypeString = false;\n    if (typeof val === 'string') {\n      // Handle the case in which the type is specified as a string (eg. 'date', 'oid', ...)\n      const MongooseTypes = this.base != null ? this.base.Schema.Types : Schema.Types;\n      const upperVal = val.charAt(0).toUpperCase() + val.substring(1);\n      isMongooseTypeString = MongooseTypes[upperVal] != null;\n    }\n    if (key !== '_id' && (typeof val !== 'object' && typeof val !== 'function' && !isMongooseTypeString || val == null)) {\n      throw new TypeError(`Invalid schema configuration: \\`${val}\\` is not ` + `a valid type at path \\`${key}\\`. See ` + 'https://bit.ly/mongoose-schematypes for a list of valid schema types.');\n    }\n    if (val instanceof VirtualType || (val.constructor && val.constructor.name || null) === 'VirtualType') {\n      this.virtual(val);\n      continue;\n    }\n    if (Array.isArray(val) && val.length === 1 && val[0] == null) {\n      throw new TypeError('Invalid value for schema Array path `' + fullPath + '`, got value \"' + val[0] + '\"');\n    }\n    if (!(isPOJO(val) || val instanceof SchemaTypeOptions)) {\n      // Special-case: Non-options definitely a path so leaf at this node\n      // Examples: Schema instances, SchemaType instances\n      if (prefix) {\n        this.nested[prefix.substring(0, prefix.length - 1)] = true;\n      }\n      this.path(prefix + key, val);\n      if (val[0] != null && !val[0].instanceOfSchema && utils.isPOJO(val[0].discriminators)) {\n        const schemaType = this.path(prefix + key);\n        for (const key in val[0].discriminators) {\n          schemaType.discriminator(key, val[0].discriminators[key]);\n        }\n      }\n    } else if (Object.keys(val).length < 1) {\n      // Special-case: {} always interpreted as Mixed path so leaf at this node\n      if (prefix) {\n        this.nested[prefix.substring(0, prefix.length - 1)] = true;\n      }\n      this.path(fullPath, val); // mixed type\n    } else if (!val[typeKey] || typeKey === 'type' && isPOJO(val.type) && val.type.type) {\n      // Special-case: POJO with no bona-fide type key - interpret as tree of deep paths so recurse\n      // nested object `{ last: { name: String } }`. Avoid functions with `.type` re: #10807 because\n      // NestJS sometimes adds `Date.type`.\n      this.nested[fullPath] = true;\n      this.add(val, fullPath + '.');\n    } else {\n      // There IS a bona-fide type key that may also be a POJO\n      const _typeDef = val[typeKey];\n      if (isPOJO(_typeDef) && Object.keys(_typeDef).length > 0) {\n        // If a POJO is the value of a type key, make it a subdocument\n        if (prefix) {\n          this.nested[prefix.substring(0, prefix.length - 1)] = true;\n        }\n        const childSchemaOptions = {};\n        if (this._userProvidedOptions.typeKey) {\n          childSchemaOptions.typeKey = this._userProvidedOptions.typeKey;\n        }\n        // propagate 'strict' option to child schema\n        if (this._userProvidedOptions.strict != null) {\n          childSchemaOptions.strict = this._userProvidedOptions.strict;\n        }\n        if (this._userProvidedOptions.toObject != null) {\n          childSchemaOptions.toObject = utils.omit(this._userProvidedOptions.toObject, ['transform']);\n        }\n        if (this._userProvidedOptions.toJSON != null) {\n          childSchemaOptions.toJSON = utils.omit(this._userProvidedOptions.toJSON, ['transform']);\n        }\n        const _schema = new Schema(_typeDef, childSchemaOptions);\n        _schema.$implicitlyCreated = true;\n        const schemaWrappedPath = Object.assign({}, val, {\n          [typeKey]: _schema\n        });\n        this.path(prefix + key, schemaWrappedPath);\n      } else {\n        // Either the type is non-POJO or we interpret it as Mixed anyway\n        if (prefix) {\n          this.nested[prefix.substring(0, prefix.length - 1)] = true;\n        }\n        this.path(prefix + key, val);\n        if (val != null && !val.instanceOfSchema && utils.isPOJO(val.discriminators)) {\n          const schemaType = this.path(prefix + key);\n          for (const key in val.discriminators) {\n            schemaType.discriminator(key, val.discriminators[key]);\n          }\n        }\n      }\n    }\n  }\n  const aliasObj = Object.fromEntries(Object.entries(obj).map(([key]) => [prefix + key, null]));\n  aliasFields(this, aliasObj);\n  return this;\n};\n\n/**\n * Add an alias for `path`. This means getting or setting the `alias`\n * is equivalent to getting or setting the `path`.\n *\n * #### Example:\n *\n *     const toySchema = new Schema({ n: String });\n *\n *     // Make 'name' an alias for 'n'\n *     toySchema.alias('n', 'name');\n *\n *     const Toy = mongoose.model('Toy', toySchema);\n *     const turboMan = new Toy({ n: 'Turbo Man' });\n *\n *     turboMan.name; // 'Turbo Man'\n *     turboMan.n; // 'Turbo Man'\n *\n *     turboMan.name = 'Turbo Man Action Figure';\n *     turboMan.n; // 'Turbo Man Action Figure'\n *\n *     await turboMan.save(); // Saves { _id: ..., n: 'Turbo Man Action Figure' }\n *\n *\n * @param {String} path real path to alias\n * @param {String|String[]} alias the path(s) to use as an alias for `path`\n * @return {Schema} the Schema instance\n * @api public\n */\n\nSchema.prototype.alias = function alias(path, alias) {\n  aliasFields(this, {\n    [path]: alias\n  });\n  return this;\n};\n\n/**\n * Remove an index by name or index specification.\n *\n * removeIndex only removes indexes from your schema object. Does **not** affect the indexes\n * in MongoDB.\n *\n * #### Example:\n *\n *     const ToySchema = new Schema({ name: String, color: String, price: Number });\n *\n *     // Add a new index on { name, color }\n *     ToySchema.index({ name: 1, color: 1 });\n *\n *     // Remove index on { name, color }\n *     // Keep in mind that order matters! `removeIndex({ color: 1, name: 1 })` won't remove the index\n *     ToySchema.removeIndex({ name: 1, color: 1 });\n *\n *     // Add an index with a custom name\n *     ToySchema.index({ color: 1 }, { name: 'my custom index name' });\n *     // Remove index by name\n *     ToySchema.removeIndex('my custom index name');\n *\n * @param {Object|string} index name or index specification\n * @return {Schema} the Schema instance\n * @api public\n */\n\nSchema.prototype.removeIndex = function removeIndex(index) {\n  if (arguments.length > 1) {\n    throw new Error('removeIndex() takes only 1 argument');\n  }\n  if (typeof index !== 'object' && typeof index !== 'string') {\n    throw new Error('removeIndex() may only take either an object or a string as an argument');\n  }\n  if (typeof index === 'object') {\n    for (let i = this._indexes.length - 1; i >= 0; --i) {\n      if (util.isDeepStrictEqual(this._indexes[i][0], index)) {\n        this._indexes.splice(i, 1);\n      }\n    }\n  } else {\n    for (let i = this._indexes.length - 1; i >= 0; --i) {\n      if (this._indexes[i][1] != null && this._indexes[i][1].name === index) {\n        this._indexes.splice(i, 1);\n      }\n    }\n  }\n  return this;\n};\n\n/**\n * Remove all indexes from this schema.\n *\n * clearIndexes only removes indexes from your schema object. Does **not** affect the indexes\n * in MongoDB.\n *\n * #### Example:\n *\n *     const ToySchema = new Schema({ name: String, color: String, price: Number });\n *     ToySchema.index({ name: 1 });\n *     ToySchema.index({ color: 1 });\n *\n *     // Remove all indexes on this schema\n *     ToySchema.clearIndexes();\n *\n *     ToySchema.indexes(); // []\n *\n * @return {Schema} the Schema instance\n * @api public\n */\n\nSchema.prototype.clearIndexes = function clearIndexes() {\n  this._indexes.length = 0;\n  return this;\n};\n\n/**\n * Reserved document keys.\n *\n * Keys in this object are names that are warned in schema declarations\n * because they have the potential to break Mongoose/ Mongoose plugins functionality. If you create a schema\n * using `new Schema()` with one of these property names, Mongoose will log a warning.\n *\n * - _posts\n * - _pres\n * - collection\n  * - emit\n * - errors\n * - get\n * - init\n * - isModified\n * - isNew\n * - listeners\n * - modelName\n * - on\n * - once\n * - populated\n * - prototype\n * - remove\n * - removeListener\n * - save\n * - schema\n * - toObject\n * - validate\n *\n * _NOTE:_ Use of these terms as method names is permitted, but play at your own risk, as they may be existing mongoose document methods you are stomping on.\n *\n *      const schema = new Schema(..);\n *      schema.methods.init = function () {} // potentially breaking\n *\n * @property reserved\n * @memberOf Schema\n * @static\n */\n\nSchema.reserved = Object.create(null);\nSchema.prototype.reserved = Schema.reserved;\nconst reserved = Schema.reserved;\n// Core object\nreserved['prototype'] =\n// EventEmitter\nreserved.emit = reserved.listeners = reserved.removeListener =\n// document properties and functions\nreserved.collection = reserved.errors = reserved.get = reserved.init = reserved.isModified = reserved.isNew = reserved.populated = reserved.remove = reserved.save = reserved.toObject = reserved.validate = 1;\nreserved.collection = 1;\n\n/**\n * Gets/sets schema paths.\n *\n * Sets a path (if arity 2)\n * Gets a path (if arity 1)\n *\n * #### Example:\n *\n *     schema.path('name') // returns a SchemaType\n *     schema.path('name', Number) // changes the schemaType of `name` to Number\n *\n * @param {String} path The name of the Path to get / set\n * @param {Object} [obj] The Type to set the path to, if provided the path will be SET, otherwise the path will be GET\n * @api public\n */\n\nSchema.prototype.path = function (path, obj) {\n  if (obj === undefined) {\n    // Convert to '.$' to check subpaths re: gh-6405\n    const cleanPath = _pathToPositionalSyntax(path);\n    let schematype = _getPath(this, path, cleanPath);\n    if (schematype != null) {\n      return schematype;\n    }\n\n    // Look for maps\n    const mapPath = getMapPath(this, path);\n    if (mapPath != null) {\n      return mapPath;\n    }\n\n    // Look if a parent of this path is mixed\n    schematype = this.hasMixedParent(cleanPath);\n    if (schematype != null) {\n      return schematype;\n    }\n\n    // subpaths?\n    return /\\.\\d+\\.?.*$/.test(path) ? getPositionalPath(this, path, cleanPath) : undefined;\n  }\n\n  // some path names conflict with document methods\n  const firstPieceOfPath = path.split('.')[0];\n  if (reserved[firstPieceOfPath] && !this.options.suppressReservedKeysWarning) {\n    const errorMessage = `\\`${firstPieceOfPath}\\` is a reserved schema pathname and may break some functionality. ` + 'You are allowed to use it, but use at your own risk. ' + 'To disable this warning pass `suppressReservedKeysWarning` as a schema option.';\n    utils.warn(errorMessage);\n  }\n  if (typeof obj === 'object' && utils.hasUserDefinedProperty(obj, 'ref')) {\n    validateRef(obj.ref, path);\n  }\n\n  // update the tree\n  const subpaths = path.split(/\\./);\n  const last = subpaths.pop();\n  let branch = this.tree;\n  let fullPath = '';\n  for (const sub of subpaths) {\n    if (utils.specialProperties.has(sub)) {\n      throw new Error('Cannot set special property `' + sub + '` on a schema');\n    }\n    fullPath = fullPath += (fullPath.length > 0 ? '.' : '') + sub;\n    if (!branch[sub]) {\n      this.nested[fullPath] = true;\n      branch[sub] = {};\n    }\n    if (typeof branch[sub] !== 'object') {\n      const msg = 'Cannot set nested path `' + path + '`. ' + 'Parent path `' + fullPath + '` already set to type ' + branch[sub].name + '.';\n      throw new Error(msg);\n    }\n    branch = branch[sub];\n  }\n  branch[last] = clone(obj);\n  this.paths[path] = this.interpretAsType(path, obj, this.options);\n  const schemaType = this.paths[path];\n  if (schemaType.$isSchemaMap) {\n    // Maps can have arbitrary keys, so `$*` is internal shorthand for \"any key\"\n    // The '$' is to imply this path should never be stored in MongoDB so we\n    // can easily build a regexp out of this path, and '*' to imply \"any key.\"\n    const mapPath = path + '.$*';\n    this.paths[mapPath] = schemaType.$__schemaType;\n    this.mapPaths.push(this.paths[mapPath]);\n  }\n  if (schemaType.$isSingleNested) {\n    for (const key of Object.keys(schemaType.schema.paths)) {\n      this.singleNestedPaths[path + '.' + key] = schemaType.schema.paths[key];\n    }\n    for (const key of Object.keys(schemaType.schema.singleNestedPaths)) {\n      this.singleNestedPaths[path + '.' + key] = schemaType.schema.singleNestedPaths[key];\n    }\n    for (const key of Object.keys(schemaType.schema.subpaths)) {\n      this.singleNestedPaths[path + '.' + key] = schemaType.schema.subpaths[key];\n    }\n    for (const key of Object.keys(schemaType.schema.nested)) {\n      this.singleNestedPaths[path + '.' + key] = 'nested';\n    }\n    Object.defineProperty(schemaType.schema, 'base', {\n      configurable: true,\n      enumerable: false,\n      writable: false,\n      value: this.base\n    });\n    schemaType.caster.base = this.base;\n    this.childSchemas.push({\n      schema: schemaType.schema,\n      model: schemaType.caster\n    });\n  } else if (schemaType.$isMongooseDocumentArray) {\n    Object.defineProperty(schemaType.schema, 'base', {\n      configurable: true,\n      enumerable: false,\n      writable: false,\n      value: this.base\n    });\n    schemaType.casterConstructor.base = this.base;\n    this.childSchemas.push({\n      schema: schemaType.schema,\n      model: schemaType.casterConstructor\n    });\n  }\n  if (schemaType.$isMongooseArray && schemaType.caster instanceof SchemaType) {\n    let arrayPath = path;\n    let _schemaType = schemaType;\n    const toAdd = [];\n    while (_schemaType.$isMongooseArray) {\n      arrayPath = arrayPath + '.$';\n\n      // Skip arrays of document arrays\n      if (_schemaType.$isMongooseDocumentArray) {\n        _schemaType.$embeddedSchemaType._arrayPath = arrayPath;\n        _schemaType.$embeddedSchemaType._arrayParentPath = path;\n        _schemaType = _schemaType.$embeddedSchemaType;\n      } else {\n        _schemaType.caster._arrayPath = arrayPath;\n        _schemaType.caster._arrayParentPath = path;\n        _schemaType = _schemaType.caster;\n      }\n      this.subpaths[arrayPath] = _schemaType;\n    }\n    for (const _schemaType of toAdd) {\n      this.subpaths[_schemaType.path] = _schemaType;\n    }\n  }\n  if (schemaType.$isMongooseDocumentArray) {\n    for (const key of Object.keys(schemaType.schema.paths)) {\n      const _schemaType = schemaType.schema.paths[key];\n      this.subpaths[path + '.' + key] = _schemaType;\n      if (typeof _schemaType === 'object' && _schemaType != null && _schemaType.$parentSchemaDocArray == null) {\n        _schemaType.$parentSchemaDocArray = schemaType;\n      }\n    }\n    for (const key of Object.keys(schemaType.schema.subpaths)) {\n      const _schemaType = schemaType.schema.subpaths[key];\n      this.subpaths[path + '.' + key] = _schemaType;\n      if (typeof _schemaType === 'object' && _schemaType != null && _schemaType.$parentSchemaDocArray == null) {\n        _schemaType.$parentSchemaDocArray = schemaType;\n      }\n    }\n    for (const key of Object.keys(schemaType.schema.singleNestedPaths)) {\n      const _schemaType = schemaType.schema.singleNestedPaths[key];\n      this.subpaths[path + '.' + key] = _schemaType;\n      if (typeof _schemaType === 'object' && _schemaType != null && _schemaType.$parentSchemaDocArray == null) {\n        _schemaType.$parentSchemaDocArray = schemaType;\n      }\n    }\n  }\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction gatherChildSchemas(schema) {\n  const childSchemas = [];\n  for (const path of Object.keys(schema.paths)) {\n    const schematype = schema.paths[path];\n    if (schematype.$isMongooseDocumentArray || schematype.$isSingleNested) {\n      childSchemas.push({\n        schema: schematype.schema,\n        model: schematype.caster\n      });\n    }\n  }\n  return childSchemas;\n}\n\n/*!\n * ignore\n */\n\nfunction _getPath(schema, path, cleanPath) {\n  if (schema.paths.hasOwnProperty(path)) {\n    return schema.paths[path];\n  }\n  if (schema.subpaths.hasOwnProperty(cleanPath)) {\n    return schema.subpaths[cleanPath];\n  }\n  if (schema.singleNestedPaths.hasOwnProperty(cleanPath) && typeof schema.singleNestedPaths[cleanPath] === 'object') {\n    return schema.singleNestedPaths[cleanPath];\n  }\n  return null;\n}\n\n/*!\n * ignore\n */\n\nfunction _pathToPositionalSyntax(path) {\n  if (!/\\.\\d+/.test(path)) {\n    return path;\n  }\n  return path.replace(/\\.\\d+\\./g, '.$.').replace(/\\.\\d+$/, '.$');\n}\n\n/*!\n * ignore\n */\n\nfunction getMapPath(schema, path) {\n  if (schema.mapPaths.length === 0) {\n    return null;\n  }\n  for (const val of schema.mapPaths) {\n    const _path = val.path;\n    const re = new RegExp('^' + _path.replace(/\\.\\$\\*/g, '\\\\.[^.]+') + '$');\n    if (re.test(path)) {\n      return schema.paths[_path];\n    }\n  }\n  return null;\n}\n\n/**\n * The Mongoose instance this schema is associated with\n *\n * @property base\n * @api private\n */\n\nObject.defineProperty(Schema.prototype, 'base', {\n  configurable: true,\n  enumerable: false,\n  writable: true,\n  value: null\n});\n\n/**\n * Converts type arguments into Mongoose Types.\n *\n * @param {String} path\n * @param {Object} obj constructor\n * @param {Object} options\n * @api private\n */\n\nSchema.prototype.interpretAsType = function (path, obj, options) {\n  if (obj instanceof SchemaType) {\n    if (obj.path === path) {\n      return obj;\n    }\n    const clone = obj.clone();\n    clone.path = path;\n    return clone;\n  }\n\n  // If this schema has an associated Mongoose object, use the Mongoose object's\n  // copy of SchemaTypes re: gh-7158 gh-6933\n  const MongooseTypes = this.base != null ? this.base.Schema.Types : Schema.Types;\n  const Types = this.base != null ? this.base.Types : require('./types');\n  if (!utils.isPOJO(obj) && !(obj instanceof SchemaTypeOptions)) {\n    const constructorName = utils.getFunctionName(obj.constructor);\n    if (constructorName !== 'Object') {\n      const oldObj = obj;\n      obj = {};\n      obj[options.typeKey] = oldObj;\n    }\n  }\n\n  // Get the type making sure to allow keys named \"type\"\n  // and default to mixed if not specified.\n  // { type: { type: String, default: 'freshcut' } }\n  let type = obj[options.typeKey] && (obj[options.typeKey] instanceof Function || options.typeKey !== 'type' || !obj.type.type) ? obj[options.typeKey] : {};\n  let name;\n  if (utils.isPOJO(type) || type === 'mixed') {\n    return new MongooseTypes.Mixed(path, obj);\n  }\n  if (Array.isArray(type) || type === Array || type === 'array' || type === MongooseTypes.Array) {\n    // if it was specified through { type } look for `cast`\n    let cast = type === Array || type === 'array' ? obj.cast || obj.of : type[0];\n\n    // new Schema({ path: [new Schema({ ... })] })\n    if (cast && cast.instanceOfSchema) {\n      if (!(cast instanceof Schema)) {\n        if (this.options._isMerging) {\n          cast = new Schema(cast);\n        } else {\n          throw new TypeError('Schema for array path `' + path + '` is from a different copy of the Mongoose module. ' + 'Please make sure you\\'re using the same version ' + 'of Mongoose everywhere with `npm list mongoose`. If you are still ' + 'getting this error, please add `new Schema()` around the path: ' + `${path}: new Schema(...)`);\n        }\n      }\n      return new MongooseTypes.DocumentArray(path, cast, obj);\n    }\n    if (cast && cast[options.typeKey] && cast[options.typeKey].instanceOfSchema) {\n      if (!(cast[options.typeKey] instanceof Schema)) {\n        if (this.options._isMerging) {\n          cast[options.typeKey] = new Schema(cast[options.typeKey]);\n        } else {\n          throw new TypeError('Schema for array path `' + path + '` is from a different copy of the Mongoose module. ' + 'Please make sure you\\'re using the same version ' + 'of Mongoose everywhere with `npm list mongoose`. If you are still ' + 'getting this error, please add `new Schema()` around the path: ' + `${path}: new Schema(...)`);\n        }\n      }\n      return new MongooseTypes.DocumentArray(path, cast[options.typeKey], obj, cast);\n    }\n    if (Array.isArray(cast)) {\n      return new MongooseTypes.Array(path, this.interpretAsType(path, cast, options), obj);\n    }\n\n    // Handle both `new Schema({ arr: [{ subpath: String }] })` and `new Schema({ arr: [{ type: { subpath: string } }] })`\n    const castFromTypeKey = cast != null && cast[options.typeKey] && (options.typeKey !== 'type' || !cast.type.type) ? cast[options.typeKey] : cast;\n    if (typeof cast === 'string') {\n      cast = MongooseTypes[cast.charAt(0).toUpperCase() + cast.substring(1)];\n    } else if (utils.isPOJO(castFromTypeKey)) {\n      if (Object.keys(castFromTypeKey).length) {\n        // The `minimize` and `typeKey` options propagate to child schemas\n        // declared inline, like `{ arr: [{ val: { $type: String } }] }`.\n        // See gh-3560\n        const childSchemaOptions = {\n          minimize: options.minimize\n        };\n        if (options.typeKey) {\n          childSchemaOptions.typeKey = options.typeKey;\n        }\n        // propagate 'strict' option to child schema\n        if (options.hasOwnProperty('strict')) {\n          childSchemaOptions.strict = options.strict;\n        }\n        if (options.hasOwnProperty('strictQuery')) {\n          childSchemaOptions.strictQuery = options.strictQuery;\n        }\n        if (options.hasOwnProperty('toObject')) {\n          childSchemaOptions.toObject = utils.omit(options.toObject, ['transform']);\n        }\n        if (options.hasOwnProperty('toJSON')) {\n          childSchemaOptions.toJSON = utils.omit(options.toJSON, ['transform']);\n        }\n        if (this._userProvidedOptions.hasOwnProperty('_id')) {\n          childSchemaOptions._id = this._userProvidedOptions._id;\n        } else if (Schema.Types.DocumentArray.defaultOptions._id != null) {\n          childSchemaOptions._id = Schema.Types.DocumentArray.defaultOptions._id;\n        }\n        const childSchema = new Schema(castFromTypeKey, childSchemaOptions);\n        childSchema.$implicitlyCreated = true;\n        return new MongooseTypes.DocumentArray(path, childSchema, obj);\n      } else {\n        // Special case: empty object becomes mixed\n        return new MongooseTypes.Array(path, MongooseTypes.Mixed, obj);\n      }\n    }\n    if (cast) {\n      type = cast[options.typeKey] && (options.typeKey !== 'type' || !cast.type.type) ? cast[options.typeKey] : cast;\n      if (Array.isArray(type)) {\n        return new MongooseTypes.Array(path, this.interpretAsType(path, type, options), obj);\n      }\n      name = typeof type === 'string' ? type : type.schemaName || utils.getFunctionName(type);\n\n      // For Jest 26+, see #10296\n      if (name === 'ClockDate') {\n        name = 'Date';\n      }\n      if (name === void 0) {\n        throw new TypeError('Invalid schema configuration: ' + `Could not determine the embedded type for array \\`${path}\\`. ` + 'See https://mongoosejs.com/docs/guide.html#definition for more info on supported schema syntaxes.');\n      }\n      if (!MongooseTypes.hasOwnProperty(name)) {\n        throw new TypeError('Invalid schema configuration: ' + `\\`${name}\\` is not a valid type within the array \\`${path}\\`.` + 'See https://bit.ly/mongoose-schematypes for a list of valid schema types.');\n      }\n    }\n    return new MongooseTypes.Array(path, cast || MongooseTypes.Mixed, obj, options);\n  }\n  if (type && type.instanceOfSchema) {\n    return new MongooseTypes.Subdocument(type, path, obj);\n  }\n  if (Buffer.isBuffer(type)) {\n    name = 'Buffer';\n  } else if (typeof type === 'function' || typeof type === 'object') {\n    name = type.schemaName || utils.getFunctionName(type);\n  } else if (type === Types.ObjectId) {\n    name = 'ObjectId';\n  } else if (type === Types.Decimal128) {\n    name = 'Decimal128';\n  } else {\n    name = type == null ? '' + type : type.toString();\n  }\n  if (name) {\n    name = name.charAt(0).toUpperCase() + name.substring(1);\n  }\n  // Special case re: gh-7049 because the bson `ObjectID` class' capitalization\n  // doesn't line up with Mongoose's.\n  if (name === 'ObjectID') {\n    name = 'ObjectId';\n  }\n  // For Jest 26+, see #10296\n  if (name === 'ClockDate') {\n    name = 'Date';\n  }\n  if (name === void 0) {\n    throw new TypeError(`Invalid schema configuration: \\`${path}\\` schematype definition is ` + 'invalid. See ' + 'https://mongoosejs.com/docs/guide.html#definition for more info on supported schema syntaxes.');\n  }\n  if (MongooseTypes[name] == null) {\n    throw new TypeError(`Invalid schema configuration: \\`${name}\\` is not ` + `a valid type at path \\`${path}\\`. See ` + 'https://bit.ly/mongoose-schematypes for a list of valid schema types.');\n  }\n  const schemaType = new MongooseTypes[name](path, obj);\n  if (schemaType.$isSchemaMap) {\n    createMapNestedSchemaType(this, schemaType, path, obj, options);\n  }\n  return schemaType;\n};\n\n/*!\n * ignore\n */\n\nfunction createMapNestedSchemaType(schema, schemaType, path, obj, options) {\n  const mapPath = path + '.$*';\n  let _mapType = {\n    type: {}\n  };\n  if (utils.hasUserDefinedProperty(obj, 'of')) {\n    const isInlineSchema = utils.isPOJO(obj.of) && Object.keys(obj.of).length > 0 && !utils.hasUserDefinedProperty(obj.of, schema.options.typeKey);\n    if (isInlineSchema) {\n      _mapType = {\n        [schema.options.typeKey]: new Schema(obj.of)\n      };\n    } else if (utils.isPOJO(obj.of)) {\n      _mapType = Object.assign({}, obj.of);\n    } else {\n      _mapType = {\n        [schema.options.typeKey]: obj.of\n      };\n    }\n    if (_mapType[schema.options.typeKey] && _mapType[schema.options.typeKey].instanceOfSchema) {\n      const subdocumentSchema = _mapType[schema.options.typeKey];\n      subdocumentSchema.eachPath((subpath, type) => {\n        if (type.options.select === true || type.options.select === false) {\n          throw new MongooseError('Cannot use schema-level projections (`select: true` or `select: false`) within maps at path \"' + path + '.' + subpath + '\"');\n        }\n      });\n    }\n    if (utils.hasUserDefinedProperty(obj, 'ref')) {\n      _mapType.ref = obj.ref;\n    }\n  }\n  schemaType.$__schemaType = schema.interpretAsType(mapPath, _mapType, options);\n}\n\n/**\n * Iterates the schemas paths similar to Array#forEach.\n *\n * The callback is passed the pathname and the schemaType instance.\n *\n * #### Example:\n *\n *     const userSchema = new Schema({ name: String, registeredAt: Date });\n *     userSchema.eachPath((pathname, schematype) => {\n *       // Prints twice:\n *       // name SchemaString { ... }\n *       // registeredAt SchemaDate { ... }\n *       console.log(pathname, schematype);\n *     });\n *\n * @param {Function} fn callback function\n * @return {Schema} this\n * @api public\n */\n\nSchema.prototype.eachPath = function (fn) {\n  const keys = Object.keys(this.paths);\n  const len = keys.length;\n  for (let i = 0; i < len; ++i) {\n    fn(keys[i], this.paths[keys[i]]);\n  }\n  return this;\n};\n\n/**\n * Returns an Array of path strings that are required by this schema.\n *\n * #### Example:\n *\n *     const s = new Schema({\n *       name: { type: String, required: true },\n *       age: { type: String, required: true },\n *       notes: String\n *     });\n *     s.requiredPaths(); // [ 'age', 'name' ]\n *\n * @api public\n * @param {Boolean} invalidate Refresh the cache\n * @return {Array}\n */\n\nSchema.prototype.requiredPaths = function requiredPaths(invalidate) {\n  if (this._requiredpaths && !invalidate) {\n    return this._requiredpaths;\n  }\n  const paths = Object.keys(this.paths);\n  let i = paths.length;\n  const ret = [];\n  while (i--) {\n    const path = paths[i];\n    if (this.paths[path].isRequired) {\n      ret.push(path);\n    }\n  }\n  this._requiredpaths = ret;\n  return this._requiredpaths;\n};\n\n/**\n * Returns indexes from fields and schema-level indexes (cached).\n *\n * @api private\n * @return {Array}\n */\n\nSchema.prototype.indexedPaths = function indexedPaths() {\n  if (this._indexedpaths) {\n    return this._indexedpaths;\n  }\n  this._indexedpaths = this.indexes();\n  return this._indexedpaths;\n};\n\n/**\n * Returns the pathType of `path` for this schema.\n *\n * Given a path, returns whether it is a real, virtual, nested, or ad-hoc/undefined path.\n *\n * #### Example:\n *\n *     const s = new Schema({ name: String, nested: { foo: String } });\n *     s.virtual('foo').get(() => 42);\n *     s.pathType('name'); // \"real\"\n *     s.pathType('nested'); // \"nested\"\n *     s.pathType('foo'); // \"virtual\"\n *     s.pathType('fail'); // \"adhocOrUndefined\"\n *\n * @param {String} path\n * @return {String}\n * @api public\n */\n\nSchema.prototype.pathType = function (path) {\n  if (this.paths.hasOwnProperty(path)) {\n    return 'real';\n  }\n  if (this.virtuals.hasOwnProperty(path)) {\n    return 'virtual';\n  }\n  if (this.nested.hasOwnProperty(path)) {\n    return 'nested';\n  }\n\n  // Convert to '.$' to check subpaths re: gh-6405\n  const cleanPath = _pathToPositionalSyntax(path);\n  if (this.subpaths.hasOwnProperty(cleanPath) || this.subpaths.hasOwnProperty(path)) {\n    return 'real';\n  }\n  const singleNestedPath = this.singleNestedPaths.hasOwnProperty(cleanPath) || this.singleNestedPaths.hasOwnProperty(path);\n  if (singleNestedPath) {\n    return singleNestedPath === 'nested' ? 'nested' : 'real';\n  }\n\n  // Look for maps\n  const mapPath = getMapPath(this, path);\n  if (mapPath != null) {\n    return 'real';\n  }\n  if (/\\.\\d+\\.|\\.\\d+$/.test(path)) {\n    return getPositionalPathType(this, path, cleanPath);\n  }\n  return 'adhocOrUndefined';\n};\n\n/**\n * Returns true iff this path is a child of a mixed schema.\n *\n * @param {String} path\n * @return {Boolean}\n * @api private\n */\n\nSchema.prototype.hasMixedParent = function (path) {\n  const subpaths = path.split(/\\./g);\n  path = '';\n  for (let i = 0; i < subpaths.length; ++i) {\n    path = i > 0 ? path + '.' + subpaths[i] : subpaths[i];\n    if (this.paths.hasOwnProperty(path) && this.paths[path] instanceof MongooseTypes.Mixed) {\n      return this.paths[path];\n    }\n  }\n  return null;\n};\n\n/**\n * Setup updatedAt and createdAt timestamps to documents if enabled\n *\n * @param {Boolean|Object} timestamps timestamps options\n * @api private\n */\nSchema.prototype.setupTimestamp = function (timestamps) {\n  return setupTimestamps(this, timestamps);\n};\n\n/**\n * ignore. Deprecated re: #6405\n * @param {Any} self\n * @param {String} path\n * @api private\n */\n\nfunction getPositionalPathType(self, path, cleanPath) {\n  const subpaths = path.split(/\\.(\\d+)\\.|\\.(\\d+)$/).filter(Boolean);\n  if (subpaths.length < 2) {\n    return self.paths.hasOwnProperty(subpaths[0]) ? self.paths[subpaths[0]] : 'adhocOrUndefined';\n  }\n  let val = self.path(subpaths[0]);\n  let isNested = false;\n  if (!val) {\n    return 'adhocOrUndefined';\n  }\n  const last = subpaths.length - 1;\n  for (let i = 1; i < subpaths.length; ++i) {\n    isNested = false;\n    const subpath = subpaths[i];\n    if (i === last && val && !/\\D/.test(subpath)) {\n      if (val.$isMongooseDocumentArray) {\n        val = val.$embeddedSchemaType;\n      } else if (val instanceof MongooseTypes.Array) {\n        // StringSchema, NumberSchema, etc\n        val = val.caster;\n      } else {\n        val = undefined;\n      }\n      break;\n    }\n\n    // ignore if its just a position segment: path.0.subpath\n    if (!/\\D/.test(subpath)) {\n      // Nested array\n      if (val instanceof MongooseTypes.Array && i !== last) {\n        val = val.caster;\n      }\n      continue;\n    }\n    if (!(val && val.schema)) {\n      val = undefined;\n      break;\n    }\n    const type = val.schema.pathType(subpath);\n    isNested = type === 'nested';\n    val = val.schema.path(subpath);\n  }\n  self.subpaths[cleanPath] = val;\n  if (val) {\n    return 'real';\n  }\n  if (isNested) {\n    return 'nested';\n  }\n  return 'adhocOrUndefined';\n}\n\n/*!\n * ignore\n */\n\nfunction getPositionalPath(self, path, cleanPath) {\n  getPositionalPathType(self, path, cleanPath);\n  return self.subpaths[cleanPath];\n}\n\n/**\n * Adds a method call to the queue.\n *\n * #### Example:\n *\n *     schema.methods.print = function() { console.log(this); };\n *     schema.queue('print', []); // Print the doc every one is instantiated\n *\n *     const Model = mongoose.model('Test', schema);\n *     new Model({ name: 'test' }); // Prints '{\"_id\": ..., \"name\": \"test\" }'\n *\n * @param {String} name name of the document method to call later\n * @param {Array} args arguments to pass to the method\n * @api public\n */\n\nSchema.prototype.queue = function (name, args) {\n  this.callQueue.push([name, args]);\n  return this;\n};\n\n/**\n * Defines a pre hook for the model.\n *\n * #### Example:\n *\n *     const toySchema = new Schema({ name: String, created: Date });\n *\n *     toySchema.pre('save', function(next) {\n *       if (!this.created) this.created = new Date;\n *       next();\n *     });\n *\n *     toySchema.pre('validate', function(next) {\n *       if (this.name !== 'Woody') this.name = 'Woody';\n *       next();\n *     });\n *\n *     // Equivalent to calling `pre()` on `find`, `findOne`, `findOneAndUpdate`.\n *     toySchema.pre(/^find/, function(next) {\n *       console.log(this.getFilter());\n *     });\n *\n *     // Equivalent to calling `pre()` on `updateOne`, `findOneAndUpdate`.\n *     toySchema.pre(['updateOne', 'findOneAndUpdate'], function(next) {\n *       console.log(this.getFilter());\n *     });\n *\n *     toySchema.pre('deleteOne', function() {\n *       // Runs when you call `Toy.deleteOne()`\n *     });\n *\n *     toySchema.pre('deleteOne', { document: true }, function() {\n *       // Runs when you call `doc.deleteOne()`\n *     });\n *\n * @param {String|RegExp|String[]} methodName The method name or regular expression to match method name\n * @param {Object} [options]\n * @param {Boolean} [options.document] If `name` is a hook for both document and query middleware, set to `true` to run on document middleware. For example, set `options.document` to `true` to apply this hook to `Document#deleteOne()` rather than `Query#deleteOne()`.\n * @param {Boolean} [options.query] If `name` is a hook for both document and query middleware, set to `true` to run on query middleware.\n * @param {Function} callback\n * @api public\n */\n\nSchema.prototype.pre = function (name) {\n  if (name instanceof RegExp) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const fn of hookNames) {\n      if (name.test(fn)) {\n        this.pre.apply(this, [fn].concat(remainingArgs));\n      }\n    }\n    return this;\n  }\n  if (Array.isArray(name)) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const el of name) {\n      this.pre.apply(this, [el].concat(remainingArgs));\n    }\n    return this;\n  }\n  this.s.hooks.pre.apply(this.s.hooks, arguments);\n  return this;\n};\n\n/**\n * Defines a post hook for the document\n *\n *     const schema = new Schema(..);\n *     schema.post('save', function (doc) {\n *       console.log('this fired after a document was saved');\n *     });\n *\n *     schema.post('find', function(docs) {\n *       console.log('this fired after you ran a find query');\n *     });\n *\n *     schema.post(/Many$/, function(res) {\n *       console.log('this fired after you ran `updateMany()` or `deleteMany()`');\n *     });\n *\n *     const Model = mongoose.model('Model', schema);\n *\n *     const m = new Model(..);\n *     m.save(function(err) {\n *       console.log('this fires after the `post` hook');\n *     });\n *\n *     m.find(function(err, docs) {\n *       console.log('this fires after the post find hook');\n *     });\n *\n * @param {String|RegExp|String[]} methodName The method name or regular expression to match method name\n * @param {Object} [options]\n * @param {Boolean} [options.document] If `name` is a hook for both document and query middleware, set to `true` to run on document middleware.\n * @param {Boolean} [options.query] If `name` is a hook for both document and query middleware, set to `true` to run on query middleware.\n * @param {Function} fn callback\n * @see middleware https://mongoosejs.com/docs/middleware.html\n * @see kareem https://npmjs.org/package/kareem\n * @api public\n */\n\nSchema.prototype.post = function (name) {\n  if (name instanceof RegExp) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const fn of hookNames) {\n      if (name.test(fn)) {\n        this.post.apply(this, [fn].concat(remainingArgs));\n      }\n    }\n    return this;\n  }\n  if (Array.isArray(name)) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const el of name) {\n      this.post.apply(this, [el].concat(remainingArgs));\n    }\n    return this;\n  }\n  this.s.hooks.post.apply(this.s.hooks, arguments);\n  return this;\n};\n\n/**\n * Registers a plugin for this schema.\n *\n * #### Example:\n *\n *     const s = new Schema({ name: String });\n *     s.plugin(schema => console.log(schema.path('name').path));\n *     mongoose.model('Test', s); // Prints 'name'\n *\n * Or with Options:\n *\n *     const s = new Schema({ name: String });\n *     s.plugin((schema, opts) => console.log(opts.text, schema.path('name').path), { text: \"Schema Path Name:\" });\n *     mongoose.model('Test', s); // Prints 'Schema Path Name: name'\n *\n * @param {Function} plugin The Plugin's callback\n * @param {Object} [opts] Options to pass to the plugin\n * @param {Boolean} [opts.deduplicate=false] If true, ignore duplicate plugins (same `fn` argument using `===`)\n * @see plugins https://mongoosejs.com/docs/plugins.html\n * @api public\n */\n\nSchema.prototype.plugin = function (fn, opts) {\n  if (typeof fn !== 'function') {\n    throw new Error('First param to `schema.plugin()` must be a function, ' + 'got \"' + typeof fn + '\"');\n  }\n  if (opts && opts.deduplicate) {\n    for (const plugin of this.plugins) {\n      if (plugin.fn === fn) {\n        return this;\n      }\n    }\n  }\n  this.plugins.push({\n    fn: fn,\n    opts: opts\n  });\n  fn(this, opts);\n  return this;\n};\n\n/**\n * Adds an instance method to documents constructed from Models compiled from this schema.\n *\n * #### Example:\n *\n *     const schema = kittySchema = new Schema(..);\n *\n *     schema.method('meow', function () {\n *       console.log('meeeeeoooooooooooow');\n *     })\n *\n *     const Kitty = mongoose.model('Kitty', schema);\n *\n *     const fizz = new Kitty;\n *     fizz.meow(); // meeeeeooooooooooooow\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as methods.\n *\n *     schema.method({\n *         purr: function () {}\n *       , scratch: function () {}\n *     });\n *\n *     // later\n *     const fizz = new Kitty;\n *     fizz.purr();\n *     fizz.scratch();\n *\n * NOTE: `Schema.method()` adds instance methods to the `Schema.methods` object. You can also add instance methods directly to the `Schema.methods` object as seen in the [guide](https://mongoosejs.com/docs/guide.html#methods)\n *\n * @param {String|Object} name The Method Name for a single function, or a Object of \"string-function\" pairs.\n * @param {Function} [fn] The Function in a single-function definition.\n * @api public\n */\n\nSchema.prototype.method = function (name, fn, options) {\n  if (typeof name !== 'string') {\n    for (const i in name) {\n      this.methods[i] = name[i];\n      this.methodOptions[i] = clone(options);\n    }\n  } else {\n    this.methods[name] = fn;\n    this.methodOptions[name] = clone(options);\n  }\n  return this;\n};\n\n/**\n * Adds static \"class\" methods to Models compiled from this schema.\n *\n * #### Example:\n *\n *     const schema = new Schema(..);\n *     // Equivalent to `schema.statics.findByName = function(name) {}`;\n *     schema.static('findByName', function(name) {\n *       return this.find({ name: name });\n *     });\n *\n *     const Drink = mongoose.model('Drink', schema);\n *     await Drink.findByName('LaCroix');\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as methods.\n *\n *     schema.static({\n *         findByName: function () {..}\n *       , findByCost: function () {..}\n *     });\n *\n *     const Drink = mongoose.model('Drink', schema);\n *     await Drink.findByName('LaCroix');\n *     await Drink.findByCost(3);\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as statics.\n *\n * @param {String|Object} name The Method Name for a single function, or a Object of \"string-function\" pairs.\n * @param {Function} [fn] The Function in a single-function definition.\n * @api public\n * @see Statics https://mongoosejs.com/docs/guide.html#statics\n */\n\nSchema.prototype.static = function (name, fn) {\n  if (typeof name !== 'string') {\n    for (const i in name) {\n      this.statics[i] = name[i];\n    }\n  } else {\n    this.statics[name] = fn;\n  }\n  return this;\n};\n\n/**\n * Defines an index (most likely compound) for this schema.\n *\n * #### Example:\n *\n *     schema.index({ first: 1, last: -1 })\n *\n * @param {Object} fields The Fields to index, with the order, available values: `1 | -1 | '2d' | '2dsphere' | 'geoHaystack' | 'hashed' | 'text'`\n * @param {Object} [options] Options to pass to [MongoDB driver's `createIndex()` function](https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#createIndex)\n * @param {String | number} [options.expires=null] Mongoose-specific syntactic sugar, uses [ms](https://www.npmjs.com/package/ms) to convert `expires` option into seconds for the `expireAfterSeconds` in the above link.\n * @param {String} [options.language_override=null] Tells mongodb to use the specified field instead of `language` for parsing text indexes.\n * @api public\n */\n\nSchema.prototype.index = function (fields, options) {\n  fields || (fields = {});\n  options || (options = {});\n  if (options.expires) {\n    utils.expires(options);\n  }\n  for (const key in fields) {\n    if (this.aliases[key]) {\n      fields = utils.renameObjKey(fields, key, this.aliases[key]);\n    }\n  }\n  for (const field of Object.keys(fields)) {\n    if (fields[field] === 'ascending' || fields[field] === 'asc') {\n      fields[field] = 1;\n    } else if (fields[field] === 'descending' || fields[field] === 'desc') {\n      fields[field] = -1;\n    }\n  }\n  this._indexes.push([fields, options]);\n  return this;\n};\n\n/**\n * Sets a schema option.\n *\n * #### Example:\n *\n *     schema.set('strict'); // 'true' by default\n *     schema.set('strict', false); // Sets 'strict' to false\n *     schema.set('strict'); // 'false'\n *\n * @param {String} key The name of the option to set the value to\n * @param {Object} [value] The value to set the option to, if not passed, the option will be reset to default\n * @param {Array<string>} [tags] tags to add to read preference if key === 'read'\n * @see Schema https://mongoosejs.com/docs/api/schema.html#Schema()\n * @api public\n */\n\nSchema.prototype.set = function (key, value, tags) {\n  if (arguments.length === 1) {\n    return this.options[key];\n  }\n  switch (key) {\n    case 'read':\n      if (typeof value === 'string') {\n        this.options[key] = {\n          mode: handleReadPreferenceAliases(value),\n          tags\n        };\n      } else if (Array.isArray(value) && typeof value[0] === 'string') {\n        this.options[key] = {\n          mode: handleReadPreferenceAliases(value[0]),\n          tags: value[1]\n        };\n      } else {\n        this.options[key] = value;\n      }\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n    case 'timestamps':\n      this.setupTimestamp(value);\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n    case '_id':\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n      if (value && !this.paths['_id']) {\n        addAutoId(this);\n      } else if (!value && this.paths['_id'] != null && this.paths['_id'].auto) {\n        this.remove('_id');\n      }\n      break;\n    default:\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n  }\n\n  // Propagate `strict` and `strictQuery` changes down to implicitly created schemas\n  if (key === 'strict') {\n    _propagateOptionsToImplicitlyCreatedSchemas(this, {\n      strict: value\n    });\n  }\n  if (key === 'strictQuery') {\n    _propagateOptionsToImplicitlyCreatedSchemas(this, {\n      strictQuery: value\n    });\n  }\n  return this;\n};\n\n/*!\n * Recursively set options on implicitly created schemas\n */\n\nfunction _propagateOptionsToImplicitlyCreatedSchemas(baseSchema, options) {\n  for (const {\n    schema\n  } of baseSchema.childSchemas) {\n    if (!schema.$implicitlyCreated) {\n      continue;\n    }\n    Object.assign(schema.options, options);\n    _propagateOptionsToImplicitlyCreatedSchemas(schema, options);\n  }\n}\n\n/**\n * Gets a schema option.\n *\n * #### Example:\n *\n *     schema.get('strict'); // true\n *     schema.set('strict', false);\n *     schema.get('strict'); // false\n *\n * @param {String} key The name of the Option to get the current value for\n * @api public\n * @return {Any} the option's value\n */\n\nSchema.prototype.get = function (key) {\n  return this.options[key];\n};\nconst indexTypes = '2d 2dsphere hashed text'.split(' ');\n\n/**\n * The allowed index types\n *\n * @property {String[]} indexTypes\n * @memberOf Schema\n * @static\n * @api public\n */\n\nObject.defineProperty(Schema, 'indexTypes', {\n  get: function () {\n    return indexTypes;\n  },\n  set: function () {\n    throw new Error('Cannot overwrite Schema.indexTypes');\n  }\n});\n\n/**\n * Returns a list of indexes that this schema declares, via `schema.index()` or by `index: true` in a path's options.\n * Indexes are expressed as an array `[spec, options]`.\n *\n * #### Example:\n *\n *     const userSchema = new Schema({\n *       email: { type: String, required: true, unique: true },\n *       registeredAt: { type: Date, index: true }\n *     });\n *\n *     // [ [ { email: 1 }, { unique: true, background: true } ],\n *     //   [ { registeredAt: 1 }, { background: true } ] ]\n *     userSchema.indexes();\n *\n * [Plugins](https://mongoosejs.com/docs/plugins.html) can use the return value of this function to modify a schema's indexes.\n * For example, the below plugin makes every index unique by default.\n *\n *     function myPlugin(schema) {\n *       for (const index of schema.indexes()) {\n *         if (index[1].unique === undefined) {\n *           index[1].unique = true;\n *         }\n *       }\n *     }\n *\n * @api public\n * @return {Array} list of indexes defined in the schema\n */\n\nSchema.prototype.indexes = function () {\n  return getIndexes(this);\n};\n\n/**\n * Creates a virtual type with the given name.\n *\n * @param {String} name The name of the Virtual\n * @param {Object} [options]\n * @param {String|Model} [options.ref] model name or model instance. Marks this as a [populate virtual](https://mongoosejs.com/docs/populate.html#populate-virtuals).\n * @param {String|Function} [options.localField] Required for populate virtuals. See [populate virtual docs](https://mongoosejs.com/docs/populate.html#populate-virtuals) for more information.\n * @param {String|Function} [options.foreignField] Required for populate virtuals. See [populate virtual docs](https://mongoosejs.com/docs/populate.html#populate-virtuals) for more information.\n * @param {Boolean|Function} [options.justOne=false] Only works with populate virtuals. If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), will be a single doc or `null`. Otherwise, the populate virtual will be an array.\n * @param {Boolean} [options.count=false] Only works with populate virtuals. If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), this populate virtual will contain the number of documents rather than the documents themselves when you `populate()`.\n * @param {Function|null} [options.get=null] Adds a [getter](https://mongoosejs.com/docs/tutorials/getters-setters.html) to this virtual to transform the populated doc.\n * @param {Object|Function} [options.match=null] Apply a default [`match` option to populate](https://mongoosejs.com/docs/populate.html#match), adding an additional filter to the populate query.\n * @return {VirtualType}\n */\n\nSchema.prototype.virtual = function (name, options) {\n  if (name instanceof VirtualType || getConstructorName(name) === 'VirtualType') {\n    return this.virtual(name.path, name.options);\n  }\n  options = new VirtualOptions(options);\n  if (utils.hasUserDefinedProperty(options, ['ref', 'refPath'])) {\n    if (options.localField == null) {\n      throw new Error('Reference virtuals require `localField` option');\n    }\n    if (options.foreignField == null) {\n      throw new Error('Reference virtuals require `foreignField` option');\n    }\n    this.pre('init', function virtualPreInit(obj) {\n      if (mpath.has(name, obj)) {\n        const _v = mpath.get(name, obj);\n        if (!this.$$populatedVirtuals) {\n          this.$$populatedVirtuals = {};\n        }\n        if (options.justOne || options.count) {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ? _v[0] : _v;\n        } else {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ? _v : _v == null ? [] : [_v];\n        }\n        mpath.unset(name, obj);\n      }\n    });\n    const virtual = this.virtual(name);\n    virtual.options = options;\n    virtual.set(function (_v) {\n      if (!this.$$populatedVirtuals) {\n        this.$$populatedVirtuals = {};\n      }\n      if (options.justOne || options.count) {\n        this.$$populatedVirtuals[name] = Array.isArray(_v) ? _v[0] : _v;\n        if (typeof this.$$populatedVirtuals[name] !== 'object') {\n          this.$$populatedVirtuals[name] = options.count ? _v : null;\n        }\n      } else {\n        this.$$populatedVirtuals[name] = Array.isArray(_v) ? _v : _v == null ? [] : [_v];\n        this.$$populatedVirtuals[name] = this.$$populatedVirtuals[name].filter(function (doc) {\n          return doc && typeof doc === 'object';\n        });\n      }\n    });\n    if (typeof options.get === 'function') {\n      virtual.get(options.get);\n    }\n\n    // Workaround for gh-8198: if virtual is under document array, make a fake\n    // virtual. See gh-8210, gh-13189\n    const parts = name.split('.');\n    let cur = parts[0];\n    for (let i = 0; i < parts.length - 1; ++i) {\n      if (this.paths[cur] == null) {\n        continue;\n      }\n      if (this.paths[cur].$isMongooseDocumentArray || this.paths[cur].$isSingleNested) {\n        const remnant = parts.slice(i + 1).join('.');\n        this.paths[cur].schema.virtual(remnant, options);\n        break;\n      }\n      cur += '.' + parts[i + 1];\n    }\n    return virtual;\n  }\n  const virtuals = this.virtuals;\n  const parts = name.split('.');\n  if (this.pathType(name) === 'real') {\n    throw new Error('Virtual path \"' + name + '\"' + ' conflicts with a real path in the schema');\n  }\n  virtuals[name] = parts.reduce(function (mem, part, i) {\n    mem[part] || (mem[part] = i === parts.length - 1 ? new VirtualType(options, name) : {});\n    return mem[part];\n  }, this.tree);\n  return virtuals[name];\n};\n\n/**\n * Returns the virtual type with the given `name`.\n *\n * @param {String} name The name of the Virtual to get\n * @return {VirtualType|null}\n */\n\nSchema.prototype.virtualpath = function (name) {\n  return this.virtuals.hasOwnProperty(name) ? this.virtuals[name] : null;\n};\n\n/**\n * Removes the given `path` (or [`paths`]).\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: String, age: Number });\n *     schema.remove('name');\n *     schema.path('name'); // Undefined\n *     schema.path('age'); // SchemaNumber { ... }\n *\n * Or as a Array:\n *\n *     schema.remove(['name', 'age']);\n *     schema.path('name'); // Undefined\n *     schema.path('age'); // Undefined\n *\n * @param {String|Array} path The Path(s) to remove\n * @return {Schema} the Schema instance\n * @api public\n */\nSchema.prototype.remove = function (path) {\n  if (typeof path === 'string') {\n    path = [path];\n  }\n  if (Array.isArray(path)) {\n    path.forEach(function (name) {\n      if (this.path(name) == null && !this.nested[name]) {\n        return;\n      }\n      if (this.nested[name]) {\n        const allKeys = Object.keys(this.paths).concat(Object.keys(this.nested));\n        for (const path of allKeys) {\n          if (path.startsWith(name + '.')) {\n            delete this.paths[path];\n            delete this.nested[path];\n            _deletePath(this, path);\n          }\n        }\n        delete this.nested[name];\n        _deletePath(this, name);\n        return;\n      }\n      delete this.paths[name];\n      _deletePath(this, name);\n    }, this);\n  }\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _deletePath(schema, name) {\n  const pieces = name.split('.');\n  const last = pieces.pop();\n  let branch = schema.tree;\n  for (const piece of pieces) {\n    branch = branch[piece];\n  }\n  delete branch[last];\n}\n\n/**\n * Removes the given virtual or virtuals from the schema.\n *\n * @param {String|Array} path The virutal path(s) to remove.\n * @returns {Schema} the Schema instance, or a mongoose error if the virtual does not exist.\n * @api public\n */\n\nSchema.prototype.removeVirtual = function (path) {\n  if (typeof path === 'string') {\n    path = [path];\n  }\n  if (Array.isArray(path)) {\n    for (const virtual of path) {\n      if (this.virtuals[virtual] == null) {\n        throw new MongooseError(`Attempting to remove virtual \"${virtual}\" that does not exist.`);\n      }\n    }\n    for (const virtual of path) {\n      delete this.paths[virtual];\n      delete this.virtuals[virtual];\n      if (virtual.indexOf('.') !== -1) {\n        mpath.unset(virtual, this.tree);\n      } else {\n        delete this.tree[virtual];\n      }\n    }\n  }\n  return this;\n};\n\n/**\n * Loads an ES6 class into a schema. Maps [setters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set) + [getters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get), [static methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static),\n * and [instance methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Class_body_and_method_definitions)\n * to schema [virtuals](https://mongoosejs.com/docs/guide.html#virtuals),\n * [statics](https://mongoosejs.com/docs/guide.html#statics), and\n * [methods](https://mongoosejs.com/docs/guide.html#methods).\n *\n * #### Example:\n *\n * ```javascript\n * const md5 = require('md5');\n * const userSchema = new Schema({ email: String });\n * class UserClass {\n *   // `gravatarImage` becomes a virtual\n *   get gravatarImage() {\n *     const hash = md5(this.email.toLowerCase());\n *     return `https://www.gravatar.com/avatar/${hash}`;\n *   }\n *\n *   // `getProfileUrl()` becomes a document method\n *   getProfileUrl() {\n *     return `https://mysite.com/${this.email}`;\n *   }\n *\n *   // `findByEmail()` becomes a static\n *   static findByEmail(email) {\n *     return this.findOne({ email });\n *   }\n * }\n *\n * // `schema` will now have a `gravatarImage` virtual, a `getProfileUrl()` method,\n * // and a `findByEmail()` static\n * userSchema.loadClass(UserClass);\n * ```\n *\n * @param {Function} model The Class to load\n * @param {Boolean} [virtualsOnly] if truthy, only pulls virtuals from the class, not methods or statics\n */\nSchema.prototype.loadClass = function (model, virtualsOnly) {\n  // Stop copying when hit certain base classes\n  if (model === Object.prototype || model === Function.prototype || model.prototype.hasOwnProperty('$isMongooseModelPrototype') || model.prototype.hasOwnProperty('$isMongooseDocumentPrototype')) {\n    return this;\n  }\n  this.loadClass(Object.getPrototypeOf(model), virtualsOnly);\n\n  // Add static methods\n  if (!virtualsOnly) {\n    Object.getOwnPropertyNames(model).forEach(function (name) {\n      if (name.match(/^(length|name|prototype|constructor|__proto__)$/)) {\n        return;\n      }\n      const prop = Object.getOwnPropertyDescriptor(model, name);\n      if (prop.hasOwnProperty('value')) {\n        this.static(name, prop.value);\n      }\n    }, this);\n  }\n\n  // Add methods and virtuals\n  Object.getOwnPropertyNames(model.prototype).forEach(function (name) {\n    if (name.match(/^(constructor)$/)) {\n      return;\n    }\n    const method = Object.getOwnPropertyDescriptor(model.prototype, name);\n    if (!virtualsOnly) {\n      if (typeof method.value === 'function') {\n        this.method(name, method.value);\n      }\n    }\n    if (typeof method.get === 'function') {\n      if (this.virtuals[name]) {\n        this.virtuals[name].getters = [];\n      }\n      this.virtual(name).get(method.get);\n    }\n    if (typeof method.set === 'function') {\n      if (this.virtuals[name]) {\n        this.virtuals[name].setters = [];\n      }\n      this.virtual(name).set(method.set);\n    }\n  }, this);\n  return this;\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._getSchema = function (path) {\n  const _this = this;\n  const pathschema = _this.path(path);\n  const resultPath = [];\n  if (pathschema) {\n    pathschema.$fullPath = path;\n    return pathschema;\n  }\n  function search(parts, schema) {\n    let p = parts.length + 1;\n    let foundschema;\n    let trypath;\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n      if (foundschema) {\n        resultPath.push(trypath);\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\n            foundschema.caster.$fullPath = resultPath.join('.');\n            return foundschema.caster;\n          }\n\n          // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n          if (p !== parts.length) {\n            if (foundschema.schema) {\n              let ret;\n              if (parts[p] === '$' || isArrayFilter(parts[p])) {\n                if (p + 1 === parts.length) {\n                  // comments.$\n                  return foundschema.$embeddedSchemaType;\n                }\n                // comments.$.comments.$.title\n                ret = search(parts.slice(p + 1), foundschema.schema);\n                if (ret) {\n                  ret.$parentSchemaDocArray = ret.$parentSchemaDocArray || (foundschema.schema.$isSingleNested ? null : foundschema);\n                }\n                return ret;\n              }\n              // this is the last path of the selector\n              ret = search(parts.slice(p), foundschema.schema);\n              if (ret) {\n                ret.$parentSchemaDocArray = ret.$parentSchemaDocArray || (foundschema.schema.$isSingleNested ? null : foundschema);\n              }\n              return ret;\n            }\n          }\n        } else if (foundschema.$isSchemaMap) {\n          if (p >= parts.length) {\n            return foundschema;\n          }\n          // Any path in the map will be an instance of the map's embedded schematype\n          if (p + 1 >= parts.length) {\n            return foundschema.$__schemaType;\n          }\n          if (foundschema.$__schemaType instanceof MongooseTypes.Mixed) {\n            return foundschema.$__schemaType;\n          }\n          if (foundschema.$__schemaType.schema != null) {\n            // Map of docs\n            const ret = search(parts.slice(p + 1), foundschema.$__schemaType.schema);\n            return ret;\n          }\n        }\n        foundschema.$fullPath = resultPath.join('.');\n        return foundschema;\n      }\n    }\n  }\n\n  // look for arrays\n  const parts = path.split('.');\n  for (let i = 0; i < parts.length; ++i) {\n    if (parts[i] === '$' || isArrayFilter(parts[i])) {\n      // Re: gh-5628, because `schema.path()` doesn't take $ into account.\n      parts[i] = '0';\n    }\n    if (numberRE.test(parts[i])) {\n      parts[i] = '$';\n    }\n  }\n  return search(parts, _this);\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._getPathType = function (path) {\n  const _this = this;\n  const pathschema = _this.path(path);\n  if (pathschema) {\n    return 'real';\n  }\n  function search(parts, schema) {\n    let p = parts.length + 1,\n      foundschema,\n      trypath;\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n      if (foundschema) {\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\n            return {\n              schema: foundschema,\n              pathType: 'mixed'\n            };\n          }\n\n          // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n          if (p !== parts.length && foundschema.schema) {\n            if (parts[p] === '$' || isArrayFilter(parts[p])) {\n              if (p === parts.length - 1) {\n                return {\n                  schema: foundschema,\n                  pathType: 'nested'\n                };\n              }\n              // comments.$.comments.$.title\n              return search(parts.slice(p + 1), foundschema.schema);\n            }\n            // this is the last path of the selector\n            return search(parts.slice(p), foundschema.schema);\n          }\n          return {\n            schema: foundschema,\n            pathType: foundschema.$isSingleNested ? 'nested' : 'array'\n          };\n        }\n        return {\n          schema: foundschema,\n          pathType: 'real'\n        };\n      } else if (p === parts.length && schema.nested[trypath]) {\n        return {\n          schema: schema,\n          pathType: 'nested'\n        };\n      }\n    }\n    return {\n      schema: foundschema || schema,\n      pathType: 'undefined'\n    };\n  }\n\n  // look for arrays\n  return search(path.split('.'), _this);\n};\n\n/*!\n * ignore\n */\n\nfunction isArrayFilter(piece) {\n  return piece.startsWith('$[') && piece.endsWith(']');\n}\n\n/**\n * Called by `compile()` _right before_ compiling. Good for making any changes to\n * the schema that should respect options set by plugins, like `id`\n * @method _preCompile\n * @memberOf Schema\n * @instance\n * @api private\n */\n\nSchema.prototype._preCompile = function _preCompile() {\n  idGetter(this);\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = Schema;\n\n// require down here because of reference issues\n\n/**\n * The various built-in Mongoose Schema Types.\n *\n * #### Example:\n *\n *     const mongoose = require('mongoose');\n *     const ObjectId = mongoose.Schema.Types.ObjectId;\n *\n * #### Types:\n *\n * - [String](https://mongoosejs.com/docs/schematypes.html#strings)\n * - [Number](https://mongoosejs.com/docs/schematypes.html#numbers)\n * - [Boolean](https://mongoosejs.com/docs/schematypes.html#booleans) | Bool\n * - [Array](https://mongoosejs.com/docs/schematypes.html#arrays)\n * - [Buffer](https://mongoosejs.com/docs/schematypes.html#buffers)\n * - [Date](https://mongoosejs.com/docs/schematypes.html#dates)\n * - [ObjectId](https://mongoosejs.com/docs/schematypes.html#objectids) | Oid\n * - [Mixed](https://mongoosejs.com/docs/schematypes.html#mixed)\n * - [UUID](https://mongoosejs.com/docs/schematypes.html#uuid)\n * - [BigInt](https://mongoosejs.com/docs/schematypes.html#bigint)\n *\n * Using this exposed access to the `Mixed` SchemaType, we can use them in our schema.\n *\n *     const Mixed = mongoose.Schema.Types.Mixed;\n *     new mongoose.Schema({ _user: Mixed })\n *\n * @api public\n */\n\nSchema.Types = MongooseTypes = require('./schema/index');\n\n/*!\n * ignore\n */\n\nexports.ObjectId = MongooseTypes.ObjectId;","map":{"version":3,"names":["EventEmitter","require","Kareem","MongooseError","SchemaType","SchemaTypeOptions","VirtualOptions","VirtualType","addAutoId","clone","get","getConstructorName","getIndexes","handleReadPreferenceAliases","idGetter","merge","mpath","setupTimestamps","utils","validateRef","util","MongooseTypes","queryHooks","middlewareFunctions","documentHooks","hookNames","concat","reduce","s","hook","add","Set","isPOJO","id","numberRE","Schema","obj","options","paths","aliases","subpaths","virtuals","singleNestedPaths","nested","inherits","callQueue","_indexes","methods","methodOptions","statics","tree","query","childSchemas","plugins","$id","mapPaths","hooks","defaultOptions","Array","isArray","definition","pathNames","Object","keys","pathName","pathOptions","undefined","virtual","set","_idSubDoc","_id","isObject","auto_id","setupTimestamp","timestamps","aliasFields","schema","path","alias","prop","a","Error","p","v","$set","prototype","create","constructor","instanceOfSchema","defineProperty","configurable","enumerable","writable","_clone","on","emit","Constructor","base","_userProvidedOptions","map","f","slice","call","fromEntries","entries","key","value","schemaType","values","$isSingleNested","gatherChildSchemas","$globalPluginsApplied","$isRootDiscriminator","$implicitlyCreated","$originalSchemaId","discriminatorMapping","assign","discriminators","_applyDiscriminators","Map","pick","newSchema","schematype","omit","remove","includes","baseOptions","strict","strictQuery","bufferCommands","capped","versionKey","optimisticConcurrency","minimize","autoIndex","discriminatorKey","shardKey","read","validateBeforeSave","validateModifiedOnly","typeKey","mode","tags","discriminator","name","prefix","specialProperties","has","fullPath","val","TypeError","isMongooseTypeString","Types","upperVal","charAt","toUpperCase","substring","length","type","_typeDef","childSchemaOptions","toObject","toJSON","_schema","schemaWrappedPath","aliasObj","removeIndex","index","arguments","i","isDeepStrictEqual","splice","clearIndexes","reserved","listeners","removeListener","collection","errors","init","isModified","isNew","populated","save","validate","cleanPath","_pathToPositionalSyntax","_getPath","mapPath","getMapPath","hasMixedParent","test","getPositionalPath","firstPieceOfPath","split","suppressReservedKeysWarning","errorMessage","warn","hasUserDefinedProperty","ref","last","pop","branch","sub","msg","interpretAsType","$isSchemaMap","$__schemaType","push","caster","model","$isMongooseDocumentArray","casterConstructor","$isMongooseArray","arrayPath","_schemaType","toAdd","$embeddedSchemaType","_arrayPath","_arrayParentPath","$parentSchemaDocArray","hasOwnProperty","replace","_path","re","RegExp","constructorName","getFunctionName","oldObj","Function","Mixed","cast","of","_isMerging","DocumentArray","castFromTypeKey","childSchema","schemaName","Subdocument","Buffer","isBuffer","ObjectId","Decimal128","toString","createMapNestedSchemaType","_mapType","isInlineSchema","subdocumentSchema","eachPath","subpath","select","fn","len","requiredPaths","invalidate","_requiredpaths","ret","isRequired","indexedPaths","_indexedpaths","indexes","pathType","singleNestedPath","getPositionalPathType","self","filter","Boolean","isNested","queue","args","pre","remainingArgs","apply","el","post","plugin","opts","deduplicate","method","static","fields","expires","renameObjKey","field","auto","_propagateOptionsToImplicitlyCreatedSchemas","baseSchema","indexTypes","localField","foreignField","virtualPreInit","_v","$$populatedVirtuals","justOne","count","unset","doc","parts","cur","remnant","join","mem","part","virtualpath","forEach","allKeys","startsWith","_deletePath","pieces","piece","removeVirtual","indexOf","loadClass","virtualsOnly","getPrototypeOf","getOwnPropertyNames","match","getOwnPropertyDescriptor","getters","setters","_getSchema","_this","pathschema","resultPath","$fullPath","search","foundschema","trypath","isArrayFilter","_getPathType","endsWith","_preCompile","module","exports"],"sources":["C:/Users/Lenovo/node_modules/mongoose/lib/schema.js"],"sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst EventEmitter = require('events').EventEmitter;\nconst Kareem = require('kareem');\nconst MongooseError = require('./error/mongooseError');\nconst SchemaType = require('./schemaType');\nconst SchemaTypeOptions = require('./options/schemaTypeOptions');\nconst VirtualOptions = require('./options/virtualOptions');\nconst VirtualType = require('./virtualType');\nconst addAutoId = require('./helpers/schema/addAutoId');\nconst clone = require('./helpers/clone');\nconst get = require('./helpers/get');\nconst getConstructorName = require('./helpers/getConstructorName');\nconst getIndexes = require('./helpers/schema/getIndexes');\nconst handleReadPreferenceAliases = require('./helpers/query/handleReadPreferenceAliases');\nconst idGetter = require('./helpers/schema/idGetter');\nconst merge = require('./helpers/schema/merge');\nconst mpath = require('mpath');\nconst setupTimestamps = require('./helpers/timestamps/setupTimestamps');\nconst utils = require('./utils');\nconst validateRef = require('./helpers/populate/validateRef');\nconst util = require('util');\n\nlet MongooseTypes;\n\nconst queryHooks = require('./helpers/query/applyQueryMiddleware').\n  middlewareFunctions;\nconst documentHooks = require('./helpers/model/applyHooks').middlewareFunctions;\nconst hookNames = queryHooks.concat(documentHooks).\n  reduce((s, hook) => s.add(hook), new Set());\n\nconst isPOJO = utils.isPOJO;\n\nlet id = 0;\n\nconst numberRE = /^\\d+$/;\n\n/**\n * Schema constructor.\n *\n * #### Example:\n *\n *     const child = new Schema({ name: String });\n *     const schema = new Schema({ name: String, age: Number, children: [child] });\n *     const Tree = mongoose.model('Tree', schema);\n *\n *     // setting schema options\n *     new Schema({ name: String }, { _id: false, autoIndex: false })\n *\n * #### Options:\n *\n * - [autoIndex](https://mongoosejs.com/docs/guide.html#autoIndex): bool - defaults to null (which means use the connection's autoIndex option)\n * - [autoCreate](https://mongoosejs.com/docs/guide.html#autoCreate): bool - defaults to null (which means use the connection's autoCreate option)\n * - [bufferCommands](https://mongoosejs.com/docs/guide.html#bufferCommands): bool - defaults to true\n * - [bufferTimeoutMS](https://mongoosejs.com/docs/guide.html#bufferTimeoutMS): number - defaults to 10000 (10 seconds). If `bufferCommands` is enabled, the amount of time Mongoose will wait for connectivity to be restablished before erroring out.\n * - [capped](https://mongoosejs.com/docs/guide.html#capped): bool | number | object - defaults to false\n * - [collection](https://mongoosejs.com/docs/guide.html#collection): string - no default\n * - [discriminatorKey](https://mongoosejs.com/docs/guide.html#discriminatorKey): string - defaults to `__t`\n * - [id](https://mongoosejs.com/docs/guide.html#id): bool - defaults to true\n * - [_id](https://mongoosejs.com/docs/guide.html#_id): bool - defaults to true\n * - [minimize](https://mongoosejs.com/docs/guide.html#minimize): bool - controls [document#toObject](https://mongoosejs.com/docs/api/document.html#Document.prototype.toObject()) behavior when called manually - defaults to true\n * - [read](https://mongoosejs.com/docs/guide.html#read): string\n * - [writeConcern](https://mongoosejs.com/docs/guide.html#writeConcern): object - defaults to null, use to override [the MongoDB server's default write concern settings](https://www.mongodb.com/docs/manual/reference/write-concern/)\n * - [shardKey](https://mongoosejs.com/docs/guide.html#shardKey): object - defaults to `null`\n * - [strict](https://mongoosejs.com/docs/guide.html#strict): bool - defaults to true\n * - [strictQuery](https://mongoosejs.com/docs/guide.html#strictQuery): bool - defaults to false\n * - [toJSON](https://mongoosejs.com/docs/guide.html#toJSON) - object - no default\n * - [toObject](https://mongoosejs.com/docs/guide.html#toObject) - object - no default\n * - [typeKey](https://mongoosejs.com/docs/guide.html#typeKey) - string - defaults to 'type'\n * - [validateBeforeSave](https://mongoosejs.com/docs/guide.html#validateBeforeSave) - bool - defaults to `true`\n * - [validateModifiedOnly](https://mongoosejs.com/docs/api/document.html#Document.prototype.validate()) - bool - defaults to `false`\n * - [versionKey](https://mongoosejs.com/docs/guide.html#versionKey): string or object - defaults to \"__v\"\n * - [optimisticConcurrency](https://mongoosejs.com/docs/guide.html#optimisticConcurrency): bool - defaults to false. Set to true to enable [optimistic concurrency](https://thecodebarbarian.com/whats-new-in-mongoose-5-10-optimistic-concurrency.html).\n * - [collation](https://mongoosejs.com/docs/guide.html#collation): object - defaults to null (which means use no collation)\n * - [timeseries](https://mongoosejs.com/docs/guide.html#timeseries): object - defaults to null (which means this schema's collection won't be a timeseries collection)\n * - [selectPopulatedPaths](https://mongoosejs.com/docs/guide.html#selectPopulatedPaths): boolean - defaults to `true`\n * - [skipVersioning](https://mongoosejs.com/docs/guide.html#skipVersioning): object - paths to exclude from versioning\n * - [timestamps](https://mongoosejs.com/docs/guide.html#timestamps): object or boolean - defaults to `false`. If true, Mongoose adds `createdAt` and `updatedAt` properties to your schema and manages those properties for you.\n * - [pluginTags](https://mongoosejs.com/docs/guide.html#pluginTags): array of strings - defaults to `undefined`. If set and plugin called with `tags` option, will only apply that plugin to schemas with a matching tag.\n * - [virtuals](https://mongoosejs.com/docs/tutorials/virtuals.html#virtuals-via-schema-options): object - virtuals to define, alias for [`.virtual`](https://mongoosejs.com/docs/api/schema.html#Schema.prototype.virtual())\n * - [collectionOptions]: object with options passed to [`createCollection()`](https://www.mongodb.com/docs/manual/reference/method/db.createCollection/) when calling `Model.createCollection()` or `autoCreate` set to true.\n *\n * #### Options for Nested Schemas:\n *\n * - `excludeIndexes`: bool - defaults to `false`. If `true`, skip building indexes on this schema's paths.\n *\n * #### Note:\n *\n * _When nesting schemas, (`children` in the example above), always declare the child schema first before passing it into its parent._\n *\n * @param {Object|Schema|Array} [definition] Can be one of: object describing schema paths, or schema to copy, or array of objects and schemas\n * @param {Object} [options]\n * @inherits NodeJS EventEmitter https://nodejs.org/api/events.html#class-eventemitter\n * @event `init`: Emitted after the schema is compiled into a `Model`.\n * @api public\n */\n\nfunction Schema(obj, options) {\n  if (!(this instanceof Schema)) {\n    return new Schema(obj, options);\n  }\n\n  this.obj = obj;\n  this.paths = {};\n  this.aliases = {};\n  this.subpaths = {};\n  this.virtuals = {};\n  this.singleNestedPaths = {};\n  this.nested = {};\n  this.inherits = {};\n  this.callQueue = [];\n  this._indexes = [];\n  this.methods = (options && options.methods) || {};\n  this.methodOptions = {};\n  this.statics = (options && options.statics) || {};\n  this.tree = {};\n  this.query = (options && options.query) || {};\n  this.childSchemas = [];\n  this.plugins = [];\n  // For internal debugging. Do not use this to try to save a schema in MDB.\n  this.$id = ++id;\n  this.mapPaths = [];\n\n  this.s = {\n    hooks: new Kareem()\n  };\n  this.options = this.defaultOptions(options);\n\n  // build paths\n  if (Array.isArray(obj)) {\n    for (const definition of obj) {\n      this.add(definition);\n    }\n  } else if (obj) {\n    this.add(obj);\n  }\n\n  // build virtual paths\n  if (options && options.virtuals) {\n    const virtuals = options.virtuals;\n    const pathNames = Object.keys(virtuals);\n    for (const pathName of pathNames) {\n      const pathOptions = virtuals[pathName].options ? virtuals[pathName].options : undefined;\n      const virtual = this.virtual(pathName, pathOptions);\n\n      if (virtuals[pathName].get) {\n        virtual.get(virtuals[pathName].get);\n      }\n\n      if (virtuals[pathName].set) {\n        virtual.set(virtuals[pathName].set);\n      }\n    }\n  }\n\n  // check if _id's value is a subdocument (gh-2276)\n  const _idSubDoc = obj && obj._id && utils.isObject(obj._id);\n\n  // ensure the documents get an auto _id unless disabled\n  const auto_id = !this.paths['_id'] &&\n      (this.options._id) && !_idSubDoc;\n\n  if (auto_id) {\n    addAutoId(this);\n  }\n\n  this.setupTimestamp(this.options.timestamps);\n}\n\n/**\n * Create virtual properties with alias field\n * @api private\n */\nfunction aliasFields(schema, paths) {\n  for (const path of Object.keys(paths)) {\n    let alias = null;\n    if (paths[path] != null) {\n      alias = paths[path];\n    } else {\n      const options = get(schema.paths[path], 'options');\n      if (options == null) {\n        continue;\n      }\n\n      alias = options.alias;\n    }\n\n    if (!alias) {\n      continue;\n    }\n\n    const prop = schema.paths[path].path;\n    if (Array.isArray(alias)) {\n      for (const a of alias) {\n        if (typeof a !== 'string') {\n          throw new Error('Invalid value for alias option on ' + prop + ', got ' + a);\n        }\n\n        schema.aliases[a] = prop;\n\n        schema.\n          virtual(a).\n          get((function(p) {\n            return function() {\n              if (typeof this.get === 'function') {\n                return this.get(p);\n              }\n              return this[p];\n            };\n          })(prop)).\n          set((function(p) {\n            return function(v) {\n              return this.$set(p, v);\n            };\n          })(prop));\n      }\n\n      continue;\n    }\n\n    if (typeof alias !== 'string') {\n      throw new Error('Invalid value for alias option on ' + prop + ', got ' + alias);\n    }\n\n    schema.aliases[alias] = prop;\n\n    schema.\n      virtual(alias).\n      get((function(p) {\n        return function() {\n          if (typeof this.get === 'function') {\n            return this.get(p);\n          }\n          return this[p];\n        };\n      })(prop)).\n      set((function(p) {\n        return function(v) {\n          return this.$set(p, v);\n        };\n      })(prop));\n  }\n}\n\n/*!\n * Inherit from EventEmitter.\n */\nSchema.prototype = Object.create(EventEmitter.prototype);\nSchema.prototype.constructor = Schema;\nSchema.prototype.instanceOfSchema = true;\n\n/*!\n * ignore\n */\n\nObject.defineProperty(Schema.prototype, '$schemaType', {\n  configurable: false,\n  enumerable: false,\n  writable: true\n});\n\n/**\n * Array of child schemas (from document arrays and single nested subdocs)\n * and their corresponding compiled models. Each element of the array is\n * an object with 2 properties: `schema` and `model`.\n *\n * This property is typically only useful for plugin authors and advanced users.\n * You do not need to interact with this property at all to use mongoose.\n *\n * @api public\n * @property childSchemas\n * @memberOf Schema\n * @instance\n */\n\nObject.defineProperty(Schema.prototype, 'childSchemas', {\n  configurable: false,\n  enumerable: true,\n  writable: true\n});\n\n/**\n * Object containing all virtuals defined on this schema.\n * The objects' keys are the virtual paths and values are instances of `VirtualType`.\n *\n * This property is typically only useful for plugin authors and advanced users.\n * You do not need to interact with this property at all to use mongoose.\n *\n * #### Example:\n *\n *     const schema = new Schema({});\n *     schema.virtual('answer').get(() => 42);\n *\n *     console.log(schema.virtuals); // { answer: VirtualType { path: 'answer', ... } }\n *     console.log(schema.virtuals['answer'].getters[0].call()); // 42\n *\n * @api public\n * @property virtuals\n * @memberOf Schema\n * @instance\n */\n\nObject.defineProperty(Schema.prototype, 'virtuals', {\n  configurable: false,\n  enumerable: true,\n  writable: true\n});\n\n/**\n * The original object passed to the schema constructor\n *\n * #### Example:\n *\n *     const schema = new Schema({ a: String }).add({ b: String });\n *     schema.obj; // { a: String }\n *\n * @api public\n * @property obj\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.obj;\n\n/**\n * The paths defined on this schema. The keys are the top-level paths\n * in this schema, and the values are instances of the SchemaType class.\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: String }, { _id: false });\n *     schema.paths; // { name: SchemaString { ... } }\n *\n *     schema.add({ age: Number });\n *     schema.paths; // { name: SchemaString { ... }, age: SchemaNumber { ... } }\n *\n * @api public\n * @property paths\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.paths;\n\n/**\n * Schema as a tree\n *\n * #### Example:\n *\n *     {\n *         '_id'     : ObjectId\n *       , 'nested'  : {\n *             'key' : String\n *         }\n *     }\n *\n * @api private\n * @property tree\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.tree;\n\n/**\n * Returns a deep copy of the schema\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: String });\n *     const clone = schema.clone();\n *     clone === schema; // false\n *     clone.path('name'); // SchemaString { ... }\n *\n * @return {Schema} the cloned schema\n * @api public\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.clone = function() {\n  const s = this._clone();\n\n  // Bubble up `init` for backwards compat\n  s.on('init', v => this.emit('init', v));\n\n  return s;\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._clone = function _clone(Constructor) {\n  Constructor = Constructor || (this.base == null ? Schema : this.base.Schema);\n\n  const s = new Constructor({}, this._userProvidedOptions);\n  s.base = this.base;\n  s.obj = this.obj;\n  s.options = clone(this.options);\n  s.callQueue = this.callQueue.map(function(f) { return f; });\n  s.methods = clone(this.methods);\n  s.methodOptions = clone(this.methodOptions);\n  s.statics = clone(this.statics);\n  s.query = clone(this.query);\n  s.plugins = Array.prototype.slice.call(this.plugins);\n  s._indexes = clone(this._indexes);\n  s.s.hooks = this.s.hooks.clone();\n\n  s.tree = clone(this.tree);\n  s.paths = Object.fromEntries(\n    Object.entries(this.paths).map(([key, value]) => ([key, value.clone()]))\n  );\n  s.nested = clone(this.nested);\n  s.subpaths = clone(this.subpaths);\n  for (const schemaType of Object.values(s.paths)) {\n    if (schemaType.$isSingleNested) {\n      const path = schemaType.path;\n      for (const key of Object.keys(schemaType.schema.paths)) {\n        s.singleNestedPaths[path + '.' + key] = schemaType.schema.paths[key];\n      }\n      for (const key of Object.keys(schemaType.schema.singleNestedPaths)) {\n        s.singleNestedPaths[path + '.' + key] =\n          schemaType.schema.singleNestedPaths[key];\n      }\n      for (const key of Object.keys(schemaType.schema.subpaths)) {\n        s.singleNestedPaths[path + '.' + key] =\n          schemaType.schema.subpaths[key];\n      }\n      for (const key of Object.keys(schemaType.schema.nested)) {\n        s.singleNestedPaths[path + '.' + key] = 'nested';\n      }\n    }\n  }\n  s.childSchemas = gatherChildSchemas(s);\n\n  s.virtuals = clone(this.virtuals);\n  s.$globalPluginsApplied = this.$globalPluginsApplied;\n  s.$isRootDiscriminator = this.$isRootDiscriminator;\n  s.$implicitlyCreated = this.$implicitlyCreated;\n  s.$id = ++id;\n  s.$originalSchemaId = this.$id;\n  s.mapPaths = [].concat(this.mapPaths);\n\n  if (this.discriminatorMapping != null) {\n    s.discriminatorMapping = Object.assign({}, this.discriminatorMapping);\n  }\n  if (this.discriminators != null) {\n    s.discriminators = Object.assign({}, this.discriminators);\n  }\n  if (this._applyDiscriminators != null) {\n    s._applyDiscriminators = new Map(this._applyDiscriminators);\n  }\n\n  s.aliases = Object.assign({}, this.aliases);\n\n  return s;\n};\n\n/**\n * Returns a new schema that has the picked `paths` from this schema.\n *\n * This method is analagous to [Lodash's `pick()` function](https://lodash.com/docs/4.17.15#pick) for Mongoose schemas.\n *\n * #### Example:\n *\n *     const schema = Schema({ name: String, age: Number });\n *     // Creates a new schema with the same `name` path as `schema`,\n *     // but no `age` path.\n *     const newSchema = schema.pick(['name']);\n *\n *     newSchema.path('name'); // SchemaString { ... }\n *     newSchema.path('age'); // undefined\n *\n * @param {String[]} paths List of Paths to pick for the new Schema\n * @param {Object} [options] Options to pass to the new Schema Constructor (same as `new Schema(.., Options)`). Defaults to `this.options` if not set.\n * @return {Schema}\n * @api public\n */\n\nSchema.prototype.pick = function(paths, options) {\n  const newSchema = new Schema({}, options || this.options);\n  if (!Array.isArray(paths)) {\n    throw new MongooseError('Schema#pick() only accepts an array argument, ' +\n      'got \"' + typeof paths + '\"');\n  }\n\n  for (const path of paths) {\n    if (this.nested[path]) {\n      newSchema.add({ [path]: get(this.tree, path) });\n    } else {\n      const schematype = this.path(path);\n      if (schematype == null) {\n        throw new MongooseError('Path `' + path + '` is not in the schema');\n      }\n      newSchema.add({ [path]: schematype });\n    }\n  }\n\n  return newSchema;\n};\n\n/**\n * Returns a new schema that has the `paths` from the original schema, minus the omitted ones.\n *\n * This method is analagous to [Lodash's `omit()` function](https://lodash.com/docs/#omit) for Mongoose schemas.\n *\n * #### Example:\n *\n *     const schema = Schema({ name: String, age: Number });\n *     // Creates a new schema omitting the `age` path\n *     const newSchema = schema.omit(['age']);\n *\n *     newSchema.path('name'); // SchemaString { ... }\n *     newSchema.path('age'); // undefined\n *\n * @param {String[]} paths List of Paths to omit for the new Schema\n * @param {Object} [options] Options to pass to the new Schema Constructor (same as `new Schema(.., Options)`). Defaults to `this.options` if not set.\n * @return {Schema}\n * @api public\n */\n\nSchema.prototype.omit = function(paths, options) {\n  const newSchema = new Schema(this, options || this.options);\n  if (!Array.isArray(paths)) {\n    throw new MongooseError(\n      'Schema#omit() only accepts an array argument, ' +\n        'got \"' +\n        typeof paths +\n        '\"'\n    );\n  }\n\n  newSchema.remove(paths);\n\n  for (const nested in newSchema.singleNestedPaths) {\n    if (paths.includes(nested)) {\n      delete newSchema.singleNestedPaths[nested];\n    }\n  }\n\n  return newSchema;\n};\n\n/**\n * Returns default options for this schema, merged with `options`.\n *\n * @param {Object} [options] Options to overwrite the default options\n * @return {Object} The merged options of `options` and the default options\n * @api private\n */\n\nSchema.prototype.defaultOptions = function(options) {\n  this._userProvidedOptions = options == null ? {} : clone(options);\n  const baseOptions = this.base && this.base.options || {};\n  const strict = 'strict' in baseOptions ? baseOptions.strict : true;\n  const strictQuery = 'strictQuery' in baseOptions ? baseOptions.strictQuery : false;\n  const id = 'id' in baseOptions ? baseOptions.id : true;\n  options = {\n    strict,\n    strictQuery,\n    bufferCommands: true,\n    capped: false, // { size, max, autoIndexId }\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    // the following are only applied at construction time\n    _id: true,\n    id: id,\n    typeKey: 'type',\n    ...options\n  };\n\n  if (options.versionKey && typeof options.versionKey !== 'string') {\n    throw new MongooseError('`versionKey` must be falsy or string, got `' + (typeof options.versionKey) + '`');\n  }\n\n  if (typeof options.read === 'string') {\n    options.read = handleReadPreferenceAliases(options.read);\n  } else if (Array.isArray(options.read) && typeof options.read[0] === 'string') {\n    options.read = {\n      mode: handleReadPreferenceAliases(options.read[0]),\n      tags: options.read[1]\n    };\n  }\n\n  if (options.optimisticConcurrency && !options.versionKey) {\n    throw new MongooseError('Must set `versionKey` if using `optimisticConcurrency`');\n  }\n\n  return options;\n};\n\n/**\n * Inherit a Schema by applying a discriminator on an existing Schema.\n *\n *\n * #### Example:\n *\n *     const eventSchema = new mongoose.Schema({ timestamp: Date }, { discriminatorKey: 'kind' });\n *\n *     const clickedEventSchema = new mongoose.Schema({ element: String }, { discriminatorKey: 'kind' });\n *     const ClickedModel = eventSchema.discriminator('clicked', clickedEventSchema);\n *\n *     const Event = mongoose.model('Event', eventSchema);\n *\n *     Event.discriminators['clicked']; // Model { clicked }\n *\n *     const doc = await Event.create({ kind: 'clicked', element: '#hero' });\n *     doc.element; // '#hero'\n *     doc instanceof ClickedModel; // true\n *\n * @param {String} name the name of the discriminator\n * @param {Schema} schema the discriminated Schema\n * @return {Schema} the Schema instance\n * @api public\n */\nSchema.prototype.discriminator = function(name, schema) {\n  this._applyDiscriminators = this._applyDiscriminators || new Map();\n  this._applyDiscriminators.set(name, schema);\n\n  return this;\n};\n\n/**\n * Adds key path / schema type pairs to this schema.\n *\n * #### Example:\n *\n *     const ToySchema = new Schema();\n *     ToySchema.add({ name: 'string', color: 'string', price: 'number' });\n *\n *     const TurboManSchema = new Schema();\n *     // You can also `add()` another schema and copy over all paths, virtuals,\n *     // getters, setters, indexes, methods, and statics.\n *     TurboManSchema.add(ToySchema).add({ year: Number });\n *\n * @param {Object|Schema} obj plain object with paths to add, or another schema\n * @param {String} [prefix] path to prefix the newly added paths with\n * @return {Schema} the Schema instance\n * @api public\n */\n\nSchema.prototype.add = function add(obj, prefix) {\n  if (obj instanceof Schema || (obj != null && obj.instanceOfSchema)) {\n    merge(this, obj);\n\n    return this;\n  }\n\n  // Special case: setting top-level `_id` to false should convert to disabling\n  // the `_id` option. This behavior never worked before 5.4.11 but numerous\n  // codebases use it (see gh-7516, gh-7512).\n  if (obj._id === false && prefix == null) {\n    this.options._id = false;\n  }\n\n  prefix = prefix || '';\n  // avoid prototype pollution\n  if (prefix === '__proto__.' || prefix === 'constructor.' || prefix === 'prototype.') {\n    return this;\n  }\n\n  const keys = Object.keys(obj);\n  const typeKey = this.options.typeKey;\n  for (const key of keys) {\n    if (utils.specialProperties.has(key)) {\n      continue;\n    }\n\n    const fullPath = prefix + key;\n    const val = obj[key];\n\n    if (val == null) {\n      throw new TypeError('Invalid value for schema path `' + fullPath +\n        '`, got value \"' + val + '\"');\n    }\n    // Retain `_id: false` but don't set it as a path, re: gh-8274.\n    if (key === '_id' && val === false) {\n      continue;\n    }\n    // Deprecate setting schema paths to primitive types (gh-7558)\n    let isMongooseTypeString = false;\n    if (typeof val === 'string') {\n      // Handle the case in which the type is specified as a string (eg. 'date', 'oid', ...)\n      const MongooseTypes = this.base != null ? this.base.Schema.Types : Schema.Types;\n      const upperVal = val.charAt(0).toUpperCase() + val.substring(1);\n      isMongooseTypeString = MongooseTypes[upperVal] != null;\n    }\n    if (\n      key !== '_id' &&\n      ((typeof val !== 'object' && typeof val !== 'function' && !isMongooseTypeString) ||\n      val == null)\n    ) {\n      throw new TypeError(`Invalid schema configuration: \\`${val}\\` is not ` +\n        `a valid type at path \\`${key}\\`. See ` +\n        'https://bit.ly/mongoose-schematypes for a list of valid schema types.');\n    }\n    if (val instanceof VirtualType || (val.constructor && val.constructor.name || null) === 'VirtualType') {\n      this.virtual(val);\n      continue;\n    }\n\n    if (Array.isArray(val) && val.length === 1 && val[0] == null) {\n      throw new TypeError('Invalid value for schema Array path `' + fullPath +\n        '`, got value \"' + val[0] + '\"');\n    }\n\n    if (!(isPOJO(val) || val instanceof SchemaTypeOptions)) {\n      // Special-case: Non-options definitely a path so leaf at this node\n      // Examples: Schema instances, SchemaType instances\n      if (prefix) {\n        this.nested[prefix.substring(0, prefix.length - 1)] = true;\n      }\n      this.path(prefix + key, val);\n      if (val[0] != null && !(val[0].instanceOfSchema) && utils.isPOJO(val[0].discriminators)) {\n        const schemaType = this.path(prefix + key);\n        for (const key in val[0].discriminators) {\n          schemaType.discriminator(key, val[0].discriminators[key]);\n        }\n      }\n    } else if (Object.keys(val).length < 1) {\n      // Special-case: {} always interpreted as Mixed path so leaf at this node\n      if (prefix) {\n        this.nested[prefix.substring(0, prefix.length - 1)] = true;\n      }\n      this.path(fullPath, val); // mixed type\n    } else if (!val[typeKey] || (typeKey === 'type' && isPOJO(val.type) && val.type.type)) {\n      // Special-case: POJO with no bona-fide type key - interpret as tree of deep paths so recurse\n      // nested object `{ last: { name: String } }`. Avoid functions with `.type` re: #10807 because\n      // NestJS sometimes adds `Date.type`.\n      this.nested[fullPath] = true;\n      this.add(val, fullPath + '.');\n    } else {\n      // There IS a bona-fide type key that may also be a POJO\n      const _typeDef = val[typeKey];\n      if (isPOJO(_typeDef) && Object.keys(_typeDef).length > 0) {\n        // If a POJO is the value of a type key, make it a subdocument\n        if (prefix) {\n          this.nested[prefix.substring(0, prefix.length - 1)] = true;\n        }\n\n        const childSchemaOptions = {};\n        if (this._userProvidedOptions.typeKey) {\n          childSchemaOptions.typeKey = this._userProvidedOptions.typeKey;\n        }\n        // propagate 'strict' option to child schema\n        if (this._userProvidedOptions.strict != null) {\n          childSchemaOptions.strict = this._userProvidedOptions.strict;\n        }\n        if (this._userProvidedOptions.toObject != null) {\n          childSchemaOptions.toObject = utils.omit(this._userProvidedOptions.toObject, ['transform']);\n        }\n        if (this._userProvidedOptions.toJSON != null) {\n          childSchemaOptions.toJSON = utils.omit(this._userProvidedOptions.toJSON, ['transform']);\n        }\n\n        const _schema = new Schema(_typeDef, childSchemaOptions);\n        _schema.$implicitlyCreated = true;\n        const schemaWrappedPath = Object.assign({}, val, { [typeKey]: _schema });\n        this.path(prefix + key, schemaWrappedPath);\n      } else {\n        // Either the type is non-POJO or we interpret it as Mixed anyway\n        if (prefix) {\n          this.nested[prefix.substring(0, prefix.length - 1)] = true;\n        }\n        this.path(prefix + key, val);\n        if (val != null && !(val.instanceOfSchema) && utils.isPOJO(val.discriminators)) {\n          const schemaType = this.path(prefix + key);\n          for (const key in val.discriminators) {\n            schemaType.discriminator(key, val.discriminators[key]);\n          }\n        }\n      }\n    }\n  }\n\n  const aliasObj = Object.fromEntries(\n    Object.entries(obj).map(([key]) => ([prefix + key, null]))\n  );\n  aliasFields(this, aliasObj);\n  return this;\n};\n\n/**\n * Add an alias for `path`. This means getting or setting the `alias`\n * is equivalent to getting or setting the `path`.\n *\n * #### Example:\n *\n *     const toySchema = new Schema({ n: String });\n *\n *     // Make 'name' an alias for 'n'\n *     toySchema.alias('n', 'name');\n *\n *     const Toy = mongoose.model('Toy', toySchema);\n *     const turboMan = new Toy({ n: 'Turbo Man' });\n *\n *     turboMan.name; // 'Turbo Man'\n *     turboMan.n; // 'Turbo Man'\n *\n *     turboMan.name = 'Turbo Man Action Figure';\n *     turboMan.n; // 'Turbo Man Action Figure'\n *\n *     await turboMan.save(); // Saves { _id: ..., n: 'Turbo Man Action Figure' }\n *\n *\n * @param {String} path real path to alias\n * @param {String|String[]} alias the path(s) to use as an alias for `path`\n * @return {Schema} the Schema instance\n * @api public\n */\n\nSchema.prototype.alias = function alias(path, alias) {\n  aliasFields(this, { [path]: alias });\n  return this;\n};\n\n/**\n * Remove an index by name or index specification.\n *\n * removeIndex only removes indexes from your schema object. Does **not** affect the indexes\n * in MongoDB.\n *\n * #### Example:\n *\n *     const ToySchema = new Schema({ name: String, color: String, price: Number });\n *\n *     // Add a new index on { name, color }\n *     ToySchema.index({ name: 1, color: 1 });\n *\n *     // Remove index on { name, color }\n *     // Keep in mind that order matters! `removeIndex({ color: 1, name: 1 })` won't remove the index\n *     ToySchema.removeIndex({ name: 1, color: 1 });\n *\n *     // Add an index with a custom name\n *     ToySchema.index({ color: 1 }, { name: 'my custom index name' });\n *     // Remove index by name\n *     ToySchema.removeIndex('my custom index name');\n *\n * @param {Object|string} index name or index specification\n * @return {Schema} the Schema instance\n * @api public\n */\n\nSchema.prototype.removeIndex = function removeIndex(index) {\n  if (arguments.length > 1) {\n    throw new Error('removeIndex() takes only 1 argument');\n  }\n\n  if (typeof index !== 'object' && typeof index !== 'string') {\n    throw new Error('removeIndex() may only take either an object or a string as an argument');\n  }\n\n  if (typeof index === 'object') {\n    for (let i = this._indexes.length - 1; i >= 0; --i) {\n      if (util.isDeepStrictEqual(this._indexes[i][0], index)) {\n        this._indexes.splice(i, 1);\n      }\n    }\n  } else {\n    for (let i = this._indexes.length - 1; i >= 0; --i) {\n      if (this._indexes[i][1] != null && this._indexes[i][1].name === index) {\n        this._indexes.splice(i, 1);\n      }\n    }\n  }\n\n  return this;\n};\n\n/**\n * Remove all indexes from this schema.\n *\n * clearIndexes only removes indexes from your schema object. Does **not** affect the indexes\n * in MongoDB.\n *\n * #### Example:\n *\n *     const ToySchema = new Schema({ name: String, color: String, price: Number });\n *     ToySchema.index({ name: 1 });\n *     ToySchema.index({ color: 1 });\n *\n *     // Remove all indexes on this schema\n *     ToySchema.clearIndexes();\n *\n *     ToySchema.indexes(); // []\n *\n * @return {Schema} the Schema instance\n * @api public\n */\n\nSchema.prototype.clearIndexes = function clearIndexes() {\n  this._indexes.length = 0;\n\n  return this;\n};\n\n/**\n * Reserved document keys.\n *\n * Keys in this object are names that are warned in schema declarations\n * because they have the potential to break Mongoose/ Mongoose plugins functionality. If you create a schema\n * using `new Schema()` with one of these property names, Mongoose will log a warning.\n *\n * - _posts\n * - _pres\n * - collection\n  * - emit\n * - errors\n * - get\n * - init\n * - isModified\n * - isNew\n * - listeners\n * - modelName\n * - on\n * - once\n * - populated\n * - prototype\n * - remove\n * - removeListener\n * - save\n * - schema\n * - toObject\n * - validate\n *\n * _NOTE:_ Use of these terms as method names is permitted, but play at your own risk, as they may be existing mongoose document methods you are stomping on.\n *\n *      const schema = new Schema(..);\n *      schema.methods.init = function () {} // potentially breaking\n *\n * @property reserved\n * @memberOf Schema\n * @static\n */\n\nSchema.reserved = Object.create(null);\nSchema.prototype.reserved = Schema.reserved;\n\nconst reserved = Schema.reserved;\n// Core object\nreserved['prototype'] =\n// EventEmitter\nreserved.emit =\nreserved.listeners =\nreserved.removeListener =\n\n// document properties and functions\nreserved.collection =\nreserved.errors =\nreserved.get =\nreserved.init =\nreserved.isModified =\nreserved.isNew =\nreserved.populated =\nreserved.remove =\nreserved.save =\nreserved.toObject =\nreserved.validate = 1;\nreserved.collection = 1;\n\n/**\n * Gets/sets schema paths.\n *\n * Sets a path (if arity 2)\n * Gets a path (if arity 1)\n *\n * #### Example:\n *\n *     schema.path('name') // returns a SchemaType\n *     schema.path('name', Number) // changes the schemaType of `name` to Number\n *\n * @param {String} path The name of the Path to get / set\n * @param {Object} [obj] The Type to set the path to, if provided the path will be SET, otherwise the path will be GET\n * @api public\n */\n\nSchema.prototype.path = function(path, obj) {\n  if (obj === undefined) {\n    // Convert to '.$' to check subpaths re: gh-6405\n    const cleanPath = _pathToPositionalSyntax(path);\n    let schematype = _getPath(this, path, cleanPath);\n    if (schematype != null) {\n      return schematype;\n    }\n\n    // Look for maps\n    const mapPath = getMapPath(this, path);\n    if (mapPath != null) {\n      return mapPath;\n    }\n\n    // Look if a parent of this path is mixed\n    schematype = this.hasMixedParent(cleanPath);\n    if (schematype != null) {\n      return schematype;\n    }\n\n    // subpaths?\n    return /\\.\\d+\\.?.*$/.test(path)\n      ? getPositionalPath(this, path, cleanPath)\n      : undefined;\n  }\n\n  // some path names conflict with document methods\n  const firstPieceOfPath = path.split('.')[0];\n  if (reserved[firstPieceOfPath] && !this.options.suppressReservedKeysWarning) {\n    const errorMessage = `\\`${firstPieceOfPath}\\` is a reserved schema pathname and may break some functionality. ` +\n      'You are allowed to use it, but use at your own risk. ' +\n      'To disable this warning pass `suppressReservedKeysWarning` as a schema option.';\n\n    utils.warn(errorMessage);\n  }\n\n  if (typeof obj === 'object' && utils.hasUserDefinedProperty(obj, 'ref')) {\n    validateRef(obj.ref, path);\n  }\n\n  // update the tree\n  const subpaths = path.split(/\\./);\n  const last = subpaths.pop();\n  let branch = this.tree;\n  let fullPath = '';\n\n  for (const sub of subpaths) {\n    if (utils.specialProperties.has(sub)) {\n      throw new Error('Cannot set special property `' + sub + '` on a schema');\n    }\n    fullPath = fullPath += (fullPath.length > 0 ? '.' : '') + sub;\n    if (!branch[sub]) {\n      this.nested[fullPath] = true;\n      branch[sub] = {};\n    }\n    if (typeof branch[sub] !== 'object') {\n      const msg = 'Cannot set nested path `' + path + '`. '\n          + 'Parent path `'\n          + fullPath\n          + '` already set to type ' + branch[sub].name\n          + '.';\n      throw new Error(msg);\n    }\n    branch = branch[sub];\n  }\n\n  branch[last] = clone(obj);\n\n  this.paths[path] = this.interpretAsType(path, obj, this.options);\n  const schemaType = this.paths[path];\n\n  if (schemaType.$isSchemaMap) {\n    // Maps can have arbitrary keys, so `$*` is internal shorthand for \"any key\"\n    // The '$' is to imply this path should never be stored in MongoDB so we\n    // can easily build a regexp out of this path, and '*' to imply \"any key.\"\n    const mapPath = path + '.$*';\n\n    this.paths[mapPath] = schemaType.$__schemaType;\n    this.mapPaths.push(this.paths[mapPath]);\n  }\n\n  if (schemaType.$isSingleNested) {\n    for (const key of Object.keys(schemaType.schema.paths)) {\n      this.singleNestedPaths[path + '.' + key] = schemaType.schema.paths[key];\n    }\n    for (const key of Object.keys(schemaType.schema.singleNestedPaths)) {\n      this.singleNestedPaths[path + '.' + key] =\n        schemaType.schema.singleNestedPaths[key];\n    }\n    for (const key of Object.keys(schemaType.schema.subpaths)) {\n      this.singleNestedPaths[path + '.' + key] =\n        schemaType.schema.subpaths[key];\n    }\n    for (const key of Object.keys(schemaType.schema.nested)) {\n      this.singleNestedPaths[path + '.' + key] = 'nested';\n    }\n\n    Object.defineProperty(schemaType.schema, 'base', {\n      configurable: true,\n      enumerable: false,\n      writable: false,\n      value: this.base\n    });\n\n    schemaType.caster.base = this.base;\n    this.childSchemas.push({\n      schema: schemaType.schema,\n      model: schemaType.caster\n    });\n  } else if (schemaType.$isMongooseDocumentArray) {\n    Object.defineProperty(schemaType.schema, 'base', {\n      configurable: true,\n      enumerable: false,\n      writable: false,\n      value: this.base\n    });\n\n    schemaType.casterConstructor.base = this.base;\n    this.childSchemas.push({\n      schema: schemaType.schema,\n      model: schemaType.casterConstructor\n    });\n  }\n\n  if (schemaType.$isMongooseArray && schemaType.caster instanceof SchemaType) {\n    let arrayPath = path;\n    let _schemaType = schemaType;\n\n    const toAdd = [];\n    while (_schemaType.$isMongooseArray) {\n      arrayPath = arrayPath + '.$';\n\n      // Skip arrays of document arrays\n      if (_schemaType.$isMongooseDocumentArray) {\n        _schemaType.$embeddedSchemaType._arrayPath = arrayPath;\n        _schemaType.$embeddedSchemaType._arrayParentPath = path;\n        _schemaType = _schemaType.$embeddedSchemaType;\n      } else {\n        _schemaType.caster._arrayPath = arrayPath;\n        _schemaType.caster._arrayParentPath = path;\n        _schemaType = _schemaType.caster;\n      }\n\n      this.subpaths[arrayPath] = _schemaType;\n    }\n\n    for (const _schemaType of toAdd) {\n      this.subpaths[_schemaType.path] = _schemaType;\n    }\n  }\n\n  if (schemaType.$isMongooseDocumentArray) {\n    for (const key of Object.keys(schemaType.schema.paths)) {\n      const _schemaType = schemaType.schema.paths[key];\n      this.subpaths[path + '.' + key] = _schemaType;\n      if (typeof _schemaType === 'object' && _schemaType != null && _schemaType.$parentSchemaDocArray == null) {\n        _schemaType.$parentSchemaDocArray = schemaType;\n      }\n    }\n    for (const key of Object.keys(schemaType.schema.subpaths)) {\n      const _schemaType = schemaType.schema.subpaths[key];\n      this.subpaths[path + '.' + key] = _schemaType;\n      if (typeof _schemaType === 'object' && _schemaType != null && _schemaType.$parentSchemaDocArray == null) {\n        _schemaType.$parentSchemaDocArray = schemaType;\n      }\n    }\n    for (const key of Object.keys(schemaType.schema.singleNestedPaths)) {\n      const _schemaType = schemaType.schema.singleNestedPaths[key];\n      this.subpaths[path + '.' + key] = _schemaType;\n      if (typeof _schemaType === 'object' && _schemaType != null && _schemaType.$parentSchemaDocArray == null) {\n        _schemaType.$parentSchemaDocArray = schemaType;\n      }\n    }\n  }\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction gatherChildSchemas(schema) {\n  const childSchemas = [];\n\n  for (const path of Object.keys(schema.paths)) {\n    const schematype = schema.paths[path];\n    if (schematype.$isMongooseDocumentArray || schematype.$isSingleNested) {\n      childSchemas.push({ schema: schematype.schema, model: schematype.caster });\n    }\n  }\n\n  return childSchemas;\n}\n\n/*!\n * ignore\n */\n\nfunction _getPath(schema, path, cleanPath) {\n  if (schema.paths.hasOwnProperty(path)) {\n    return schema.paths[path];\n  }\n  if (schema.subpaths.hasOwnProperty(cleanPath)) {\n    return schema.subpaths[cleanPath];\n  }\n  if (schema.singleNestedPaths.hasOwnProperty(cleanPath) && typeof schema.singleNestedPaths[cleanPath] === 'object') {\n    return schema.singleNestedPaths[cleanPath];\n  }\n\n  return null;\n}\n\n/*!\n * ignore\n */\n\nfunction _pathToPositionalSyntax(path) {\n  if (!/\\.\\d+/.test(path)) {\n    return path;\n  }\n  return path.replace(/\\.\\d+\\./g, '.$.').replace(/\\.\\d+$/, '.$');\n}\n\n/*!\n * ignore\n */\n\nfunction getMapPath(schema, path) {\n  if (schema.mapPaths.length === 0) {\n    return null;\n  }\n  for (const val of schema.mapPaths) {\n    const _path = val.path;\n    const re = new RegExp('^' + _path.replace(/\\.\\$\\*/g, '\\\\.[^.]+') + '$');\n    if (re.test(path)) {\n      return schema.paths[_path];\n    }\n  }\n\n  return null;\n}\n\n/**\n * The Mongoose instance this schema is associated with\n *\n * @property base\n * @api private\n */\n\nObject.defineProperty(Schema.prototype, 'base', {\n  configurable: true,\n  enumerable: false,\n  writable: true,\n  value: null\n});\n\n/**\n * Converts type arguments into Mongoose Types.\n *\n * @param {String} path\n * @param {Object} obj constructor\n * @param {Object} options\n * @api private\n */\n\nSchema.prototype.interpretAsType = function(path, obj, options) {\n  if (obj instanceof SchemaType) {\n    if (obj.path === path) {\n      return obj;\n    }\n    const clone = obj.clone();\n    clone.path = path;\n    return clone;\n  }\n\n  // If this schema has an associated Mongoose object, use the Mongoose object's\n  // copy of SchemaTypes re: gh-7158 gh-6933\n  const MongooseTypes = this.base != null ? this.base.Schema.Types : Schema.Types;\n  const Types = this.base != null ? this.base.Types : require('./types');\n\n  if (!utils.isPOJO(obj) && !(obj instanceof SchemaTypeOptions)) {\n    const constructorName = utils.getFunctionName(obj.constructor);\n    if (constructorName !== 'Object') {\n      const oldObj = obj;\n      obj = {};\n      obj[options.typeKey] = oldObj;\n    }\n  }\n\n  // Get the type making sure to allow keys named \"type\"\n  // and default to mixed if not specified.\n  // { type: { type: String, default: 'freshcut' } }\n  let type = obj[options.typeKey] && (obj[options.typeKey] instanceof Function || options.typeKey !== 'type' || !obj.type.type)\n    ? obj[options.typeKey]\n    : {};\n  let name;\n\n  if (utils.isPOJO(type) || type === 'mixed') {\n    return new MongooseTypes.Mixed(path, obj);\n  }\n\n  if (Array.isArray(type) || type === Array || type === 'array' || type === MongooseTypes.Array) {\n    // if it was specified through { type } look for `cast`\n    let cast = (type === Array || type === 'array')\n      ? obj.cast || obj.of\n      : type[0];\n\n    // new Schema({ path: [new Schema({ ... })] })\n    if (cast && cast.instanceOfSchema) {\n      if (!(cast instanceof Schema)) {\n        if (this.options._isMerging) {\n          cast = new Schema(cast);\n        } else {\n          throw new TypeError('Schema for array path `' + path +\n            '` is from a different copy of the Mongoose module. ' +\n            'Please make sure you\\'re using the same version ' +\n            'of Mongoose everywhere with `npm list mongoose`. If you are still ' +\n            'getting this error, please add `new Schema()` around the path: ' +\n            `${path}: new Schema(...)`);\n        }\n      }\n      return new MongooseTypes.DocumentArray(path, cast, obj);\n    }\n    if (cast &&\n        cast[options.typeKey] &&\n        cast[options.typeKey].instanceOfSchema) {\n      if (!(cast[options.typeKey] instanceof Schema)) {\n        if (this.options._isMerging) {\n          cast[options.typeKey] = new Schema(cast[options.typeKey]);\n        } else {\n          throw new TypeError('Schema for array path `' + path +\n            '` is from a different copy of the Mongoose module. ' +\n            'Please make sure you\\'re using the same version ' +\n            'of Mongoose everywhere with `npm list mongoose`. If you are still ' +\n            'getting this error, please add `new Schema()` around the path: ' +\n            `${path}: new Schema(...)`);\n        }\n      }\n      return new MongooseTypes.DocumentArray(path, cast[options.typeKey], obj, cast);\n    }\n\n    if (Array.isArray(cast)) {\n      return new MongooseTypes.Array(path, this.interpretAsType(path, cast, options), obj);\n    }\n\n    // Handle both `new Schema({ arr: [{ subpath: String }] })` and `new Schema({ arr: [{ type: { subpath: string } }] })`\n    const castFromTypeKey = (cast != null && cast[options.typeKey] && (options.typeKey !== 'type' || !cast.type.type)) ?\n      cast[options.typeKey] :\n      cast;\n    if (typeof cast === 'string') {\n      cast = MongooseTypes[cast.charAt(0).toUpperCase() + cast.substring(1)];\n    } else if (utils.isPOJO(castFromTypeKey)) {\n      if (Object.keys(castFromTypeKey).length) {\n        // The `minimize` and `typeKey` options propagate to child schemas\n        // declared inline, like `{ arr: [{ val: { $type: String } }] }`.\n        // See gh-3560\n        const childSchemaOptions = { minimize: options.minimize };\n        if (options.typeKey) {\n          childSchemaOptions.typeKey = options.typeKey;\n        }\n        // propagate 'strict' option to child schema\n        if (options.hasOwnProperty('strict')) {\n          childSchemaOptions.strict = options.strict;\n        }\n        if (options.hasOwnProperty('strictQuery')) {\n          childSchemaOptions.strictQuery = options.strictQuery;\n        }\n        if (options.hasOwnProperty('toObject')) {\n          childSchemaOptions.toObject = utils.omit(options.toObject, ['transform']);\n        }\n        if (options.hasOwnProperty('toJSON')) {\n          childSchemaOptions.toJSON = utils.omit(options.toJSON, ['transform']);\n        }\n\n        if (this._userProvidedOptions.hasOwnProperty('_id')) {\n          childSchemaOptions._id = this._userProvidedOptions._id;\n        } else if (Schema.Types.DocumentArray.defaultOptions._id != null) {\n          childSchemaOptions._id = Schema.Types.DocumentArray.defaultOptions._id;\n        }\n\n        const childSchema = new Schema(castFromTypeKey, childSchemaOptions);\n        childSchema.$implicitlyCreated = true;\n        return new MongooseTypes.DocumentArray(path, childSchema, obj);\n      } else {\n        // Special case: empty object becomes mixed\n        return new MongooseTypes.Array(path, MongooseTypes.Mixed, obj);\n      }\n    }\n\n    if (cast) {\n      type = cast[options.typeKey] && (options.typeKey !== 'type' || !cast.type.type)\n        ? cast[options.typeKey]\n        : cast;\n\n      if (Array.isArray(type)) {\n        return new MongooseTypes.Array(path, this.interpretAsType(path, type, options), obj);\n      }\n\n      name = typeof type === 'string'\n        ? type\n        : type.schemaName || utils.getFunctionName(type);\n\n      // For Jest 26+, see #10296\n      if (name === 'ClockDate') {\n        name = 'Date';\n      }\n\n      if (name === void 0) {\n        throw new TypeError('Invalid schema configuration: ' +\n          `Could not determine the embedded type for array \\`${path}\\`. ` +\n          'See https://mongoosejs.com/docs/guide.html#definition for more info on supported schema syntaxes.');\n      }\n      if (!MongooseTypes.hasOwnProperty(name)) {\n        throw new TypeError('Invalid schema configuration: ' +\n          `\\`${name}\\` is not a valid type within the array \\`${path}\\`.` +\n          'See https://bit.ly/mongoose-schematypes for a list of valid schema types.');\n      }\n    }\n\n    return new MongooseTypes.Array(path, cast || MongooseTypes.Mixed, obj, options);\n  }\n\n  if (type && type.instanceOfSchema) {\n    return new MongooseTypes.Subdocument(type, path, obj);\n  }\n\n  if (Buffer.isBuffer(type)) {\n    name = 'Buffer';\n  } else if (typeof type === 'function' || typeof type === 'object') {\n    name = type.schemaName || utils.getFunctionName(type);\n  } else if (type === Types.ObjectId) {\n    name = 'ObjectId';\n  } else if (type === Types.Decimal128) {\n    name = 'Decimal128';\n  } else {\n    name = type == null ? '' + type : type.toString();\n  }\n\n  if (name) {\n    name = name.charAt(0).toUpperCase() + name.substring(1);\n  }\n  // Special case re: gh-7049 because the bson `ObjectID` class' capitalization\n  // doesn't line up with Mongoose's.\n  if (name === 'ObjectID') {\n    name = 'ObjectId';\n  }\n  // For Jest 26+, see #10296\n  if (name === 'ClockDate') {\n    name = 'Date';\n  }\n\n  if (name === void 0) {\n    throw new TypeError(`Invalid schema configuration: \\`${path}\\` schematype definition is ` +\n      'invalid. See ' +\n      'https://mongoosejs.com/docs/guide.html#definition for more info on supported schema syntaxes.');\n  }\n  if (MongooseTypes[name] == null) {\n    throw new TypeError(`Invalid schema configuration: \\`${name}\\` is not ` +\n      `a valid type at path \\`${path}\\`. See ` +\n      'https://bit.ly/mongoose-schematypes for a list of valid schema types.');\n  }\n\n  const schemaType = new MongooseTypes[name](path, obj);\n\n  if (schemaType.$isSchemaMap) {\n    createMapNestedSchemaType(this, schemaType, path, obj, options);\n  }\n\n  return schemaType;\n};\n\n/*!\n * ignore\n */\n\nfunction createMapNestedSchemaType(schema, schemaType, path, obj, options) {\n  const mapPath = path + '.$*';\n  let _mapType = { type: {} };\n  if (utils.hasUserDefinedProperty(obj, 'of')) {\n    const isInlineSchema = utils.isPOJO(obj.of) &&\n      Object.keys(obj.of).length > 0 &&\n      !utils.hasUserDefinedProperty(obj.of, schema.options.typeKey);\n    if (isInlineSchema) {\n      _mapType = { [schema.options.typeKey]: new Schema(obj.of) };\n    } else if (utils.isPOJO(obj.of)) {\n      _mapType = Object.assign({}, obj.of);\n    } else {\n      _mapType = { [schema.options.typeKey]: obj.of };\n    }\n\n    if (_mapType[schema.options.typeKey] && _mapType[schema.options.typeKey].instanceOfSchema) {\n      const subdocumentSchema = _mapType[schema.options.typeKey];\n      subdocumentSchema.eachPath((subpath, type) => {\n        if (type.options.select === true || type.options.select === false) {\n          throw new MongooseError('Cannot use schema-level projections (`select: true` or `select: false`) within maps at path \"' + path + '.' + subpath + '\"');\n        }\n      });\n    }\n\n    if (utils.hasUserDefinedProperty(obj, 'ref')) {\n      _mapType.ref = obj.ref;\n    }\n  }\n  schemaType.$__schemaType = schema.interpretAsType(mapPath, _mapType, options);\n}\n\n/**\n * Iterates the schemas paths similar to Array#forEach.\n *\n * The callback is passed the pathname and the schemaType instance.\n *\n * #### Example:\n *\n *     const userSchema = new Schema({ name: String, registeredAt: Date });\n *     userSchema.eachPath((pathname, schematype) => {\n *       // Prints twice:\n *       // name SchemaString { ... }\n *       // registeredAt SchemaDate { ... }\n *       console.log(pathname, schematype);\n *     });\n *\n * @param {Function} fn callback function\n * @return {Schema} this\n * @api public\n */\n\nSchema.prototype.eachPath = function(fn) {\n  const keys = Object.keys(this.paths);\n  const len = keys.length;\n\n  for (let i = 0; i < len; ++i) {\n    fn(keys[i], this.paths[keys[i]]);\n  }\n\n  return this;\n};\n\n/**\n * Returns an Array of path strings that are required by this schema.\n *\n * #### Example:\n *\n *     const s = new Schema({\n *       name: { type: String, required: true },\n *       age: { type: String, required: true },\n *       notes: String\n *     });\n *     s.requiredPaths(); // [ 'age', 'name' ]\n *\n * @api public\n * @param {Boolean} invalidate Refresh the cache\n * @return {Array}\n */\n\nSchema.prototype.requiredPaths = function requiredPaths(invalidate) {\n  if (this._requiredpaths && !invalidate) {\n    return this._requiredpaths;\n  }\n\n  const paths = Object.keys(this.paths);\n  let i = paths.length;\n  const ret = [];\n\n  while (i--) {\n    const path = paths[i];\n    if (this.paths[path].isRequired) {\n      ret.push(path);\n    }\n  }\n  this._requiredpaths = ret;\n  return this._requiredpaths;\n};\n\n/**\n * Returns indexes from fields and schema-level indexes (cached).\n *\n * @api private\n * @return {Array}\n */\n\nSchema.prototype.indexedPaths = function indexedPaths() {\n  if (this._indexedpaths) {\n    return this._indexedpaths;\n  }\n  this._indexedpaths = this.indexes();\n  return this._indexedpaths;\n};\n\n/**\n * Returns the pathType of `path` for this schema.\n *\n * Given a path, returns whether it is a real, virtual, nested, or ad-hoc/undefined path.\n *\n * #### Example:\n *\n *     const s = new Schema({ name: String, nested: { foo: String } });\n *     s.virtual('foo').get(() => 42);\n *     s.pathType('name'); // \"real\"\n *     s.pathType('nested'); // \"nested\"\n *     s.pathType('foo'); // \"virtual\"\n *     s.pathType('fail'); // \"adhocOrUndefined\"\n *\n * @param {String} path\n * @return {String}\n * @api public\n */\n\nSchema.prototype.pathType = function(path) {\n  if (this.paths.hasOwnProperty(path)) {\n    return 'real';\n  }\n  if (this.virtuals.hasOwnProperty(path)) {\n    return 'virtual';\n  }\n  if (this.nested.hasOwnProperty(path)) {\n    return 'nested';\n  }\n\n  // Convert to '.$' to check subpaths re: gh-6405\n  const cleanPath = _pathToPositionalSyntax(path);\n\n  if (this.subpaths.hasOwnProperty(cleanPath) || this.subpaths.hasOwnProperty(path)) {\n    return 'real';\n  }\n\n  const singleNestedPath = this.singleNestedPaths.hasOwnProperty(cleanPath) || this.singleNestedPaths.hasOwnProperty(path);\n  if (singleNestedPath) {\n    return singleNestedPath === 'nested' ? 'nested' : 'real';\n  }\n\n  // Look for maps\n  const mapPath = getMapPath(this, path);\n  if (mapPath != null) {\n    return 'real';\n  }\n\n  if (/\\.\\d+\\.|\\.\\d+$/.test(path)) {\n    return getPositionalPathType(this, path, cleanPath);\n  }\n  return 'adhocOrUndefined';\n};\n\n/**\n * Returns true iff this path is a child of a mixed schema.\n *\n * @param {String} path\n * @return {Boolean}\n * @api private\n */\n\nSchema.prototype.hasMixedParent = function(path) {\n  const subpaths = path.split(/\\./g);\n  path = '';\n  for (let i = 0; i < subpaths.length; ++i) {\n    path = i > 0 ? path + '.' + subpaths[i] : subpaths[i];\n    if (this.paths.hasOwnProperty(path) &&\n        this.paths[path] instanceof MongooseTypes.Mixed) {\n      return this.paths[path];\n    }\n  }\n\n  return null;\n};\n\n/**\n * Setup updatedAt and createdAt timestamps to documents if enabled\n *\n * @param {Boolean|Object} timestamps timestamps options\n * @api private\n */\nSchema.prototype.setupTimestamp = function(timestamps) {\n  return setupTimestamps(this, timestamps);\n};\n\n/**\n * ignore. Deprecated re: #6405\n * @param {Any} self\n * @param {String} path\n * @api private\n */\n\nfunction getPositionalPathType(self, path, cleanPath) {\n  const subpaths = path.split(/\\.(\\d+)\\.|\\.(\\d+)$/).filter(Boolean);\n  if (subpaths.length < 2) {\n    return self.paths.hasOwnProperty(subpaths[0]) ?\n      self.paths[subpaths[0]] :\n      'adhocOrUndefined';\n  }\n\n  let val = self.path(subpaths[0]);\n  let isNested = false;\n  if (!val) {\n    return 'adhocOrUndefined';\n  }\n\n  const last = subpaths.length - 1;\n\n  for (let i = 1; i < subpaths.length; ++i) {\n    isNested = false;\n    const subpath = subpaths[i];\n\n    if (i === last && val && !/\\D/.test(subpath)) {\n      if (val.$isMongooseDocumentArray) {\n        val = val.$embeddedSchemaType;\n      } else if (val instanceof MongooseTypes.Array) {\n        // StringSchema, NumberSchema, etc\n        val = val.caster;\n      } else {\n        val = undefined;\n      }\n      break;\n    }\n\n    // ignore if its just a position segment: path.0.subpath\n    if (!/\\D/.test(subpath)) {\n      // Nested array\n      if (val instanceof MongooseTypes.Array && i !== last) {\n        val = val.caster;\n      }\n      continue;\n    }\n\n    if (!(val && val.schema)) {\n      val = undefined;\n      break;\n    }\n\n    const type = val.schema.pathType(subpath);\n    isNested = (type === 'nested');\n    val = val.schema.path(subpath);\n  }\n\n  self.subpaths[cleanPath] = val;\n  if (val) {\n    return 'real';\n  }\n  if (isNested) {\n    return 'nested';\n  }\n  return 'adhocOrUndefined';\n}\n\n\n/*!\n * ignore\n */\n\nfunction getPositionalPath(self, path, cleanPath) {\n  getPositionalPathType(self, path, cleanPath);\n  return self.subpaths[cleanPath];\n}\n\n/**\n * Adds a method call to the queue.\n *\n * #### Example:\n *\n *     schema.methods.print = function() { console.log(this); };\n *     schema.queue('print', []); // Print the doc every one is instantiated\n *\n *     const Model = mongoose.model('Test', schema);\n *     new Model({ name: 'test' }); // Prints '{\"_id\": ..., \"name\": \"test\" }'\n *\n * @param {String} name name of the document method to call later\n * @param {Array} args arguments to pass to the method\n * @api public\n */\n\nSchema.prototype.queue = function(name, args) {\n  this.callQueue.push([name, args]);\n  return this;\n};\n\n/**\n * Defines a pre hook for the model.\n *\n * #### Example:\n *\n *     const toySchema = new Schema({ name: String, created: Date });\n *\n *     toySchema.pre('save', function(next) {\n *       if (!this.created) this.created = new Date;\n *       next();\n *     });\n *\n *     toySchema.pre('validate', function(next) {\n *       if (this.name !== 'Woody') this.name = 'Woody';\n *       next();\n *     });\n *\n *     // Equivalent to calling `pre()` on `find`, `findOne`, `findOneAndUpdate`.\n *     toySchema.pre(/^find/, function(next) {\n *       console.log(this.getFilter());\n *     });\n *\n *     // Equivalent to calling `pre()` on `updateOne`, `findOneAndUpdate`.\n *     toySchema.pre(['updateOne', 'findOneAndUpdate'], function(next) {\n *       console.log(this.getFilter());\n *     });\n *\n *     toySchema.pre('deleteOne', function() {\n *       // Runs when you call `Toy.deleteOne()`\n *     });\n *\n *     toySchema.pre('deleteOne', { document: true }, function() {\n *       // Runs when you call `doc.deleteOne()`\n *     });\n *\n * @param {String|RegExp|String[]} methodName The method name or regular expression to match method name\n * @param {Object} [options]\n * @param {Boolean} [options.document] If `name` is a hook for both document and query middleware, set to `true` to run on document middleware. For example, set `options.document` to `true` to apply this hook to `Document#deleteOne()` rather than `Query#deleteOne()`.\n * @param {Boolean} [options.query] If `name` is a hook for both document and query middleware, set to `true` to run on query middleware.\n * @param {Function} callback\n * @api public\n */\n\nSchema.prototype.pre = function(name) {\n  if (name instanceof RegExp) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const fn of hookNames) {\n      if (name.test(fn)) {\n        this.pre.apply(this, [fn].concat(remainingArgs));\n      }\n    }\n    return this;\n  }\n  if (Array.isArray(name)) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const el of name) {\n      this.pre.apply(this, [el].concat(remainingArgs));\n    }\n    return this;\n  }\n  this.s.hooks.pre.apply(this.s.hooks, arguments);\n  return this;\n};\n\n/**\n * Defines a post hook for the document\n *\n *     const schema = new Schema(..);\n *     schema.post('save', function (doc) {\n *       console.log('this fired after a document was saved');\n *     });\n *\n *     schema.post('find', function(docs) {\n *       console.log('this fired after you ran a find query');\n *     });\n *\n *     schema.post(/Many$/, function(res) {\n *       console.log('this fired after you ran `updateMany()` or `deleteMany()`');\n *     });\n *\n *     const Model = mongoose.model('Model', schema);\n *\n *     const m = new Model(..);\n *     m.save(function(err) {\n *       console.log('this fires after the `post` hook');\n *     });\n *\n *     m.find(function(err, docs) {\n *       console.log('this fires after the post find hook');\n *     });\n *\n * @param {String|RegExp|String[]} methodName The method name or regular expression to match method name\n * @param {Object} [options]\n * @param {Boolean} [options.document] If `name` is a hook for both document and query middleware, set to `true` to run on document middleware.\n * @param {Boolean} [options.query] If `name` is a hook for both document and query middleware, set to `true` to run on query middleware.\n * @param {Function} fn callback\n * @see middleware https://mongoosejs.com/docs/middleware.html\n * @see kareem https://npmjs.org/package/kareem\n * @api public\n */\n\nSchema.prototype.post = function(name) {\n  if (name instanceof RegExp) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const fn of hookNames) {\n      if (name.test(fn)) {\n        this.post.apply(this, [fn].concat(remainingArgs));\n      }\n    }\n    return this;\n  }\n  if (Array.isArray(name)) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const el of name) {\n      this.post.apply(this, [el].concat(remainingArgs));\n    }\n    return this;\n  }\n  this.s.hooks.post.apply(this.s.hooks, arguments);\n  return this;\n};\n\n/**\n * Registers a plugin for this schema.\n *\n * #### Example:\n *\n *     const s = new Schema({ name: String });\n *     s.plugin(schema => console.log(schema.path('name').path));\n *     mongoose.model('Test', s); // Prints 'name'\n *\n * Or with Options:\n *\n *     const s = new Schema({ name: String });\n *     s.plugin((schema, opts) => console.log(opts.text, schema.path('name').path), { text: \"Schema Path Name:\" });\n *     mongoose.model('Test', s); // Prints 'Schema Path Name: name'\n *\n * @param {Function} plugin The Plugin's callback\n * @param {Object} [opts] Options to pass to the plugin\n * @param {Boolean} [opts.deduplicate=false] If true, ignore duplicate plugins (same `fn` argument using `===`)\n * @see plugins https://mongoosejs.com/docs/plugins.html\n * @api public\n */\n\nSchema.prototype.plugin = function(fn, opts) {\n  if (typeof fn !== 'function') {\n    throw new Error('First param to `schema.plugin()` must be a function, ' +\n      'got \"' + (typeof fn) + '\"');\n  }\n\n  if (opts && opts.deduplicate) {\n    for (const plugin of this.plugins) {\n      if (plugin.fn === fn) {\n        return this;\n      }\n    }\n  }\n  this.plugins.push({ fn: fn, opts: opts });\n\n  fn(this, opts);\n  return this;\n};\n\n/**\n * Adds an instance method to documents constructed from Models compiled from this schema.\n *\n * #### Example:\n *\n *     const schema = kittySchema = new Schema(..);\n *\n *     schema.method('meow', function () {\n *       console.log('meeeeeoooooooooooow');\n *     })\n *\n *     const Kitty = mongoose.model('Kitty', schema);\n *\n *     const fizz = new Kitty;\n *     fizz.meow(); // meeeeeooooooooooooow\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as methods.\n *\n *     schema.method({\n *         purr: function () {}\n *       , scratch: function () {}\n *     });\n *\n *     // later\n *     const fizz = new Kitty;\n *     fizz.purr();\n *     fizz.scratch();\n *\n * NOTE: `Schema.method()` adds instance methods to the `Schema.methods` object. You can also add instance methods directly to the `Schema.methods` object as seen in the [guide](https://mongoosejs.com/docs/guide.html#methods)\n *\n * @param {String|Object} name The Method Name for a single function, or a Object of \"string-function\" pairs.\n * @param {Function} [fn] The Function in a single-function definition.\n * @api public\n */\n\nSchema.prototype.method = function(name, fn, options) {\n  if (typeof name !== 'string') {\n    for (const i in name) {\n      this.methods[i] = name[i];\n      this.methodOptions[i] = clone(options);\n    }\n  } else {\n    this.methods[name] = fn;\n    this.methodOptions[name] = clone(options);\n  }\n  return this;\n};\n\n/**\n * Adds static \"class\" methods to Models compiled from this schema.\n *\n * #### Example:\n *\n *     const schema = new Schema(..);\n *     // Equivalent to `schema.statics.findByName = function(name) {}`;\n *     schema.static('findByName', function(name) {\n *       return this.find({ name: name });\n *     });\n *\n *     const Drink = mongoose.model('Drink', schema);\n *     await Drink.findByName('LaCroix');\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as methods.\n *\n *     schema.static({\n *         findByName: function () {..}\n *       , findByCost: function () {..}\n *     });\n *\n *     const Drink = mongoose.model('Drink', schema);\n *     await Drink.findByName('LaCroix');\n *     await Drink.findByCost(3);\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as statics.\n *\n * @param {String|Object} name The Method Name for a single function, or a Object of \"string-function\" pairs.\n * @param {Function} [fn] The Function in a single-function definition.\n * @api public\n * @see Statics https://mongoosejs.com/docs/guide.html#statics\n */\n\nSchema.prototype.static = function(name, fn) {\n  if (typeof name !== 'string') {\n    for (const i in name) {\n      this.statics[i] = name[i];\n    }\n  } else {\n    this.statics[name] = fn;\n  }\n  return this;\n};\n\n/**\n * Defines an index (most likely compound) for this schema.\n *\n * #### Example:\n *\n *     schema.index({ first: 1, last: -1 })\n *\n * @param {Object} fields The Fields to index, with the order, available values: `1 | -1 | '2d' | '2dsphere' | 'geoHaystack' | 'hashed' | 'text'`\n * @param {Object} [options] Options to pass to [MongoDB driver's `createIndex()` function](https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#createIndex)\n * @param {String | number} [options.expires=null] Mongoose-specific syntactic sugar, uses [ms](https://www.npmjs.com/package/ms) to convert `expires` option into seconds for the `expireAfterSeconds` in the above link.\n * @param {String} [options.language_override=null] Tells mongodb to use the specified field instead of `language` for parsing text indexes.\n * @api public\n */\n\nSchema.prototype.index = function(fields, options) {\n  fields || (fields = {});\n  options || (options = {});\n\n  if (options.expires) {\n    utils.expires(options);\n  }\n  for (const key in fields) {\n    if (this.aliases[key]) {\n      fields = utils.renameObjKey(fields, key, this.aliases[key]);\n    }\n  }\n  for (const field of Object.keys(fields)) {\n    if (fields[field] === 'ascending' || fields[field] === 'asc') {\n      fields[field] = 1;\n    } else if (fields[field] === 'descending' || fields[field] === 'desc') {\n      fields[field] = -1;\n    }\n  }\n\n  this._indexes.push([fields, options]);\n  return this;\n};\n\n/**\n * Sets a schema option.\n *\n * #### Example:\n *\n *     schema.set('strict'); // 'true' by default\n *     schema.set('strict', false); // Sets 'strict' to false\n *     schema.set('strict'); // 'false'\n *\n * @param {String} key The name of the option to set the value to\n * @param {Object} [value] The value to set the option to, if not passed, the option will be reset to default\n * @param {Array<string>} [tags] tags to add to read preference if key === 'read'\n * @see Schema https://mongoosejs.com/docs/api/schema.html#Schema()\n * @api public\n */\n\nSchema.prototype.set = function(key, value, tags) {\n  if (arguments.length === 1) {\n    return this.options[key];\n  }\n\n  switch (key) {\n    case 'read':\n      if (typeof value === 'string') {\n        this.options[key] = { mode: handleReadPreferenceAliases(value), tags };\n      } else if (Array.isArray(value) && typeof value[0] === 'string') {\n        this.options[key] = {\n          mode: handleReadPreferenceAliases(value[0]),\n          tags: value[1]\n        };\n      } else {\n        this.options[key] = value;\n      }\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n    case 'timestamps':\n      this.setupTimestamp(value);\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n    case '_id':\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n\n      if (value && !this.paths['_id']) {\n        addAutoId(this);\n      } else if (!value && this.paths['_id'] != null && this.paths['_id'].auto) {\n        this.remove('_id');\n      }\n      break;\n    default:\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n  }\n\n  // Propagate `strict` and `strictQuery` changes down to implicitly created schemas\n  if (key === 'strict') {\n    _propagateOptionsToImplicitlyCreatedSchemas(this, { strict: value });\n  }\n  if (key === 'strictQuery') {\n    _propagateOptionsToImplicitlyCreatedSchemas(this, { strictQuery: value });\n  }\n\n  return this;\n};\n\n/*!\n * Recursively set options on implicitly created schemas\n */\n\nfunction _propagateOptionsToImplicitlyCreatedSchemas(baseSchema, options) {\n  for (const { schema } of baseSchema.childSchemas) {\n    if (!schema.$implicitlyCreated) {\n      continue;\n    }\n    Object.assign(schema.options, options);\n    _propagateOptionsToImplicitlyCreatedSchemas(schema, options);\n  }\n}\n\n/**\n * Gets a schema option.\n *\n * #### Example:\n *\n *     schema.get('strict'); // true\n *     schema.set('strict', false);\n *     schema.get('strict'); // false\n *\n * @param {String} key The name of the Option to get the current value for\n * @api public\n * @return {Any} the option's value\n */\n\nSchema.prototype.get = function(key) {\n  return this.options[key];\n};\n\nconst indexTypes = '2d 2dsphere hashed text'.split(' ');\n\n/**\n * The allowed index types\n *\n * @property {String[]} indexTypes\n * @memberOf Schema\n * @static\n * @api public\n */\n\nObject.defineProperty(Schema, 'indexTypes', {\n  get: function() {\n    return indexTypes;\n  },\n  set: function() {\n    throw new Error('Cannot overwrite Schema.indexTypes');\n  }\n});\n\n/**\n * Returns a list of indexes that this schema declares, via `schema.index()` or by `index: true` in a path's options.\n * Indexes are expressed as an array `[spec, options]`.\n *\n * #### Example:\n *\n *     const userSchema = new Schema({\n *       email: { type: String, required: true, unique: true },\n *       registeredAt: { type: Date, index: true }\n *     });\n *\n *     // [ [ { email: 1 }, { unique: true, background: true } ],\n *     //   [ { registeredAt: 1 }, { background: true } ] ]\n *     userSchema.indexes();\n *\n * [Plugins](https://mongoosejs.com/docs/plugins.html) can use the return value of this function to modify a schema's indexes.\n * For example, the below plugin makes every index unique by default.\n *\n *     function myPlugin(schema) {\n *       for (const index of schema.indexes()) {\n *         if (index[1].unique === undefined) {\n *           index[1].unique = true;\n *         }\n *       }\n *     }\n *\n * @api public\n * @return {Array} list of indexes defined in the schema\n */\n\nSchema.prototype.indexes = function() {\n  return getIndexes(this);\n};\n\n/**\n * Creates a virtual type with the given name.\n *\n * @param {String} name The name of the Virtual\n * @param {Object} [options]\n * @param {String|Model} [options.ref] model name or model instance. Marks this as a [populate virtual](https://mongoosejs.com/docs/populate.html#populate-virtuals).\n * @param {String|Function} [options.localField] Required for populate virtuals. See [populate virtual docs](https://mongoosejs.com/docs/populate.html#populate-virtuals) for more information.\n * @param {String|Function} [options.foreignField] Required for populate virtuals. See [populate virtual docs](https://mongoosejs.com/docs/populate.html#populate-virtuals) for more information.\n * @param {Boolean|Function} [options.justOne=false] Only works with populate virtuals. If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), will be a single doc or `null`. Otherwise, the populate virtual will be an array.\n * @param {Boolean} [options.count=false] Only works with populate virtuals. If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), this populate virtual will contain the number of documents rather than the documents themselves when you `populate()`.\n * @param {Function|null} [options.get=null] Adds a [getter](https://mongoosejs.com/docs/tutorials/getters-setters.html) to this virtual to transform the populated doc.\n * @param {Object|Function} [options.match=null] Apply a default [`match` option to populate](https://mongoosejs.com/docs/populate.html#match), adding an additional filter to the populate query.\n * @return {VirtualType}\n */\n\nSchema.prototype.virtual = function(name, options) {\n  if (name instanceof VirtualType || getConstructorName(name) === 'VirtualType') {\n    return this.virtual(name.path, name.options);\n  }\n  options = new VirtualOptions(options);\n\n  if (utils.hasUserDefinedProperty(options, ['ref', 'refPath'])) {\n    if (options.localField == null) {\n      throw new Error('Reference virtuals require `localField` option');\n    }\n\n    if (options.foreignField == null) {\n      throw new Error('Reference virtuals require `foreignField` option');\n    }\n\n    this.pre('init', function virtualPreInit(obj) {\n      if (mpath.has(name, obj)) {\n        const _v = mpath.get(name, obj);\n        if (!this.$$populatedVirtuals) {\n          this.$$populatedVirtuals = {};\n        }\n\n        if (options.justOne || options.count) {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\n            _v[0] :\n            _v;\n        } else {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\n            _v :\n            _v == null ? [] : [_v];\n        }\n\n        mpath.unset(name, obj);\n      }\n    });\n\n    const virtual = this.virtual(name);\n    virtual.options = options;\n\n    virtual.\n      set(function(_v) {\n        if (!this.$$populatedVirtuals) {\n          this.$$populatedVirtuals = {};\n        }\n\n        if (options.justOne || options.count) {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\n            _v[0] :\n            _v;\n\n          if (typeof this.$$populatedVirtuals[name] !== 'object') {\n            this.$$populatedVirtuals[name] = options.count ? _v : null;\n          }\n        } else {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\n            _v :\n            _v == null ? [] : [_v];\n\n          this.$$populatedVirtuals[name] = this.$$populatedVirtuals[name].filter(function(doc) {\n            return doc && typeof doc === 'object';\n          });\n        }\n      });\n\n    if (typeof options.get === 'function') {\n      virtual.get(options.get);\n    }\n\n    // Workaround for gh-8198: if virtual is under document array, make a fake\n    // virtual. See gh-8210, gh-13189\n    const parts = name.split('.');\n    let cur = parts[0];\n    for (let i = 0; i < parts.length - 1; ++i) {\n      if (this.paths[cur] == null) {\n        continue;\n      }\n\n      if (this.paths[cur].$isMongooseDocumentArray || this.paths[cur].$isSingleNested) {\n        const remnant = parts.slice(i + 1).join('.');\n        this.paths[cur].schema.virtual(remnant, options);\n        break;\n      }\n\n      cur += '.' + parts[i + 1];\n    }\n\n    return virtual;\n  }\n\n  const virtuals = this.virtuals;\n  const parts = name.split('.');\n\n  if (this.pathType(name) === 'real') {\n    throw new Error('Virtual path \"' + name + '\"' +\n      ' conflicts with a real path in the schema');\n  }\n\n  virtuals[name] = parts.reduce(function(mem, part, i) {\n    mem[part] || (mem[part] = (i === parts.length - 1)\n      ? new VirtualType(options, name)\n      : {});\n    return mem[part];\n  }, this.tree);\n\n  return virtuals[name];\n};\n\n/**\n * Returns the virtual type with the given `name`.\n *\n * @param {String} name The name of the Virtual to get\n * @return {VirtualType|null}\n */\n\nSchema.prototype.virtualpath = function(name) {\n  return this.virtuals.hasOwnProperty(name) ? this.virtuals[name] : null;\n};\n\n/**\n * Removes the given `path` (or [`paths`]).\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: String, age: Number });\n *     schema.remove('name');\n *     schema.path('name'); // Undefined\n *     schema.path('age'); // SchemaNumber { ... }\n *\n * Or as a Array:\n *\n *     schema.remove(['name', 'age']);\n *     schema.path('name'); // Undefined\n *     schema.path('age'); // Undefined\n *\n * @param {String|Array} path The Path(s) to remove\n * @return {Schema} the Schema instance\n * @api public\n */\nSchema.prototype.remove = function(path) {\n  if (typeof path === 'string') {\n    path = [path];\n  }\n  if (Array.isArray(path)) {\n    path.forEach(function(name) {\n      if (this.path(name) == null && !this.nested[name]) {\n        return;\n      }\n      if (this.nested[name]) {\n        const allKeys = Object.keys(this.paths).\n          concat(Object.keys(this.nested));\n        for (const path of allKeys) {\n          if (path.startsWith(name + '.')) {\n            delete this.paths[path];\n            delete this.nested[path];\n            _deletePath(this, path);\n          }\n        }\n\n        delete this.nested[name];\n        _deletePath(this, name);\n        return;\n      }\n\n      delete this.paths[name];\n      _deletePath(this, name);\n    }, this);\n  }\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _deletePath(schema, name) {\n  const pieces = name.split('.');\n  const last = pieces.pop();\n\n  let branch = schema.tree;\n\n  for (const piece of pieces) {\n    branch = branch[piece];\n  }\n\n  delete branch[last];\n}\n\n/**\n * Removes the given virtual or virtuals from the schema.\n *\n * @param {String|Array} path The virutal path(s) to remove.\n * @returns {Schema} the Schema instance, or a mongoose error if the virtual does not exist.\n * @api public\n */\n\nSchema.prototype.removeVirtual = function(path) {\n  if (typeof path === 'string') {\n    path = [path];\n  }\n  if (Array.isArray(path)) {\n    for (const virtual of path) {\n      if (this.virtuals[virtual] == null) {\n        throw new MongooseError(`Attempting to remove virtual \"${virtual}\" that does not exist.`);\n      }\n    }\n\n    for (const virtual of path) {\n      delete this.paths[virtual];\n      delete this.virtuals[virtual];\n      if (virtual.indexOf('.') !== -1) {\n        mpath.unset(virtual, this.tree);\n      } else {\n        delete this.tree[virtual];\n      }\n    }\n  }\n  return this;\n};\n\n/**\n * Loads an ES6 class into a schema. Maps [setters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set) + [getters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get), [static methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static),\n * and [instance methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Class_body_and_method_definitions)\n * to schema [virtuals](https://mongoosejs.com/docs/guide.html#virtuals),\n * [statics](https://mongoosejs.com/docs/guide.html#statics), and\n * [methods](https://mongoosejs.com/docs/guide.html#methods).\n *\n * #### Example:\n *\n * ```javascript\n * const md5 = require('md5');\n * const userSchema = new Schema({ email: String });\n * class UserClass {\n *   // `gravatarImage` becomes a virtual\n *   get gravatarImage() {\n *     const hash = md5(this.email.toLowerCase());\n *     return `https://www.gravatar.com/avatar/${hash}`;\n *   }\n *\n *   // `getProfileUrl()` becomes a document method\n *   getProfileUrl() {\n *     return `https://mysite.com/${this.email}`;\n *   }\n *\n *   // `findByEmail()` becomes a static\n *   static findByEmail(email) {\n *     return this.findOne({ email });\n *   }\n * }\n *\n * // `schema` will now have a `gravatarImage` virtual, a `getProfileUrl()` method,\n * // and a `findByEmail()` static\n * userSchema.loadClass(UserClass);\n * ```\n *\n * @param {Function} model The Class to load\n * @param {Boolean} [virtualsOnly] if truthy, only pulls virtuals from the class, not methods or statics\n */\nSchema.prototype.loadClass = function(model, virtualsOnly) {\n  // Stop copying when hit certain base classes\n  if (model === Object.prototype ||\n      model === Function.prototype ||\n      model.prototype.hasOwnProperty('$isMongooseModelPrototype') ||\n      model.prototype.hasOwnProperty('$isMongooseDocumentPrototype')) {\n    return this;\n  }\n\n  this.loadClass(Object.getPrototypeOf(model), virtualsOnly);\n\n  // Add static methods\n  if (!virtualsOnly) {\n    Object.getOwnPropertyNames(model).forEach(function(name) {\n      if (name.match(/^(length|name|prototype|constructor|__proto__)$/)) {\n        return;\n      }\n      const prop = Object.getOwnPropertyDescriptor(model, name);\n      if (prop.hasOwnProperty('value')) {\n        this.static(name, prop.value);\n      }\n    }, this);\n  }\n\n  // Add methods and virtuals\n  Object.getOwnPropertyNames(model.prototype).forEach(function(name) {\n    if (name.match(/^(constructor)$/)) {\n      return;\n    }\n    const method = Object.getOwnPropertyDescriptor(model.prototype, name);\n    if (!virtualsOnly) {\n      if (typeof method.value === 'function') {\n        this.method(name, method.value);\n      }\n    }\n    if (typeof method.get === 'function') {\n      if (this.virtuals[name]) {\n        this.virtuals[name].getters = [];\n      }\n      this.virtual(name).get(method.get);\n    }\n    if (typeof method.set === 'function') {\n      if (this.virtuals[name]) {\n        this.virtuals[name].setters = [];\n      }\n      this.virtual(name).set(method.set);\n    }\n  }, this);\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._getSchema = function(path) {\n  const _this = this;\n  const pathschema = _this.path(path);\n  const resultPath = [];\n\n  if (pathschema) {\n    pathschema.$fullPath = path;\n    return pathschema;\n  }\n\n  function search(parts, schema) {\n    let p = parts.length + 1;\n    let foundschema;\n    let trypath;\n\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n      if (foundschema) {\n        resultPath.push(trypath);\n\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\n            foundschema.caster.$fullPath = resultPath.join('.');\n            return foundschema.caster;\n          }\n\n          // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n          if (p !== parts.length) {\n            if (foundschema.schema) {\n              let ret;\n              if (parts[p] === '$' || isArrayFilter(parts[p])) {\n                if (p + 1 === parts.length) {\n                  // comments.$\n                  return foundschema.$embeddedSchemaType;\n                }\n                // comments.$.comments.$.title\n                ret = search(parts.slice(p + 1), foundschema.schema);\n                if (ret) {\n                  ret.$parentSchemaDocArray = ret.$parentSchemaDocArray ||\n                    (foundschema.schema.$isSingleNested ? null : foundschema);\n                }\n                return ret;\n              }\n              // this is the last path of the selector\n              ret = search(parts.slice(p), foundschema.schema);\n              if (ret) {\n                ret.$parentSchemaDocArray = ret.$parentSchemaDocArray ||\n                  (foundschema.schema.$isSingleNested ? null : foundschema);\n              }\n              return ret;\n            }\n          }\n        } else if (foundschema.$isSchemaMap) {\n          if (p >= parts.length) {\n            return foundschema;\n          }\n          // Any path in the map will be an instance of the map's embedded schematype\n          if (p + 1 >= parts.length) {\n            return foundschema.$__schemaType;\n          }\n\n          if (foundschema.$__schemaType instanceof MongooseTypes.Mixed) {\n            return foundschema.$__schemaType;\n          }\n          if (foundschema.$__schemaType.schema != null) {\n            // Map of docs\n            const ret = search(parts.slice(p + 1), foundschema.$__schemaType.schema);\n            return ret;\n          }\n        }\n\n        foundschema.$fullPath = resultPath.join('.');\n\n        return foundschema;\n      }\n    }\n  }\n\n  // look for arrays\n  const parts = path.split('.');\n  for (let i = 0; i < parts.length; ++i) {\n    if (parts[i] === '$' || isArrayFilter(parts[i])) {\n      // Re: gh-5628, because `schema.path()` doesn't take $ into account.\n      parts[i] = '0';\n    }\n    if (numberRE.test(parts[i])) {\n      parts[i] = '$';\n    }\n  }\n  return search(parts, _this);\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._getPathType = function(path) {\n  const _this = this;\n  const pathschema = _this.path(path);\n\n  if (pathschema) {\n    return 'real';\n  }\n\n  function search(parts, schema) {\n    let p = parts.length + 1,\n        foundschema,\n        trypath;\n\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n      if (foundschema) {\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\n            return { schema: foundschema, pathType: 'mixed' };\n          }\n\n          // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n          if (p !== parts.length && foundschema.schema) {\n            if (parts[p] === '$' || isArrayFilter(parts[p])) {\n              if (p === parts.length - 1) {\n                return { schema: foundschema, pathType: 'nested' };\n              }\n              // comments.$.comments.$.title\n              return search(parts.slice(p + 1), foundschema.schema);\n            }\n            // this is the last path of the selector\n            return search(parts.slice(p), foundschema.schema);\n          }\n          return {\n            schema: foundschema,\n            pathType: foundschema.$isSingleNested ? 'nested' : 'array'\n          };\n        }\n        return { schema: foundschema, pathType: 'real' };\n      } else if (p === parts.length && schema.nested[trypath]) {\n        return { schema: schema, pathType: 'nested' };\n      }\n    }\n    return { schema: foundschema || schema, pathType: 'undefined' };\n  }\n\n  // look for arrays\n  return search(path.split('.'), _this);\n};\n\n/*!\n * ignore\n */\n\nfunction isArrayFilter(piece) {\n  return piece.startsWith('$[') && piece.endsWith(']');\n}\n\n/**\n * Called by `compile()` _right before_ compiling. Good for making any changes to\n * the schema that should respect options set by plugins, like `id`\n * @method _preCompile\n * @memberOf Schema\n * @instance\n * @api private\n */\n\nSchema.prototype._preCompile = function _preCompile() {\n  idGetter(this);\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = Schema;\n\n// require down here because of reference issues\n\n/**\n * The various built-in Mongoose Schema Types.\n *\n * #### Example:\n *\n *     const mongoose = require('mongoose');\n *     const ObjectId = mongoose.Schema.Types.ObjectId;\n *\n * #### Types:\n *\n * - [String](https://mongoosejs.com/docs/schematypes.html#strings)\n * - [Number](https://mongoosejs.com/docs/schematypes.html#numbers)\n * - [Boolean](https://mongoosejs.com/docs/schematypes.html#booleans) | Bool\n * - [Array](https://mongoosejs.com/docs/schematypes.html#arrays)\n * - [Buffer](https://mongoosejs.com/docs/schematypes.html#buffers)\n * - [Date](https://mongoosejs.com/docs/schematypes.html#dates)\n * - [ObjectId](https://mongoosejs.com/docs/schematypes.html#objectids) | Oid\n * - [Mixed](https://mongoosejs.com/docs/schematypes.html#mixed)\n * - [UUID](https://mongoosejs.com/docs/schematypes.html#uuid)\n * - [BigInt](https://mongoosejs.com/docs/schematypes.html#bigint)\n *\n * Using this exposed access to the `Mixed` SchemaType, we can use them in our schema.\n *\n *     const Mixed = mongoose.Schema.Types.Mixed;\n *     new mongoose.Schema({ _user: Mixed })\n *\n * @api public\n */\n\nSchema.Types = MongooseTypes = require('./schema/index');\n\n/*!\n * ignore\n */\n\nexports.ObjectId = MongooseTypes.ObjectId;\n"],"mappings":"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EAAE;AACZ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA9B,MAAM,CAAC2B,cAAc,CAACtD,MAAM,CAACkD,SAAS,EAAE,cAAc,EAAE;EACtDK,YAAY,EAAE,KAAK;EACnBC,UAAU,EAAE,IAAI;EAChBC,QAAQ,EAAE;AACZ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA9B,MAAM,CAAC2B,cAAc,CAACtD,MAAM,CAACkD,SAAS,EAAE,UAAU,EAAE;EAClDK,YAAY,EAAE,KAAK;EACnBC,UAAU,EAAE,IAAI;EAChBC,QAAQ,EAAE;AACZ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAzD,MAAM,CAACkD,SAAS,CAACjD,GAAG;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAD,MAAM,CAACkD,SAAS,CAAC/C,KAAK;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAH,MAAM,CAACkD,SAAS,CAACnC,IAAI;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAf,MAAM,CAACkD,SAAS,CAAC5E,KAAK,GAAG,YAAW;EAClC,MAAMmB,CAAC,GAAG,IAAI,CAACiE,MAAM,CAAC,CAAC;;EAEvB;EACAjE,CAAC,CAACkE,EAAE,CAAC,MAAM,EAAEX,CAAC,IAAI,IAAI,CAACY,IAAI,CAAC,MAAM,EAAEZ,CAAC,CAAC,CAAC;EAEvC,OAAOvD,CAAC;AACV,CAAC;;AAED;AACA;AACA;;AAEAO,MAAM,CAACkD,SAAS,CAACQ,MAAM,GAAG,SAASA,MAAMA,CAACG,WAAW,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"},"metadata":{},"sourceType":"script","externalDependencies":[]}