{"ast":null,"code":"'use strict';\n\n/*!\n * Module dependencies.\n */\nconst Aggregate = require('./aggregate');\nconst ChangeStream = require('./cursor/changeStream');\nconst Document = require('./document');\nconst DocumentNotFoundError = require('./error/notFound');\nconst DivergentArrayError = require('./error/divergentArray');\nconst EventEmitter = require('events').EventEmitter;\nconst Kareem = require('kareem');\nconst MongooseBuffer = require('./types/buffer');\nconst MongooseError = require('./error/index');\nconst OverwriteModelError = require('./error/overwriteModel');\nconst Query = require('./query');\nconst SaveOptions = require('./options/saveOptions');\nconst Schema = require('./schema');\nconst ValidationError = require('./error/validation');\nconst VersionError = require('./error/version');\nconst ParallelSaveError = require('./error/parallelSave');\nconst applyDefaultsHelper = require('./helpers/document/applyDefaults');\nconst applyDefaultsToPOJO = require('./helpers/model/applyDefaultsToPOJO');\nconst applyQueryMiddleware = require('./helpers/query/applyQueryMiddleware');\nconst applyHooks = require('./helpers/model/applyHooks');\nconst applyMethods = require('./helpers/model/applyMethods');\nconst applyProjection = require('./helpers/projection/applyProjection');\nconst applySchemaCollation = require('./helpers/indexes/applySchemaCollation');\nconst applyStaticHooks = require('./helpers/model/applyStaticHooks');\nconst applyStatics = require('./helpers/model/applyStatics');\nconst applyWriteConcern = require('./helpers/schema/applyWriteConcern');\nconst assignVals = require('./helpers/populate/assignVals');\nconst castBulkWrite = require('./helpers/model/castBulkWrite');\nconst clone = require('./helpers/clone');\nconst createPopulateQueryFilter = require('./helpers/populate/createPopulateQueryFilter');\nconst decorateUpdateWithVersionKey = require('./helpers/update/decorateUpdateWithVersionKey');\nconst getDefaultBulkwriteResult = require('./helpers/getDefaultBulkwriteResult');\nconst getSchemaDiscriminatorByValue = require('./helpers/discriminator/getSchemaDiscriminatorByValue');\nconst discriminator = require('./helpers/model/discriminator');\nconst firstKey = require('./helpers/firstKey');\nconst each = require('./helpers/each');\nconst get = require('./helpers/get');\nconst getConstructorName = require('./helpers/getConstructorName');\nconst getDiscriminatorByValue = require('./helpers/discriminator/getDiscriminatorByValue');\nconst getModelsMapForPopulate = require('./helpers/populate/getModelsMapForPopulate');\nconst immediate = require('./helpers/immediate');\nconst internalToObjectOptions = require('./options').internalToObjectOptions;\nconst isDefaultIdIndex = require('./helpers/indexes/isDefaultIdIndex');\nconst isIndexEqual = require('./helpers/indexes/isIndexEqual');\nconst {\n  getRelatedDBIndexes,\n  getRelatedSchemaIndexes\n} = require('./helpers/indexes/getRelatedIndexes');\nconst isPathExcluded = require('./helpers/projection/isPathExcluded');\nconst decorateDiscriminatorIndexOptions = require('./helpers/indexes/decorateDiscriminatorIndexOptions');\nconst isPathSelectedInclusive = require('./helpers/projection/isPathSelectedInclusive');\nconst leanPopulateMap = require('./helpers/populate/leanPopulateMap');\nconst parallelLimit = require('./helpers/parallelLimit');\nconst parentPaths = require('./helpers/path/parentPaths');\nconst prepareDiscriminatorPipeline = require('./helpers/aggregate/prepareDiscriminatorPipeline');\nconst pushNestedArrayPaths = require('./helpers/model/pushNestedArrayPaths');\nconst removeDeselectedForeignField = require('./helpers/populate/removeDeselectedForeignField');\nconst setDottedPath = require('./helpers/path/setDottedPath');\nconst STATES = require('./connectionState');\nconst util = require('util');\nconst utils = require('./utils');\nconst MongooseBulkWriteError = require('./error/bulkWriteError');\nconst minimize = require('./helpers/minimize');\nconst VERSION_WHERE = 1;\nconst VERSION_INC = 2;\nconst VERSION_ALL = VERSION_WHERE | VERSION_INC;\nconst arrayAtomicsSymbol = require('./helpers/symbols').arrayAtomicsSymbol;\nconst modelCollectionSymbol = Symbol('mongoose#Model#collection');\nconst modelDbSymbol = Symbol('mongoose#Model#db');\nconst modelSymbol = require('./helpers/symbols').modelSymbol;\nconst subclassedSymbol = Symbol('mongoose#Model#subclassed');\nconst saveToObjectOptions = Object.assign({}, internalToObjectOptions, {\n  bson: true,\n  flattenObjectIds: false\n});\n\n/**\n * A Model is a class that's your primary tool for interacting with MongoDB.\n * An instance of a Model is called a [Document](https://mongoosejs.com/docs/api/document.html#Document).\n *\n * In Mongoose, the term \"Model\" refers to subclasses of the `mongoose.Model`\n * class. You should not use the `mongoose.Model` class directly. The\n * [`mongoose.model()`](https://mongoosejs.com/docs/api/mongoose.html#Mongoose.prototype.model()) and\n * [`connection.model()`](https://mongoosejs.com/docs/api/connection.html#Connection.prototype.model()) functions\n * create subclasses of `mongoose.Model` as shown below.\n *\n * #### Example:\n *\n *     // `UserModel` is a \"Model\", a subclass of `mongoose.Model`.\n *     const UserModel = mongoose.model('User', new Schema({ name: String }));\n *\n *     // You can use a Model to create new documents using `new`:\n *     const userDoc = new UserModel({ name: 'Foo' });\n *     await userDoc.save();\n *\n *     // You also use a model to create queries:\n *     const userFromDb = await UserModel.findOne({ name: 'Foo' });\n *\n * @param {Object} doc values for initial set\n * @param {Object} [fields] optional object containing the fields that were selected in the query which returned this document. You do **not** need to set this parameter to ensure Mongoose handles your [query projection](https://mongoosejs.com/docs/api/query.html#Query.prototype.select()).\n * @param {Boolean} [skipId=false] optional boolean. If true, mongoose doesn't add an `_id` field to the document.\n * @inherits Document https://mongoosejs.com/docs/api/document.html\n * @event `error`: If listening to this event, 'error' is emitted when a document was saved and an `error` occurred. If not listening, the event bubbles to the connection used to create this Model.\n * @event `index`: Emitted after `Model#ensureIndexes` completes. If an error occurred it is passed with the event.\n * @event `index-single-start`: Emitted when an individual index starts within `Model#ensureIndexes`. The fields and options being used to build the index are also passed with the event.\n * @event `index-single-done`: Emitted when an individual index finishes within `Model#ensureIndexes`. If an error occurred it is passed with the event. The fields, options, and index name are also passed.\n * @api public\n */\n\nfunction Model(doc, fields, skipId) {\n  if (fields instanceof Schema) {\n    throw new TypeError('2nd argument to `Model` must be a POJO or string, ' + '**not** a schema. Make sure you\\'re calling `mongoose.model()`, not ' + '`mongoose.Model()`.');\n  }\n  Document.call(this, doc, fields, skipId);\n}\n\n/**\n * Inherits from Document.\n *\n * All Model.prototype features are available on\n * top level (non-sub) documents.\n * @api private\n */\n\nObject.setPrototypeOf(Model.prototype, Document.prototype);\nModel.prototype.$isMongooseModelPrototype = true;\n\n/**\n * Connection the model uses.\n *\n * @api public\n * @property db\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.db;\n\n/**\n * The collection instance this model uses.\n * A Mongoose collection is a thin wrapper around a [MongoDB Node.js driver collection]([MongoDB Node.js driver collection](https://mongodb.github.io/node-mongodb-native/Next/classes/Collection.html)).\n * Using `Model.collection` means you bypass Mongoose middleware, validation, and casting.\n *\n * This property is read-only. Modifying this property is a no-op.\n *\n * @api public\n * @property collection\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.collection;\n\n/**\n * Internal collection the model uses.\n *\n * This property is read-only. Modifying this property is a no-op.\n *\n * @api private\n * @property collection\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.$__collection;\n\n/**\n * The name of the model\n *\n * @api public\n * @property modelName\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.modelName;\n\n/**\n * Additional properties to attach to the query when calling `save()` and\n * `isNew` is false.\n *\n * @api public\n * @property $where\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.$where;\n\n/**\n * If this is a discriminator model, `baseModelName` is the name of\n * the base model.\n *\n * @api public\n * @property baseModelName\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.baseModelName;\n\n/**\n * Event emitter that reports any errors that occurred. Useful for global error\n * handling.\n *\n * #### Example:\n *\n *     MyModel.events.on('error', err => console.log(err.message));\n *\n *     // Prints a 'CastError' because of the above handler\n *     await MyModel.findOne({ _id: 'Not a valid ObjectId' }).catch(noop);\n *\n * @api public\n * @property events\n * @fires error whenever any query or model function errors\n * @memberOf Model\n * @static\n */\n\nModel.events;\n\n/**\n * Compiled middleware for this model. Set in `applyHooks()`.\n *\n * @api private\n * @property _middleware\n * @memberOf Model\n * @static\n */\n\nModel._middleware;\n\n/*!\n * ignore\n */\n\nfunction _applyCustomWhere(doc, where) {\n  if (doc.$where == null) {\n    return;\n  }\n  for (const key of Object.keys(doc.$where)) {\n    where[key] = doc.$where[key];\n  }\n}\n\n/*!\n * ignore\n */\n\nModel.prototype.$__handleSave = function (options, callback) {\n  const saveOptions = {};\n  applyWriteConcern(this.$__schema, options);\n  if (typeof options.writeConcern !== 'undefined') {\n    saveOptions.writeConcern = {};\n    if ('w' in options.writeConcern) {\n      saveOptions.writeConcern.w = options.writeConcern.w;\n    }\n    if ('j' in options.writeConcern) {\n      saveOptions.writeConcern.j = options.writeConcern.j;\n    }\n    if ('wtimeout' in options.writeConcern) {\n      saveOptions.writeConcern.wtimeout = options.writeConcern.wtimeout;\n    }\n  } else {\n    if ('w' in options) {\n      saveOptions.w = options.w;\n    }\n    if ('j' in options) {\n      saveOptions.j = options.j;\n    }\n    if ('wtimeout' in options) {\n      saveOptions.wtimeout = options.wtimeout;\n    }\n  }\n  if ('checkKeys' in options) {\n    saveOptions.checkKeys = options.checkKeys;\n  }\n  const session = this.$session();\n  if (!saveOptions.hasOwnProperty('session') && session != null) {\n    saveOptions.session = session;\n  }\n  if (this.$isNew) {\n    // send entire doc\n    const obj = this.toObject(saveToObjectOptions);\n    if ((obj || {})._id === void 0) {\n      // documents must have an _id else mongoose won't know\n      // what to update later if more changes are made. the user\n      // wouldn't know what _id was generated by mongodb either\n      // nor would the ObjectId generated by mongodb necessarily\n      // match the schema definition.\n      immediate(function () {\n        callback(new MongooseError('document must have an _id before saving'));\n      });\n      return;\n    }\n    this.$__version(true, obj);\n    this[modelCollectionSymbol].insertOne(obj, saveOptions).then(ret => callback(null, ret), err => {\n      _setIsNew(this, true);\n      callback(err, null);\n    });\n    this.$__reset();\n    _setIsNew(this, false);\n    // Make it possible to retry the insert\n    this.$__.inserting = true;\n    return;\n  }\n\n  // Make sure we don't treat it as a new object on error,\n  // since it already exists\n  this.$__.inserting = false;\n  const delta = this.$__delta();\n  if (delta) {\n    if (delta instanceof MongooseError) {\n      callback(delta);\n      return;\n    }\n    const where = this.$__where(delta[0]);\n    if (where instanceof MongooseError) {\n      callback(where);\n      return;\n    }\n    _applyCustomWhere(this, where);\n    const update = delta[1];\n    if (this.$__schema.options.minimize) {\n      minimize(update);\n      // minimize might leave us with an empty object, which would\n      // lead to MongoDB throwing a \"Update document requires atomic operators\" error\n      if (Object.keys(update).length === 0) {\n        handleEmptyUpdate.call(this);\n        return;\n      }\n    }\n    this[modelCollectionSymbol].updateOne(where, update, saveOptions).then(ret => {\n      ret.$where = where;\n      callback(null, ret);\n    }, err => {\n      this.$__undoReset();\n      callback(err);\n    });\n  } else {\n    handleEmptyUpdate.call(this);\n    return;\n  }\n\n  // store the modified paths before the document is reset\n  this.$__.modifiedPaths = this.modifiedPaths();\n  this.$__reset();\n  _setIsNew(this, false);\n  function handleEmptyUpdate() {\n    const optionsWithCustomValues = Object.assign({}, options, saveOptions);\n    const where = this.$__where();\n    const optimisticConcurrency = this.$__schema.options.optimisticConcurrency;\n    if (optimisticConcurrency && !Array.isArray(optimisticConcurrency)) {\n      const key = this.$__schema.options.versionKey;\n      const val = this.$__getValue(key);\n      if (val != null) {\n        where[key] = val;\n      }\n    }\n    this.constructor.collection.findOne(where, optionsWithCustomValues).then(documentExists => {\n      const matchedCount = !documentExists ? 0 : 1;\n      callback(null, {\n        $where: where,\n        matchedCount\n      });\n    }).catch(callback);\n  }\n};\n\n/*!\n * ignore\n */\n\nModel.prototype.$__save = function (options, callback) {\n  this.$__handleSave(options, (error, result) => {\n    if (error) {\n      const hooks = this.$__schema.s.hooks;\n      return hooks.execPost('save:error', this, [this], {\n        error: error\n      }, error => {\n        callback(error, this);\n      });\n    }\n    let numAffected = 0;\n    const writeConcern = options != null ? options.writeConcern != null ? options.writeConcern.w : options.w : 0;\n    if (writeConcern !== 0) {\n      // Skip checking if write succeeded if writeConcern is set to\n      // unacknowledged writes, because otherwise `numAffected` will always be 0\n      if (result != null) {\n        if (Array.isArray(result)) {\n          numAffected = result.length;\n        } else if (result.matchedCount != null) {\n          numAffected = result.matchedCount;\n        } else {\n          numAffected = result;\n        }\n      }\n      const versionBump = this.$__.version;\n      // was this an update that required a version bump?\n      if (versionBump && !this.$__.inserting) {\n        const doIncrement = VERSION_INC === (VERSION_INC & this.$__.version);\n        this.$__.version = undefined;\n        const key = this.$__schema.options.versionKey;\n        const version = this.$__getValue(key) || 0;\n        if (numAffected <= 0) {\n          // the update failed. pass an error back\n          this.$__undoReset();\n          const err = this.$__.$versionError || new VersionError(this, version, this.$__.modifiedPaths);\n          return callback(err);\n        }\n\n        // increment version if was successful\n        if (doIncrement) {\n          this.$__setValue(key, version + 1);\n        }\n      }\n      if (result != null && numAffected <= 0) {\n        this.$__undoReset();\n        error = new DocumentNotFoundError(result.$where, this.constructor.modelName, numAffected, result);\n        const hooks = this.$__schema.s.hooks;\n        return hooks.execPost('save:error', this, [this], {\n          error: error\n        }, error => {\n          callback(error, this);\n        });\n      }\n    }\n    this.$__.saving = undefined;\n    this.$__.savedState = {};\n    this.$emit('save', this, numAffected);\n    this.constructor.emit('save', this, numAffected);\n    callback(null, this);\n  });\n};\n\n/*!\n * ignore\n */\n\nfunction generateVersionError(doc, modifiedPaths) {\n  const key = doc.$__schema.options.versionKey;\n  if (!key) {\n    return null;\n  }\n  const version = doc.$__getValue(key) || 0;\n  return new VersionError(doc, version, modifiedPaths);\n}\n\n/**\n * Saves this document by inserting a new document into the database if [document.isNew](https://mongoosejs.com/docs/api/document.html#Document.prototype.isNew) is `true`,\n * or sends an [updateOne](https://mongoosejs.com/docs/api/document.html#Document.prototype.updateOne()) operation with just the modified paths if `isNew` is `false`.\n *\n * #### Example:\n *\n *     product.sold = Date.now();\n *     product = await product.save();\n *\n * If save is successful, the returned promise will fulfill with the document\n * saved.\n *\n * #### Example:\n *\n *     const newProduct = await product.save();\n *     newProduct === product; // true\n *\n * @param {Object} [options] options optional options\n * @param {Session} [options.session=null] the [session](https://www.mongodb.com/docs/manual/reference/server-sessions/) associated with this save operation. If not specified, defaults to the [document's associated session](https://mongoosejs.com/docs/api/document.html#Document.prototype.session()).\n * @param {Object} [options.safe] (DEPRECATED) overrides [schema's safe option](https://mongoosejs.com/docs/guide.html#safe). Use the `w` option instead.\n * @param {Boolean} [options.validateBeforeSave] set to false to save without validating.\n * @param {Boolean} [options.validateModifiedOnly=false] if `true`, Mongoose will only validate modified paths, as opposed to modified paths and `required` paths.\n * @param {Number|String} [options.w] set the [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/#w-option). Overrides the [schema-level `writeConcern` option](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Boolean} [options.j] set to true for MongoDB to wait until this `save()` has been [journaled before resolving the returned promise](https://www.mongodb.com/docs/manual/reference/write-concern/#j-option). Overrides the [schema-level `writeConcern` option](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Number} [options.wtimeout] sets a [timeout for the write concern](https://www.mongodb.com/docs/manual/reference/write-concern/#wtimeout). Overrides the [schema-level `writeConcern` option](https://mongoosejs.com/docs/guide.html#writeConcern).\n * @param {Boolean} [options.checkKeys=true] the MongoDB driver prevents you from saving keys that start with '$' or contain '.' by default. Set this option to `false` to skip that check. See [restrictions on field names](https://docs.mongodb.com/manual/reference/limits/#mongodb-limit-Restrictions-on-Field-Names)\n * @param {Boolean} [options.timestamps=true] if `false` and [timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this `save()`.\n * @throws {DocumentNotFoundError} if this [save updates an existing document](https://mongoosejs.com/docs/api/document.html#Document.prototype.isNew) but the document doesn't exist in the database. For example, you will get this error if the document is [deleted between when you retrieved the document and when you saved it](documents.html#updating).\n * @return {Promise}\n * @api public\n * @see middleware https://mongoosejs.com/docs/middleware.html\n */\n\nModel.prototype.save = async function save(options) {\n  if (typeof options === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.prototype.save() no longer accepts a callback');\n  }\n  let parallelSave;\n  this.$op = 'save';\n  if (this.$__.saving) {\n    parallelSave = new ParallelSaveError(this);\n  } else {\n    this.$__.saving = new ParallelSaveError(this);\n  }\n  options = new SaveOptions(options);\n  if (options.hasOwnProperty('session')) {\n    this.$session(options.session);\n  }\n  if (this.$__.timestamps != null) {\n    options.timestamps = this.$__.timestamps;\n  }\n  this.$__.$versionError = generateVersionError(this, this.modifiedPaths());\n  if (parallelSave) {\n    this.$__handleReject(parallelSave);\n    throw parallelSave;\n  }\n  this.$__.saveOptions = options;\n  await new Promise((resolve, reject) => {\n    this.$__save(options, error => {\n      this.$__.saving = null;\n      this.$__.saveOptions = null;\n      this.$__.$versionError = null;\n      this.$op = null;\n      if (error != null) {\n        this.$__handleReject(error);\n        return reject(error);\n      }\n      resolve();\n    });\n  });\n  return this;\n};\nModel.prototype.$save = Model.prototype.save;\n\n/**\n * Determines whether versioning should be skipped for the given path\n *\n * @param {Document} self\n * @param {String} path\n * @return {Boolean} true if versioning should be skipped for the given path\n * @api private\n */\nfunction shouldSkipVersioning(self, path) {\n  const skipVersioning = self.$__schema.options.skipVersioning;\n  if (!skipVersioning) return false;\n\n  // Remove any array indexes from the path\n  path = path.replace(/\\.\\d+\\./, '.');\n  return skipVersioning[path];\n}\n\n/**\n * Apply the operation to the delta (update) clause as\n * well as track versioning for our where clause.\n *\n * @param {Document} self\n * @param {Object} where Unused\n * @param {Object} delta\n * @param {Object} data\n * @param {Mixed} val\n * @param {String} [op]\n * @api private\n */\n\nfunction operand(self, where, delta, data, val, op) {\n  // delta\n  op || (op = '$set');\n  if (!delta[op]) delta[op] = {};\n  delta[op][data.path] = val;\n  // disabled versioning?\n  if (self.$__schema.options.versionKey === false) return;\n\n  // path excluded from versioning?\n  if (shouldSkipVersioning(self, data.path)) return;\n\n  // already marked for versioning?\n  if (VERSION_ALL === (VERSION_ALL & self.$__.version)) return;\n  if (self.$__schema.options.optimisticConcurrency) {\n    return;\n  }\n  switch (op) {\n    case '$set':\n    case '$unset':\n    case '$pop':\n    case '$pull':\n    case '$pullAll':\n    case '$push':\n    case '$addToSet':\n    case '$inc':\n      break;\n    default:\n      // nothing to do\n      return;\n  }\n\n  // ensure updates sent with positional notation are\n  // editing the correct array element.\n  // only increment the version if an array position changes.\n  // modifying elements of an array is ok if position does not change.\n  if (op === '$push' || op === '$addToSet' || op === '$pullAll' || op === '$pull') {\n    if (/\\.\\d+\\.|\\.\\d+$/.test(data.path)) {\n      increment.call(self);\n    } else {\n      self.$__.version = VERSION_INC;\n    }\n  } else if (/^\\$p/.test(op)) {\n    // potentially changing array positions\n    increment.call(self);\n  } else if (Array.isArray(val)) {\n    // $set an array\n    increment.call(self);\n  } else if (/\\.\\d+\\.|\\.\\d+$/.test(data.path)) {\n    // now handling $set, $unset\n    // subpath of array\n    self.$__.version = VERSION_WHERE;\n  }\n}\n\n/**\n * Compiles an update and where clause for a `val` with _atomics.\n *\n * @param {Document} self\n * @param {Object} where\n * @param {Object} delta\n * @param {Object} data\n * @param {Array} value\n * @api private\n */\n\nfunction handleAtomics(self, where, delta, data, value) {\n  if (delta.$set && delta.$set[data.path]) {\n    // $set has precedence over other atomics\n    return;\n  }\n  if (typeof value.$__getAtomics === 'function') {\n    value.$__getAtomics().forEach(function (atomic) {\n      const op = atomic[0];\n      const val = atomic[1];\n      operand(self, where, delta, data, val, op);\n    });\n    return;\n  }\n\n  // legacy support for plugins\n\n  const atomics = value[arrayAtomicsSymbol];\n  const ops = Object.keys(atomics);\n  let i = ops.length;\n  let val;\n  let op;\n  if (i === 0) {\n    // $set\n\n    if (utils.isMongooseObject(value)) {\n      value = value.toObject({\n        depopulate: 1,\n        _isNested: true\n      });\n    } else if (value.valueOf) {\n      value = value.valueOf();\n    }\n    return operand(self, where, delta, data, value);\n  }\n  function iter(mem) {\n    return utils.isMongooseObject(mem) ? mem.toObject({\n      depopulate: 1,\n      _isNested: true\n    }) : mem;\n  }\n  while (i--) {\n    op = ops[i];\n    val = atomics[op];\n    if (utils.isMongooseObject(val)) {\n      val = val.toObject({\n        depopulate: true,\n        transform: false,\n        _isNested: true\n      });\n    } else if (Array.isArray(val)) {\n      val = val.map(iter);\n    } else if (val.valueOf) {\n      val = val.valueOf();\n    }\n    if (op === '$addToSet') {\n      val = {\n        $each: val\n      };\n    }\n    operand(self, where, delta, data, val, op);\n  }\n}\n\n/**\n * Produces a special query document of the modified properties used in updates.\n *\n * @api private\n * @method $__delta\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.$__delta = function () {\n  const dirty = this.$__dirty();\n  const optimisticConcurrency = this.$__schema.options.optimisticConcurrency;\n  if (optimisticConcurrency) {\n    if (Array.isArray(optimisticConcurrency)) {\n      const optCon = new Set(optimisticConcurrency);\n      const modPaths = this.modifiedPaths();\n      if (modPaths.find(path => optCon.has(path))) {\n        this.$__.version = dirty.length ? VERSION_ALL : VERSION_WHERE;\n      }\n    } else {\n      this.$__.version = dirty.length ? VERSION_ALL : VERSION_WHERE;\n    }\n  }\n  if (!dirty.length && VERSION_ALL !== this.$__.version) {\n    return;\n  }\n  const where = {};\n  const delta = {};\n  const len = dirty.length;\n  const divergent = [];\n  let d = 0;\n  where._id = this._doc._id;\n  // If `_id` is an object, need to depopulate, but also need to be careful\n  // because `_id` can technically be null (see gh-6406)\n  if ((where && where._id && where._id.$__ || null) != null) {\n    where._id = where._id.toObject({\n      transform: false,\n      depopulate: true\n    });\n  }\n  for (; d < len; ++d) {\n    const data = dirty[d];\n    let value = data.value;\n    const match = checkDivergentArray(this, data.path, value);\n    if (match) {\n      divergent.push(match);\n      continue;\n    }\n    const pop = this.$populated(data.path, true);\n    if (!pop && this.$__.selected) {\n      // If any array was selected using an $elemMatch projection, we alter the path and where clause\n      // NOTE: MongoDB only supports projected $elemMatch on top level array.\n      const pathSplit = data.path.split('.');\n      const top = pathSplit[0];\n      if (this.$__.selected[top] && this.$__.selected[top].$elemMatch) {\n        // If the selected array entry was modified\n        if (pathSplit.length > 1 && pathSplit[1] == 0 && typeof where[top] === 'undefined') {\n          where[top] = this.$__.selected[top];\n          pathSplit[1] = '$';\n          data.path = pathSplit.join('.');\n        }\n        // if the selected array was modified in any other way throw an error\n        else {\n          divergent.push(data.path);\n          continue;\n        }\n      }\n    }\n\n    // If this path is set to default, and either this path or one of\n    // its parents is excluded, don't treat this path as dirty.\n    if (this.$isDefault(data.path) && this.$__.selected) {\n      if (data.path.indexOf('.') === -1 && isPathExcluded(this.$__.selected, data.path)) {\n        continue;\n      }\n      const pathsToCheck = parentPaths(data.path);\n      if (pathsToCheck.find(path => isPathExcluded(this.$__.isSelected, path))) {\n        continue;\n      }\n    }\n    if (divergent.length) continue;\n    if (value === undefined) {\n      operand(this, where, delta, data, 1, '$unset');\n    } else if (value === null) {\n      operand(this, where, delta, data, null);\n    } else if (utils.isMongooseArray(value) && value.$path() && value[arrayAtomicsSymbol]) {\n      // arrays and other custom types (support plugins etc)\n      handleAtomics(this, where, delta, data, value);\n    } else if (value[MongooseBuffer.pathSymbol] && Buffer.isBuffer(value)) {\n      // MongooseBuffer\n      value = value.toObject();\n      operand(this, where, delta, data, value);\n    } else {\n      if (this.$__.primitiveAtomics && this.$__.primitiveAtomics[data.path] != null) {\n        const val = this.$__.primitiveAtomics[data.path];\n        const op = firstKey(val);\n        operand(this, where, delta, data, val[op], op);\n      } else {\n        value = clone(value, {\n          depopulate: true,\n          transform: false,\n          virtuals: false,\n          getters: false,\n          omitUndefined: true,\n          _isNested: true\n        });\n        operand(this, where, delta, data, value);\n      }\n    }\n  }\n  if (divergent.length) {\n    return new DivergentArrayError(divergent);\n  }\n  if (this.$__.version) {\n    this.$__version(where, delta);\n  }\n  if (Object.keys(delta).length === 0) {\n    return [where, null];\n  }\n  return [where, delta];\n};\n\n/**\n * Determine if array was populated with some form of filter and is now\n * being updated in a manner which could overwrite data unintentionally.\n *\n * @see https://github.com/Automattic/mongoose/issues/1334\n * @param {Document} doc\n * @param {String} path\n * @param {Any} array\n * @return {String|undefined}\n * @api private\n */\n\nfunction checkDivergentArray(doc, path, array) {\n  // see if we populated this path\n  const pop = doc.$populated(path, true);\n  if (!pop && doc.$__.selected) {\n    // If any array was selected using an $elemMatch projection, we deny the update.\n    // NOTE: MongoDB only supports projected $elemMatch on top level array.\n    const top = path.split('.')[0];\n    if (doc.$__.selected[top + '.$']) {\n      return top;\n    }\n  }\n  if (!(pop && utils.isMongooseArray(array))) return;\n\n  // If the array was populated using options that prevented all\n  // documents from being returned (match, skip, limit) or they\n  // deselected the _id field, $pop and $set of the array are\n  // not safe operations. If _id was deselected, we do not know\n  // how to remove elements. $pop will pop off the _id from the end\n  // of the array in the db which is not guaranteed to be the\n  // same as the last element we have here. $set of the entire array\n  // would be similarly destructive as we never received all\n  // elements of the array and potentially would overwrite data.\n  const check = pop.options.match || pop.options.options && utils.object.hasOwnProperty(pop.options.options, 'limit') ||\n  // 0 is not permitted\n  pop.options.options && pop.options.options.skip ||\n  // 0 is permitted\n  pop.options.select && (\n  // deselected _id?\n  pop.options.select._id === 0 || /\\s?-_id\\s?/.test(pop.options.select));\n  if (check) {\n    const atomics = array[arrayAtomicsSymbol];\n    if (Object.keys(atomics).length === 0 || atomics.$set || atomics.$pop) {\n      return path;\n    }\n  }\n}\n\n/**\n * Appends versioning to the where and update clauses.\n *\n * @api private\n * @method $__version\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.$__version = function (where, delta) {\n  const key = this.$__schema.options.versionKey;\n  if (where === true) {\n    // this is an insert\n    if (key) {\n      setDottedPath(delta, key, 0);\n      this.$__setValue(key, 0);\n    }\n    return;\n  }\n  if (key === false) {\n    return;\n  }\n\n  // updates\n\n  // only apply versioning if our versionKey was selected. else\n  // there is no way to select the correct version. we could fail\n  // fast here and force them to include the versionKey but\n  // thats a bit intrusive. can we do this automatically?\n\n  if (!this.$__isSelected(key)) {\n    return;\n  }\n\n  // $push $addToSet don't need the where clause set\n  if (VERSION_WHERE === (VERSION_WHERE & this.$__.version)) {\n    const value = this.$__getValue(key);\n    if (value != null) where[key] = value;\n  }\n  if (VERSION_INC === (VERSION_INC & this.$__.version)) {\n    if (get(delta.$set, key, null) != null) {\n      // Version key is getting set, means we'll increment the doc's version\n      // after a successful save, so we should set the incremented version so\n      // future saves don't fail (gh-5779)\n      ++delta.$set[key];\n    } else {\n      delta.$inc = delta.$inc || {};\n      delta.$inc[key] = 1;\n    }\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction increment() {\n  this.$__.version = VERSION_ALL;\n  return this;\n}\n\n/**\n * Signal that we desire an increment of this documents version.\n *\n * #### Example:\n *\n *     const doc = await Model.findById(id);\n *     doc.increment();\n *     await doc.save();\n *\n * @see versionKeys https://mongoosejs.com/docs/guide.html#versionKey\n * @memberOf Model\n * @method increment\n * @api public\n */\n\nModel.prototype.increment = increment;\n\n/**\n * Returns a query object\n *\n * @api private\n * @method $__where\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.$__where = function _where(where) {\n  where || (where = {});\n  if (!where._id) {\n    where._id = this._doc._id;\n  }\n  if (this._doc._id === void 0) {\n    return new MongooseError('No _id found on document!');\n  }\n  return where;\n};\n\n/**\n * Delete this document from the db.\n *\n * #### Example:\n *\n *     await product.deleteOne();\n *     await Product.findById(product._id); // null\n *\n * @return {Query} Query\n * @api public\n */\n\nModel.prototype.deleteOne = function deleteOne(options) {\n  if (typeof options === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.prototype.deleteOne() no longer accepts a callback');\n  }\n  if (!options) {\n    options = {};\n  }\n  if (options.hasOwnProperty('session')) {\n    this.$session(options.session);\n  }\n  const self = this;\n  const where = this.$__where();\n  if (where instanceof Error) {\n    throw where;\n  }\n  const query = self.constructor.deleteOne(where, options);\n  if (this.$session() != null) {\n    if (!('session' in query.options)) {\n      query.options.session = this.$session();\n    }\n  }\n  query.pre(function queryPreDeleteOne(cb) {\n    self.constructor._middleware.execPre('deleteOne', self, [self], cb);\n  });\n  query.pre(function callSubdocPreHooks(cb) {\n    each(self.$getAllSubdocs(), (subdoc, cb) => {\n      subdoc.constructor._middleware.execPre('deleteOne', subdoc, [subdoc], cb);\n    }, cb);\n  });\n  query.pre(function skipIfAlreadyDeleted(cb) {\n    if (self.$__.isDeleted) {\n      return cb(Kareem.skipWrappedFunction());\n    }\n    return cb();\n  });\n  query.post(function callSubdocPostHooks(cb) {\n    each(self.$getAllSubdocs(), (subdoc, cb) => {\n      subdoc.constructor._middleware.execPost('deleteOne', subdoc, [subdoc], {}, cb);\n    }, cb);\n  });\n  query.post(function queryPostDeleteOne(cb) {\n    self.constructor._middleware.execPost('deleteOne', self, [self], {}, cb);\n  });\n  return query;\n};\n\n/**\n * Returns the model instance used to create this document if no `name` specified.\n * If `name` specified, returns the model with the given `name`.\n *\n * #### Example:\n *\n *     const doc = new Tank({});\n *     doc.$model() === Tank; // true\n *     await doc.$model('User').findById(id);\n *\n * @param {String} [name] model name\n * @method $model\n * @api public\n * @return {Model}\n */\n\nModel.prototype.$model = function $model(name) {\n  if (arguments.length === 0) {\n    return this.constructor;\n  }\n  return this[modelDbSymbol].model(name);\n};\n\n/**\n * Returns the model instance used to create this document if no `name` specified.\n * If `name` specified, returns the model with the given `name`.\n *\n * #### Example:\n *\n *     const doc = new Tank({});\n *     doc.$model() === Tank; // true\n *     await doc.$model('User').findById(id);\n *\n * @param {String} [name] model name\n * @method model\n * @api public\n * @return {Model}\n */\n\nModel.prototype.model = Model.prototype.$model;\n\n/**\n * Returns a document with `_id` only if at least one document exists in the database that matches\n * the given `filter`, and `null` otherwise.\n *\n * Under the hood, `MyModel.exists({ answer: 42 })` is equivalent to\n * `MyModel.findOne({ answer: 42 }).select({ _id: 1 }).lean()`\n *\n * #### Example:\n *\n *     await Character.deleteMany({});\n *     await Character.create({ name: 'Jean-Luc Picard' });\n *\n *     await Character.exists({ name: /picard/i }); // { _id: ... }\n *     await Character.exists({ name: /riker/i }); // null\n *\n * This function triggers the following middleware.\n *\n * - `findOne()`\n *\n * @param {Object} filter\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @return {Query}\n */\n\nModel.exists = function exists(filter, options) {\n  _checkContext(this, 'exists');\n  if (typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.exists() no longer accepts a callback');\n  }\n  const query = this.findOne(filter).select({\n    _id: 1\n  }).lean().setOptions(options);\n  return query;\n};\n\n/**\n * Adds a discriminator type.\n *\n * #### Example:\n *\n *     function BaseSchema() {\n *       Schema.apply(this, arguments);\n *\n *       this.add({\n *         name: String,\n *         createdAt: Date\n *       });\n *     }\n *     util.inherits(BaseSchema, Schema);\n *\n *     const PersonSchema = new BaseSchema();\n *     const BossSchema = new BaseSchema({ department: String });\n *\n *     const Person = mongoose.model('Person', PersonSchema);\n *     const Boss = Person.discriminator('Boss', BossSchema);\n *     new Boss().__t; // \"Boss\". `__t` is the default `discriminatorKey`\n *\n *     const employeeSchema = new Schema({ boss: ObjectId });\n *     const Employee = Person.discriminator('Employee', employeeSchema, 'staff');\n *     new Employee().__t; // \"staff\" because of 3rd argument above\n *\n * @param {String} name discriminator model name\n * @param {Schema} schema discriminator model schema\n * @param {Object|String} [options] If string, same as `options.value`.\n * @param {String} [options.value] the string stored in the `discriminatorKey` property. If not specified, Mongoose uses the `name` parameter.\n * @param {Boolean} [options.clone=true] By default, `discriminator()` clones the given `schema`. Set to `false` to skip cloning.\n * @param {Boolean} [options.overwriteModels=false] by default, Mongoose does not allow you to define a discriminator with the same name as another discriminator. Set this to allow overwriting discriminators with the same name.\n * @param {Boolean} [options.mergeHooks=true] By default, Mongoose merges the base schema's hooks with the discriminator schema's hooks. Set this option to `false` to make Mongoose use the discriminator schema's hooks instead.\n * @param {Boolean} [options.mergePlugins=true] By default, Mongoose merges the base schema's plugins with the discriminator schema's plugins. Set this option to `false` to make Mongoose use the discriminator schema's plugins instead.\n * @return {Model} The newly created discriminator model\n * @api public\n */\n\nModel.discriminator = function (name, schema, options) {\n  let model;\n  if (typeof name === 'function') {\n    model = name;\n    name = utils.getFunctionName(model);\n    if (!(model.prototype instanceof Model)) {\n      throw new MongooseError('The provided class ' + name + ' must extend Model');\n    }\n  }\n  options = options || {};\n  const value = utils.isPOJO(options) ? options.value : options;\n  const clone = typeof options.clone === 'boolean' ? options.clone : true;\n  const mergePlugins = typeof options.mergePlugins === 'boolean' ? options.mergePlugins : true;\n  _checkContext(this, 'discriminator');\n  if (utils.isObject(schema) && !schema.instanceOfSchema) {\n    schema = new Schema(schema);\n  }\n  if (schema instanceof Schema && clone) {\n    schema = schema.clone();\n  }\n  schema = discriminator(this, name, schema, value, mergePlugins, options.mergeHooks);\n  if (this.db.models[name] && !schema.options.overwriteModels) {\n    throw new OverwriteModelError(name);\n  }\n  schema.$isRootDiscriminator = true;\n  schema.$globalPluginsApplied = true;\n  model = this.db.model(model || name, schema, this.$__collection.name);\n  this.discriminators[name] = model;\n  const d = this.discriminators[name];\n  Object.setPrototypeOf(d.prototype, this.prototype);\n  Object.defineProperty(d, 'baseModelName', {\n    value: this.modelName,\n    configurable: true,\n    writable: false\n  });\n\n  // apply methods and statics\n  applyMethods(d, schema);\n  applyStatics(d, schema);\n  if (this[subclassedSymbol] != null) {\n    for (const submodel of this[subclassedSymbol]) {\n      submodel.discriminators = submodel.discriminators || {};\n      submodel.discriminators[name] = model.__subclass(model.db, schema, submodel.collection.name);\n    }\n  }\n  return d;\n};\n\n/**\n * Make sure `this` is a model\n * @api private\n */\n\nfunction _checkContext(ctx, fnName) {\n  // Check context, because it is easy to mistakenly type\n  // `new Model.discriminator()` and get an incomprehensible error\n  if (ctx == null || ctx === global) {\n    throw new MongooseError('`Model.' + fnName + '()` cannot run without a ' + 'model as `this`. Make sure you are calling `MyModel.' + fnName + '()` ' + 'where `MyModel` is a Mongoose model.');\n  } else if (ctx[modelSymbol] == null) {\n    throw new MongooseError('`Model.' + fnName + '()` cannot run without a ' + 'model as `this`. Make sure you are not calling ' + '`new Model.' + fnName + '()`');\n  }\n}\n\n// Model (class) features\n\n/*!\n * Give the constructor the ability to emit events.\n */\n\nfor (const i in EventEmitter.prototype) {\n  Model[i] = EventEmitter.prototype[i];\n}\n\n/**\n * This function is responsible for building [indexes](https://www.mongodb.com/docs/manual/indexes/),\n * unless [`autoIndex`](https://mongoosejs.com/docs/guide.html#autoIndex) is turned off.\n *\n * Mongoose calls this function automatically when a model is created using\n * [`mongoose.model()`](https://mongoosejs.com/docs/api/mongoose.html#Mongoose.prototype.model()) or\n * [`connection.model()`](https://mongoosejs.com/docs/api/connection.html#Connection.prototype.model()), so you\n * don't need to call `init()` to trigger index builds.\n *\n * However, you _may_ need to call `init()`  to get back a promise that will resolve when your indexes are finished.\n * Calling `await Model.init()` is helpful if you need to wait for indexes to build before continuing.\n * For example, if you want to wait for unique indexes to build before continuing with a test case.\n *\n * #### Example:\n *\n *     const eventSchema = new Schema({ thing: { type: 'string', unique: true } })\n *     // This calls `Event.init()` implicitly, so you don't need to call\n *     // `Event.init()` on your own.\n *     const Event = mongoose.model('Event', eventSchema);\n *\n *     await Event.init();\n *     console.log('Indexes are done building!');\n *\n * @api public\n * @returns {Promise}\n */\n\nModel.init = function init() {\n  _checkContext(this, 'init');\n  if (typeof arguments[0] === 'function') {\n    throw new MongooseError('Model.init() no longer accepts a callback');\n  }\n  this.schema.emit('init', this);\n  if (this.$init != null) {\n    return this.$init;\n  }\n  const conn = this.db;\n  const _ensureIndexes = async () => {\n    const autoIndex = utils.getOption('autoIndex', this.schema.options, conn.config, conn.base.options);\n    if (!autoIndex) {\n      return;\n    }\n    return await this.ensureIndexes({\n      _automatic: true\n    });\n  };\n  const _createCollection = async () => {\n    if ((conn.readyState === STATES.connecting || conn.readyState === STATES.disconnected) && conn._shouldBufferCommands()) {\n      await new Promise(resolve => {\n        conn._queue.push({\n          fn: resolve\n        });\n      });\n    }\n    const autoCreate = utils.getOption('autoCreate', this.schema.options, conn.config, conn.base.options);\n    if (!autoCreate) {\n      return;\n    }\n    return await this.createCollection();\n  };\n  this.$init = _createCollection().then(() => _ensureIndexes());\n  const _catch = this.$init.catch;\n  const _this = this;\n  this.$init.catch = function () {\n    _this.$caught = true;\n    return _catch.apply(_this.$init, arguments);\n  };\n  return this.$init;\n};\n\n/**\n * Create the collection for this model. By default, if no indexes are specified,\n * mongoose will not create the collection for the model until any documents are\n * created. Use this method to create the collection explicitly.\n *\n * Note 1: You may need to call this before starting a transaction\n * See https://www.mongodb.com/docs/manual/core/transactions/#transactions-and-operations\n *\n * Note 2: You don't have to call this if your schema contains index or unique field.\n * In that case, just use `Model.init()`\n *\n * #### Example:\n *\n *     const userSchema = new Schema({ name: String })\n *     const User = mongoose.model('User', userSchema);\n *\n *     User.createCollection().then(function(collection) {\n *       console.log('Collection is created!');\n *     });\n *\n * @api public\n * @param {Object} [options] see [MongoDB driver docs](https://mongodb.github.io/node-mongodb-native/4.9/classes/Db.html#createCollection)\n * @returns {Promise}\n */\n\nModel.createCollection = async function createCollection(options) {\n  _checkContext(this, 'createCollection');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.createCollection() no longer accepts a callback');\n  }\n  const collectionOptions = this && this.schema && this.schema.options && this.schema.options.collectionOptions;\n  if (collectionOptions != null) {\n    options = Object.assign({}, collectionOptions, options);\n  }\n  const schemaCollation = this && this.schema && this.schema.options && this.schema.options.collation;\n  if (schemaCollation != null) {\n    options = Object.assign({\n      collation: schemaCollation\n    }, options);\n  }\n  const capped = this && this.schema && this.schema.options && this.schema.options.capped;\n  if (capped != null) {\n    if (typeof capped === 'number') {\n      options = Object.assign({\n        capped: true,\n        size: capped\n      }, options);\n    } else if (typeof capped === 'object') {\n      options = Object.assign({\n        capped: true\n      }, capped, options);\n    }\n  }\n  const timeseries = this && this.schema && this.schema.options && this.schema.options.timeseries;\n  if (timeseries != null) {\n    options = Object.assign({\n      timeseries\n    }, options);\n    if (options.expireAfterSeconds != null) {\n      // do nothing\n    } else if (options.expires != null) {\n      utils.expires(options);\n    } else if (this.schema.options.expireAfterSeconds != null) {\n      options.expireAfterSeconds = this.schema.options.expireAfterSeconds;\n    } else if (this.schema.options.expires != null) {\n      options.expires = this.schema.options.expires;\n      utils.expires(options);\n    }\n  }\n  const clusteredIndex = this && this.schema && this.schema.options && this.schema.options.clusteredIndex;\n  if (clusteredIndex != null) {\n    options = Object.assign({\n      clusteredIndex: {\n        ...clusteredIndex,\n        unique: true\n      }\n    }, options);\n  }\n  try {\n    await this.db.createCollection(this.$__collection.collectionName, options);\n  } catch (err) {\n    if (err != null && (err.name !== 'MongoServerError' || err.code !== 48)) {\n      throw err;\n    }\n  }\n  return this.$__collection;\n};\n\n/**\n * Makes the indexes in MongoDB match the indexes defined in this model's\n * schema. This function will drop any indexes that are not defined in\n * the model's schema except the `_id` index, and build any indexes that\n * are in your schema but not in MongoDB.\n *\n * See the [introductory blog post](https://thecodebarbarian.com/whats-new-in-mongoose-5-2-syncindexes)\n * for more information.\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: { type: String, unique: true } });\n *     const Customer = mongoose.model('Customer', schema);\n *     await Customer.collection.createIndex({ age: 1 }); // Index is not in schema\n *     // Will drop the 'age' index and create an index on `name`\n *     await Customer.syncIndexes();\n *\n * You should be careful about running `syncIndexes()` on production applications under heavy load,\n * because index builds are expensive operations, and unexpected index drops can lead to degraded\n * performance. Before running `syncIndexes()`, you can use the [`diffIndexes()` function](#Model.diffIndexes())\n * to check what indexes `syncIndexes()` will drop and create.\n *\n * #### Example:\n *\n *     const { toDrop, toCreate } = await Model.diffIndexes();\n *     toDrop; // Array of strings containing names of indexes that `syncIndexes()` will drop\n *     toCreate; // Array of strings containing names of indexes that `syncIndexes()` will create\n *\n * @param {Object} [options] options to pass to `ensureIndexes()`\n * @param {Boolean} [options.background=null] if specified, overrides each index's `background` property\n * @return {Promise}\n * @api public\n */\n\nModel.syncIndexes = async function syncIndexes(options) {\n  _checkContext(this, 'syncIndexes');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.syncIndexes() no longer accepts a callback');\n  }\n  const model = this;\n  try {\n    await model.createCollection();\n  } catch (err) {\n    if (err != null && (err.name !== 'MongoServerError' || err.code !== 48)) {\n      throw err;\n    }\n  }\n  const diffIndexesResult = await model.diffIndexes();\n  const dropped = await model.cleanIndexes({\n    ...options,\n    toDrop: diffIndexesResult.toDrop\n  });\n  await model.createIndexes({\n    ...options,\n    toCreate: diffIndexesResult.toCreate\n  });\n  return dropped;\n};\n\n/**\n * Does a dry-run of `Model.syncIndexes()`, returning the indexes that `syncIndexes()` would drop and create if you were to run `syncIndexes()`.\n *\n * #### Example:\n *\n *     const { toDrop, toCreate } = await Model.diffIndexes();\n *     toDrop; // Array of strings containing names of indexes that `syncIndexes()` will drop\n *     toCreate; // Array of strings containing names of indexes that `syncIndexes()` will create\n *\n * @param {Object} [options]\n * @return {Promise<Object>} contains the indexes that would be dropped in MongoDB and indexes that would be created in MongoDB as `{ toDrop: string[], toCreate: string[] }`.\n */\n\nModel.diffIndexes = async function diffIndexes() {\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.syncIndexes() no longer accepts a callback');\n  }\n  const model = this;\n  let dbIndexes = await model.listIndexes().catch(err => {\n    if (err.codeName == 'NamespaceNotFound') {\n      return undefined;\n    }\n    throw err;\n  });\n  if (dbIndexes === undefined) {\n    dbIndexes = [];\n  }\n  dbIndexes = getRelatedDBIndexes(model, dbIndexes);\n  const schema = model.schema;\n  const schemaIndexes = getRelatedSchemaIndexes(model, schema.indexes());\n  const toDrop = getIndexesToDrop(schema, schemaIndexes, dbIndexes);\n  const toCreate = getIndexesToCreate(schema, schemaIndexes, dbIndexes, toDrop);\n  return {\n    toDrop,\n    toCreate\n  };\n};\nfunction getIndexesToCreate(schema, schemaIndexes, dbIndexes, toDrop) {\n  const toCreate = [];\n  for (const [schemaIndexKeysObject, schemaIndexOptions] of schemaIndexes) {\n    let found = false;\n    const options = decorateDiscriminatorIndexOptions(schema, clone(schemaIndexOptions));\n    for (const index of dbIndexes) {\n      if (isDefaultIdIndex(index)) {\n        continue;\n      }\n      if (isIndexEqual(schemaIndexKeysObject, options, index) && !toDrop.includes(index.name)) {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      toCreate.push(schemaIndexKeysObject);\n    }\n  }\n  return toCreate;\n}\nfunction getIndexesToDrop(schema, schemaIndexes, dbIndexes) {\n  const toDrop = [];\n  for (const dbIndex of dbIndexes) {\n    let found = false;\n    // Never try to drop `_id` index, MongoDB server doesn't allow it\n    if (isDefaultIdIndex(dbIndex)) {\n      continue;\n    }\n    for (const [schemaIndexKeysObject, schemaIndexOptions] of schemaIndexes) {\n      const options = decorateDiscriminatorIndexOptions(schema, clone(schemaIndexOptions));\n      applySchemaCollation(schemaIndexKeysObject, options, schema.options);\n      if (isIndexEqual(schemaIndexKeysObject, options, dbIndex)) {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      toDrop.push(dbIndex.name);\n    }\n  }\n  return toDrop;\n}\n/**\n * Deletes all indexes that aren't defined in this model's schema. Used by\n * `syncIndexes()`.\n *\n * The returned promise resolves to a list of the dropped indexes' names as an array\n *\n * @param {Function} [callback] optional callback\n * @return {Promise|undefined} Returns `undefined` if callback is specified, returns a promise if no callback.\n * @api public\n */\n\nModel.cleanIndexes = async function cleanIndexes(options) {\n  _checkContext(this, 'cleanIndexes');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.cleanIndexes() no longer accepts a callback');\n  }\n  const model = this;\n  const collection = model.$__collection;\n  if (Array.isArray(options && options.toDrop)) {\n    const res = await _dropIndexes(options.toDrop, collection);\n    return res;\n  }\n  const res = await model.diffIndexes();\n  return await _dropIndexes(res.toDrop, collection);\n};\nasync function _dropIndexes(toDrop, collection) {\n  if (toDrop.length === 0) {\n    return [];\n  }\n  await Promise.all(toDrop.map(indexName => collection.dropIndex(indexName)));\n  return toDrop;\n}\n\n/**\n * Lists the indexes currently defined in MongoDB. This may or may not be\n * the same as the indexes defined in your schema depending on whether you\n * use the [`autoIndex` option](https://mongoosejs.com/docs/guide.html#autoIndex) and if you\n * build indexes manually.\n *\n * @return {Promise}\n * @api public\n */\n\nModel.listIndexes = async function listIndexes() {\n  _checkContext(this, 'listIndexes');\n  if (typeof arguments[0] === 'function') {\n    throw new MongooseError('Model.listIndexes() no longer accepts a callback');\n  }\n  if (this.$__collection.buffer) {\n    await new Promise(resolve => {\n      this.$__collection.addQueue(resolve);\n    });\n  }\n  return this.$__collection.listIndexes().toArray();\n};\n\n/**\n * Sends `createIndex` commands to mongo for each index declared in the schema.\n * The `createIndex` commands are sent in series.\n *\n * #### Example:\n *\n *     Event.ensureIndexes(function (err) {\n *       if (err) return handleError(err);\n *     });\n *\n * After completion, an `index` event is emitted on this `Model` passing an error if one occurred.\n *\n * #### Example:\n *\n *     const eventSchema = new Schema({ thing: { type: 'string', unique: true } })\n *     const Event = mongoose.model('Event', eventSchema);\n *\n *     Event.on('index', function (err) {\n *       if (err) console.error(err); // error occurred during index creation\n *     })\n *\n * _NOTE: It is not recommended that you run this in production. Index creation may impact database performance depending on your load. Use with caution._\n *\n * @param {Object} [options] internal options\n * @return {Promise}\n * @api public\n */\n\nModel.ensureIndexes = async function ensureIndexes(options) {\n  _checkContext(this, 'ensureIndexes');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.ensureIndexes() no longer accepts a callback');\n  }\n  await new Promise((resolve, reject) => {\n    _ensureIndexes(this, options, err => {\n      if (err != null) {\n        return reject(err);\n      }\n      resolve();\n    });\n  });\n};\n\n/**\n * Similar to `ensureIndexes()`, except for it uses the [`createIndex`](https://mongodb.github.io/node-mongodb-native/4.9/classes/Db.html#createIndex)\n * function.\n *\n * @param {Object} [options] internal options\n * @return {Promise}\n * @api public\n */\n\nModel.createIndexes = async function createIndexes(options) {\n  _checkContext(this, 'createIndexes');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.createIndexes() no longer accepts a callback');\n  }\n  return this.ensureIndexes(options);\n};\n\n/*!\n * ignore\n */\n\nfunction _ensureIndexes(model, options, callback) {\n  const indexes = model.schema.indexes();\n  let indexError;\n  options = options || {};\n  const done = function (err) {\n    if (err && !model.$caught) {\n      model.emit('error', err);\n    }\n    model.emit('index', err || indexError);\n    callback && callback(err || indexError);\n  };\n  for (const index of indexes) {\n    if (isDefaultIdIndex(index)) {\n      utils.warn('mongoose: Cannot specify a custom index on `_id` for ' + 'model name \"' + model.modelName + '\", ' + 'MongoDB does not allow overwriting the default `_id` index. See ' + 'https://bit.ly/mongodb-id-index');\n    }\n  }\n  if (!indexes.length) {\n    immediate(function () {\n      done();\n    });\n    return;\n  }\n  // Indexes are created one-by-one to support how MongoDB < 2.4 deals\n  // with background indexes.\n\n  const indexSingleDone = function (err, fields, options, name) {\n    model.emit('index-single-done', err, fields, options, name);\n  };\n  const indexSingleStart = function (fields, options) {\n    model.emit('index-single-start', fields, options);\n  };\n  const baseSchema = model.schema._baseSchema;\n  const baseSchemaIndexes = baseSchema ? baseSchema.indexes() : [];\n  immediate(function () {\n    // If buffering is off, do this manually.\n    if (options._automatic && !model.collection.collection) {\n      model.collection.addQueue(create, []);\n    } else {\n      create();\n    }\n  });\n  function create() {\n    if (options._automatic) {\n      if (model.schema.options.autoIndex === false || model.schema.options.autoIndex == null && model.db.config.autoIndex === false) {\n        return done();\n      }\n    }\n    const index = indexes.shift();\n    if (!index) {\n      return done();\n    }\n    if (options._automatic && index[1]._autoIndex === false) {\n      return create();\n    }\n    if (baseSchemaIndexes.find(i => utils.deepEqual(i, index))) {\n      return create();\n    }\n    const indexFields = clone(index[0]);\n    const indexOptions = clone(index[1]);\n    delete indexOptions._autoIndex;\n    decorateDiscriminatorIndexOptions(model.schema, indexOptions);\n    applyWriteConcern(model.schema, indexOptions);\n    applySchemaCollation(indexFields, indexOptions, model.schema.options);\n    indexSingleStart(indexFields, options);\n    if ('background' in options) {\n      indexOptions.background = options.background;\n    }\n    if ('toCreate' in options) {\n      if (options.toCreate.length === 0) {\n        return done();\n      }\n    }\n    model.collection.createIndex(indexFields, indexOptions).then(name => {\n      indexSingleDone(null, indexFields, indexOptions, name);\n      create();\n    }, err => {\n      if (!indexError) {\n        indexError = err;\n      }\n      if (!model.$caught) {\n        model.emit('error', err);\n      }\n      indexSingleDone(err, indexFields, indexOptions);\n      create();\n    });\n  }\n}\n\n/**\n * Schema the model uses.\n *\n * @property schema\n * @static\n * @api public\n * @memberOf Model\n */\n\nModel.schema;\n\n/**\n * Connection instance the model uses.\n *\n * @property db\n * @static\n * @api public\n * @memberOf Model\n */\n\nModel.db;\n\n/**\n * Collection the model uses.\n *\n * @property collection\n * @api public\n * @memberOf Model\n */\n\nModel.collection;\n\n/**\n * Internal collection the model uses.\n *\n * @property collection\n * @api private\n * @memberOf Model\n */\nModel.$__collection;\n\n/**\n * Base Mongoose instance the model uses.\n *\n * @property base\n * @api public\n * @memberOf Model\n */\n\nModel.base;\n\n/**\n * Registered discriminators for this model.\n *\n * @property discriminators\n * @api public\n * @memberOf Model\n */\n\nModel.discriminators;\n\n/**\n * Translate any aliases fields/conditions so the final query or document object is pure\n *\n * #### Example:\n *\n *     await Character.find(Character.translateAliases({\n *        '名': 'Eddard Stark' // Alias for 'name'\n *     });\n *\n * By default, `translateAliases()` overwrites raw fields with aliased fields.\n * So if `n` is an alias for `name`, `{ n: 'alias', name: 'raw' }` will resolve to `{ name: 'alias' }`.\n * However, you can set the `errorOnDuplicates` option to throw an error if there are potentially conflicting paths.\n * The `translateAliases` option for queries uses `errorOnDuplicates`.\n *\n * #### Note:\n *\n * Only translate arguments of object type anything else is returned raw\n *\n * @param {Object} fields fields/conditions that may contain aliased keys\n * @param {Boolean} [errorOnDuplicates] if true, throw an error if there's both a key and an alias for that key in `fields`\n * @return {Object} the translated 'pure' fields/conditions\n */\nModel.translateAliases = function translateAliases(fields, errorOnDuplicates) {\n  _checkContext(this, 'translateAliases');\n  const translate = (key, value) => {\n    let alias;\n    const translated = [];\n    const fieldKeys = key.split('.');\n    let currentSchema = this.schema;\n    for (const i in fieldKeys) {\n      const name = fieldKeys[i];\n      if (currentSchema && currentSchema.aliases[name]) {\n        alias = currentSchema.aliases[name];\n        if (errorOnDuplicates && alias in fields) {\n          throw new MongooseError(`Provided object has both field \"${name}\" and its alias \"${alias}\"`);\n        }\n        // Alias found,\n        translated.push(alias);\n      } else {\n        alias = name;\n        // Alias not found, so treat as un-aliased key\n        translated.push(name);\n      }\n\n      // Check if aliased path is a schema\n      if (currentSchema && currentSchema.paths[alias]) {\n        currentSchema = currentSchema.paths[alias].schema;\n      } else currentSchema = null;\n    }\n    const translatedKey = translated.join('.');\n    if (fields instanceof Map) fields.set(translatedKey, value);else fields[translatedKey] = value;\n    if (translatedKey !== key) {\n      // We'll be using the translated key instead\n      if (fields instanceof Map) {\n        // Delete from map\n        fields.delete(key);\n      } else {\n        // Delete from object\n        delete fields[key]; // We'll be using the translated key instead\n      }\n    }\n    return fields;\n  };\n  if (typeof fields === 'object') {\n    // Fields is an object (query conditions or document fields)\n    if (fields instanceof Map) {\n      // A Map was supplied\n      for (const field of new Map(fields)) {\n        fields = translate(field[0], field[1]);\n      }\n    } else {\n      // Infer a regular object was supplied\n      for (const key of Object.keys(fields)) {\n        fields = translate(key, fields[key]);\n        if (key[0] === '$') {\n          if (Array.isArray(fields[key])) {\n            for (const i in fields[key]) {\n              // Recursively translate nested queries\n              fields[key][i] = this.translateAliases(fields[key][i]);\n            }\n          } else {\n            this.translateAliases(fields[key]);\n          }\n        }\n      }\n    }\n    return fields;\n  } else {\n    // Don't know typeof fields\n    return fields;\n  }\n};\n\n/**\n * Deletes the first document that matches `conditions` from the collection.\n * It returns an object with the property `deletedCount` indicating how many documents were deleted.\n * Behaves like `remove()`, but deletes at most one document regardless of the\n * `single` option.\n *\n * #### Example:\n *\n *     await Character.deleteOne({ name: 'Eddard Stark' }); // returns {deletedCount: 1}\n *\n * #### Note:\n *\n * This function triggers `deleteOne` query hooks. Read the\n * [middleware docs](https://mongoosejs.com/docs/middleware.html#naming) to learn more.\n *\n * @param {Object} conditions\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @api public\n */\n\nModel.deleteOne = function deleteOne(conditions, options) {\n  _checkContext(this, 'deleteOne');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.prototype.deleteOne() no longer accepts a callback');\n  }\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.setOptions(options);\n  return mq.deleteOne(conditions);\n};\n\n/**\n * Deletes all of the documents that match `conditions` from the collection.\n * It returns an object with the property `deletedCount` containing the number of documents deleted.\n * Behaves like `remove()`, but deletes all documents that match `conditions`\n * regardless of the `single` option.\n *\n * #### Example:\n *\n *     await Character.deleteMany({ name: /Stark/, age: { $gte: 18 } }); // returns {deletedCount: x} where x is the number of documents deleted.\n *\n * #### Note:\n *\n * This function triggers `deleteMany` query hooks. Read the\n * [middleware docs](https://mongoosejs.com/docs/middleware.html#naming) to learn more.\n *\n * @param {Object} conditions\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @api public\n */\n\nModel.deleteMany = function deleteMany(conditions, options) {\n  _checkContext(this, 'deleteMany');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.deleteMany() no longer accepts a callback');\n  }\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.setOptions(options);\n  return mq.deleteMany(conditions);\n};\n\n/**\n * Finds documents.\n *\n * Mongoose casts the `filter` to match the model's schema before the command is sent.\n * See our [query casting tutorial](https://mongoosejs.com/docs/tutorials/query_casting.html) for\n * more information on how Mongoose casts `filter`.\n *\n * #### Example:\n *\n *     // find all documents\n *     await MyModel.find({});\n *\n *     // find all documents named john and at least 18\n *     await MyModel.find({ name: 'john', age: { $gte: 18 } }).exec();\n *\n *     // executes, name LIKE john and only selecting the \"name\" and \"friends\" fields\n *     await MyModel.find({ name: /john/i }, 'name friends').exec();\n *\n *     // passing options\n *     await MyModel.find({ name: /john/i }, null, { skip: 10 }).exec();\n *\n * @param {Object|ObjectId} filter\n * @param {Object|String|String[]} [projection] optional fields to return, see [`Query.prototype.select()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.select())\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @see field selection https://mongoosejs.com/docs/api/query.html#Query.prototype.select()\n * @see query casting https://mongoosejs.com/docs/tutorials/query_casting.html\n * @api public\n */\n\nModel.find = function find(conditions, projection, options) {\n  _checkContext(this, 'find');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function' || typeof arguments[3] === 'function') {\n    throw new MongooseError('Model.find() no longer accepts a callback');\n  }\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(projection);\n  mq.setOptions(options);\n  return mq.find(conditions);\n};\n\n/**\n * Finds a single document by its _id field. `findById(id)` is almost*\n * equivalent to `findOne({ _id: id })`. If you want to query by a document's\n * `_id`, use `findById()` instead of `findOne()`.\n *\n * The `id` is cast based on the Schema before sending the command.\n *\n * This function triggers the following middleware.\n *\n * - `findOne()`\n *\n * \\* Except for how it treats `undefined`. If you use `findOne()`, you'll see\n * that `findOne(undefined)` and `findOne({ _id: undefined })` are equivalent\n * to `findOne({})` and return arbitrary documents. However, mongoose\n * translates `findById(undefined)` into `findOne({ _id: null })`.\n *\n * #### Example:\n *\n *     // Find the adventure with the given `id`, or `null` if not found\n *     await Adventure.findById(id).exec();\n *\n *     // select only the adventures name and length\n *     await Adventure.findById(id, 'name length').exec();\n *\n * @param {Any} id value of `_id` to query by\n * @param {Object|String|String[]} [projection] optional fields to return, see [`Query.prototype.select()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.select())\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @return {Query}\n * @see field selection https://mongoosejs.com/docs/api/query.html#Query.prototype.select()\n * @see lean queries https://mongoosejs.com/docs/tutorials/lean.html\n * @see findById in Mongoose https://masteringjs.io/tutorials/mongoose/find-by-id\n * @api public\n */\n\nModel.findById = function findById(id, projection, options) {\n  _checkContext(this, 'findById');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.findById() no longer accepts a callback');\n  }\n  if (typeof id === 'undefined') {\n    id = null;\n  }\n  return this.findOne({\n    _id: id\n  }, projection, options);\n};\n\n/**\n * Finds one document.\n *\n * The `conditions` are cast to their respective SchemaTypes before the command is sent.\n *\n * *Note:* `conditions` is optional, and if `conditions` is null or undefined,\n * mongoose will send an empty `findOne` command to MongoDB, which will return\n * an arbitrary document. If you're querying by `_id`, use `findById()` instead.\n *\n * #### Example:\n *\n *     // Find one adventure whose `country` is 'Croatia', otherwise `null`\n *     await Adventure.findOne({ country: 'Croatia' }).exec();\n *\n *     // Model.findOne() no longer accepts a callback\n *\n *     // Select only the adventures name and length\n *     await Adventure.findOne({ country: 'Croatia' }, 'name length').exec();\n *\n * @param {Object} [conditions]\n * @param {Object|String|String[]} [projection] optional fields to return, see [`Query.prototype.select()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.select())\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @see field selection https://mongoosejs.com/docs/api/query.html#Query.prototype.select()\n * @see lean queries https://mongoosejs.com/docs/tutorials/lean.html\n * @api public\n */\n\nModel.findOne = function findOne(conditions, projection, options) {\n  _checkContext(this, 'findOne');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.findOne() no longer accepts a callback');\n  }\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(projection);\n  mq.setOptions(options);\n  return mq.findOne(conditions);\n};\n\n/**\n * Estimates the number of documents in the MongoDB collection. Faster than\n * using `countDocuments()` for large collections because\n * `estimatedDocumentCount()` uses collection metadata rather than scanning\n * the entire collection.\n *\n * #### Example:\n *\n *     const numAdventures = await Adventure.estimatedDocumentCount();\n *\n * @param {Object} [options]\n * @return {Query}\n * @api public\n */\n\nModel.estimatedDocumentCount = function estimatedDocumentCount(options) {\n  _checkContext(this, 'estimatedDocumentCount');\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  return mq.estimatedDocumentCount(options);\n};\n\n/**\n * Counts number of documents matching `filter` in a database collection.\n *\n * #### Example:\n *\n *     Adventure.countDocuments({ type: 'jungle' }, function (err, count) {\n *       console.log('there are %d jungle adventures', count);\n *     });\n *\n * If you want to count all documents in a large collection,\n * use the [`estimatedDocumentCount()` function](https://mongoosejs.com/docs/api/model.html#Model.estimatedDocumentCount())\n * instead. If you call `countDocuments({})`, MongoDB will always execute\n * a full collection scan and **not** use any indexes.\n *\n * The `countDocuments()` function is similar to `count()`, but there are a\n * [few operators that `countDocuments()` does not support](https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#countDocuments).\n * Below are the operators that `count()` supports but `countDocuments()` does not,\n * and the suggested replacement:\n *\n * - `$where`: [`$expr`](https://www.mongodb.com/docs/manual/reference/operator/query/expr/)\n * - `$near`: [`$geoWithin`](https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/) with [`$center`](https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center)\n * - `$nearSphere`: [`$geoWithin`](https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/) with [`$centerSphere`](https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere)\n *\n * @param {Object} filter\n * @return {Query}\n * @api public\n */\n\nModel.countDocuments = function countDocuments(conditions, options) {\n  _checkContext(this, 'countDocuments');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.countDocuments() no longer accepts a callback');\n  }\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  if (options != null) {\n    mq.setOptions(options);\n  }\n  return mq.countDocuments(conditions);\n};\n\n/**\n * Creates a Query for a `distinct` operation.\n *\n * #### Example:\n *\n *     const query = Link.distinct('url');\n *     query.exec();\n *\n * @param {String} field\n * @param {Object} [conditions] optional\n * @return {Query}\n * @api public\n */\n\nModel.distinct = function distinct(field, conditions) {\n  _checkContext(this, 'distinct');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.distinct() no longer accepts a callback');\n  }\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  return mq.distinct(field, conditions);\n};\n\n/**\n * Creates a Query, applies the passed conditions, and returns the Query.\n *\n * For example, instead of writing:\n *\n *     User.find({ age: { $gte: 21, $lte: 65 } });\n *\n * we can instead write:\n *\n *     User.where('age').gte(21).lte(65).exec();\n *\n * Since the Query class also supports `where` you can continue chaining\n *\n *     User\n *     .where('age').gte(21).lte(65)\n *     .where('name', /^b/i)\n *     ... etc\n *\n * @param {String} path\n * @param {Object} [val] optional value\n * @return {Query}\n * @api public\n */\n\nModel.where = function where(path, val) {\n  _checkContext(this, 'where');\n  void val; // eslint\n  const mq = new this.Query({}, {}, this, this.$__collection).find({});\n  return mq.where.apply(mq, arguments);\n};\n\n/**\n * Creates a `Query` and specifies a `$where` condition.\n *\n * Sometimes you need to query for things in mongodb using a JavaScript expression. You can do so via `find({ $where: javascript })`, or you can use the mongoose shortcut method $where via a Query chain or from your mongoose Model.\n *\n *     Blog.$where('this.username.indexOf(\"val\") !== -1').exec(function (err, docs) {});\n *\n * @param {String|Function} argument is a javascript string or anonymous function\n * @method $where\n * @memberOf Model\n * @return {Query}\n * @see Query.$where https://mongoosejs.com/docs/api/query.html#Query.prototype.$where\n * @api public\n */\n\nModel.$where = function $where() {\n  _checkContext(this, '$where');\n  const mq = new this.Query({}, {}, this, this.$__collection).find({});\n  return mq.$where.apply(mq, arguments);\n};\n\n/**\n * Issues a mongodb findOneAndUpdate command.\n *\n * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found document (if any) to the callback. The query executes if `callback` is passed else a Query object is returned.\n *\n * #### Example:\n *\n *     A.findOneAndUpdate(conditions, update, options)  // returns Query\n *     A.findOneAndUpdate(conditions, update)           // returns Query\n *     A.findOneAndUpdate()                             // returns Query\n *\n * #### Note:\n *\n * All top level update keys which are not `atomic` operation names are treated as set operations:\n *\n * #### Example:\n *\n *     const query = { name: 'borne' };\n *     Model.findOneAndUpdate(query, { name: 'jason bourne' }, options)\n *\n *     // is sent as\n *     Model.findOneAndUpdate(query, { $set: { name: 'jason bourne' }}, options)\n *\n * #### Note:\n *\n * `findOneAndX` and `findByIdAndX` functions support limited validation that\n * you can enable by setting the `runValidators` option.\n *\n * If you need full-fledged validation, use the traditional approach of first\n * retrieving the document.\n *\n *     const doc = await Model.findById(id);\n *     doc.name = 'jason bourne';\n *     await doc.save();\n *\n * @param {Object} [conditions]\n * @param {Object} [update]\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {String} [options.returnDocument='before'] Has two possible values, `'before'` and `'after'`. By default, it will return the document before the update was applied.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.lean()) and [the Mongoose lean tutorial](https://mongoosejs.com/docs/tutorials/lean.html).\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object|String|String[]} [options.projection=null] optional fields to return, see [`Query.prototype.select()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.select())\n * @param {Boolean} [options.new=false] if true, return the modified document rather than the original\n * @param {Object|String} [options.fields] Field selection. Equivalent to `.select(fields).findOneAndUpdate()`\n * @param {Number} [options.maxTimeMS] puts a time limit on the query - requires mongodb >= 2.6.0\n * @param {Object|String} [options.sort] if multiple docs are found by the conditions, sets the sort order to choose which doc to update.\n * @param {Boolean} [options.runValidators] if true, runs [update validators](https://mongoosejs.com/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema\n * @param {Boolean} [options.setDefaultsOnInsert=true] If `setDefaultsOnInsert` and `upsert` are true, mongoose will apply the [defaults](https://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created\n * @param {Boolean} [options.includeResultMetadata] if true, returns the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html)\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @see Tutorial https://mongoosejs.com/docs/tutorials/findoneandupdate.html\n * @see mongodb https://www.mongodb.com/docs/manual/reference/command/findAndModify/\n * @api public\n */\n\nModel.findOneAndUpdate = function (conditions, update, options) {\n  _checkContext(this, 'findOneAndUpdate');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function' || typeof arguments[3] === 'function') {\n    throw new MongooseError('Model.findOneAndUpdate() no longer accepts a callback');\n  }\n  if (arguments.length === 1) {\n    update = conditions;\n    conditions = null;\n    options = null;\n  }\n  let fields;\n  if (options) {\n    fields = options.fields || options.projection;\n  }\n  update = clone(update, {\n    depopulate: true,\n    _isNested: true\n  });\n  decorateUpdateWithVersionKey(update, options, this.schema.options.versionKey);\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(fields);\n  return mq.findOneAndUpdate(conditions, update, options);\n};\n\n/**\n * Issues a mongodb findOneAndUpdate command by a document's _id field.\n * `findByIdAndUpdate(id, ...)` is equivalent to `findOneAndUpdate({ _id: id }, ...)`.\n *\n * Finds a matching document, updates it according to the `update` arg,\n * passing any `options`, and returns the found document (if any).\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndUpdate()`\n *\n * #### Example:\n *\n *     A.findByIdAndUpdate(id, update, options)  // returns Query\n *     A.findByIdAndUpdate(id, update)           // returns Query\n *     A.findByIdAndUpdate()                     // returns Query\n *\n * #### Note:\n *\n * All top level update keys which are not `atomic` operation names are treated as set operations:\n *\n * #### Example:\n *\n *     Model.findByIdAndUpdate(id, { name: 'jason bourne' }, options)\n *\n *     // is sent as\n *     Model.findByIdAndUpdate(id, { $set: { name: 'jason bourne' }}, options)\n *\n * #### Note:\n *\n * `findOneAndX` and `findByIdAndX` functions support limited validation. You can\n * enable validation by setting the `runValidators` option.\n *\n * If you need full-fledged validation, use the traditional approach of first\n * retrieving the document.\n *\n *     const doc = await Model.findById(id)\n *     doc.name = 'jason bourne';\n *     await doc.save();\n *\n * @param {Object|Number|String} id value of `_id` to query by\n * @param {Object} [update]\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {String} [options.returnDocument='before'] Has two possible values, `'before'` and `'after'`. By default, it will return the document before the update was applied.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.lean()) and [the Mongoose lean tutorial](https://mongoosejs.com/docs/tutorials/lean.html).\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Object|String} [options.sort] if multiple docs are found by the conditions, sets the sort order to choose which doc to update.\n * @param {Boolean} [options.runValidators] if true, runs [update validators](https://mongoosejs.com/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema\n * @param {Boolean} [options.setDefaultsOnInsert=true] If `setDefaultsOnInsert` and `upsert` are true, mongoose will apply the [defaults](https://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created\n * @param {Boolean} [options.includeResultMetadata] if true, returns the full [ModifyResult from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html) rather than just the document\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Boolean} [options.new=false] if true, return the modified document rather than the original\n * @param {Object|String} [options.select] sets the document fields to return.\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @see Model.findOneAndUpdate https://mongoosejs.com/docs/api/model.html#Model.findOneAndUpdate()\n * @see mongodb https://www.mongodb.com/docs/manual/reference/command/findAndModify/\n * @api public\n */\n\nModel.findByIdAndUpdate = function (id, update, options) {\n  _checkContext(this, 'findByIdAndUpdate');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function' || typeof arguments[3] === 'function') {\n    throw new MongooseError('Model.findByIdAndUpdate() no longer accepts a callback');\n  }\n\n  // if a model is passed in instead of an id\n  if (id instanceof Document) {\n    id = id._id;\n  }\n  return this.findOneAndUpdate.call(this, {\n    _id: id\n  }, update, options);\n};\n\n/**\n * Issue a MongoDB `findOneAndDelete()` command.\n *\n * Finds a matching document, removes it, and returns the found document (if any).\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndDelete()`\n *\n * #### Example:\n *\n *     A.findOneAndDelete(conditions, options)  // return Query\n *     A.findOneAndDelete(conditions) // returns Query\n *     A.findOneAndDelete()           // returns Query\n *\n * `findOneAndX` and `findByIdAndX` functions support limited validation. You can\n * enable validation by setting the `runValidators` option.\n *\n * If you need full-fledged validation, use the traditional approach of first\n * retrieving the document.\n *\n *     const doc = await Model.findById(id)\n *     doc.name = 'jason bourne';\n *     await doc.save();\n *\n * @param {Object} conditions\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Object|String|String[]} [options.projection=null] optional fields to return, see [`Query.prototype.select()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.select())\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {Boolean} [options.includeResultMetadata] if true, returns the full [ModifyResult from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html) rather than just the document\n * @param {Object|String} [options.sort] if multiple docs are found by the conditions, sets the sort order to choose which doc to update.\n * @param {Object|String} [options.select] sets the document fields to return.\n * @param {Number} [options.maxTimeMS] puts a time limit on the query - requires mongodb >= 2.6.0\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @api public\n */\n\nModel.findOneAndDelete = function (conditions, options) {\n  _checkContext(this, 'findOneAndDelete');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.findOneAndDelete() no longer accepts a callback');\n  }\n  let fields;\n  if (options) {\n    fields = options.select;\n    options.select = undefined;\n  }\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(fields);\n  return mq.findOneAndDelete(conditions, options);\n};\n\n/**\n * Issue a MongoDB `findOneAndDelete()` command by a document's _id field.\n * In other words, `findByIdAndDelete(id)` is a shorthand for\n * `findOneAndDelete({ _id: id })`.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndDelete()`\n *\n * @param {Object|Number|String} id value of `_id` to query by\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @see Model.findOneAndDelete https://mongoosejs.com/docs/api/model.html#Model.findOneAndDelete()\n * @see mongodb https://www.mongodb.com/docs/manual/reference/command/findAndModify/\n */\n\nModel.findByIdAndDelete = function (id, options) {\n  _checkContext(this, 'findByIdAndDelete');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.findByIdAndDelete() no longer accepts a callback');\n  }\n  return this.findOneAndDelete({\n    _id: id\n  }, options);\n};\n\n/**\n * Issue a MongoDB `findOneAndReplace()` command.\n *\n * Finds a matching document, replaces it with the provided doc, and returns the document.\n *\n * This function triggers the following query middleware.\n *\n * - `findOneAndReplace()`\n *\n * #### Example:\n *\n *     A.findOneAndReplace(filter, replacement, options)  // return Query\n *     A.findOneAndReplace(filter, replacement) // returns Query\n *     A.findOneAndReplace()                    // returns Query\n *\n * @param {Object} filter Replace the first document that matches this filter\n * @param {Object} [replacement] Replace with this document\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {String} [options.returnDocument='before'] Has two possible values, `'before'` and `'after'`. By default, it will return the document before the update was applied.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.lean()) and [the Mongoose lean tutorial](https://mongoosejs.com/docs/tutorials/lean.html).\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Object|String|String[]} [options.projection=null] optional fields to return, see [`Query.prototype.select()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.select())\n * @param {Object|String} [options.sort] if multiple docs are found by the conditions, sets the sort order to choose which doc to update.\n * @param {Boolean} [options.includeResultMetadata] if true, returns the full [ModifyResult from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html) rather than just the document\n * @param {Object|String} [options.select] sets the document fields to return.\n * @param {Number} [options.maxTimeMS] puts a time limit on the query - requires mongodb >= 2.6.0\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @api public\n */\n\nModel.findOneAndReplace = function (filter, replacement, options) {\n  _checkContext(this, 'findOneAndReplace');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function' || typeof arguments[3] === 'function') {\n    throw new MongooseError('Model.findOneAndReplace() no longer accepts a callback');\n  }\n  let fields;\n  if (options) {\n    fields = options.select;\n    options.select = undefined;\n  }\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(fields);\n  return mq.findOneAndReplace(filter, replacement, options);\n};\n\n/**\n * Shortcut for saving one or more documents to the database.\n * `MyModel.create(docs)` does `new MyModel(doc).save()` for every doc in\n * docs.\n *\n * This function triggers the following middleware.\n *\n * - `save()`\n *\n * #### Example:\n *\n *     // Insert one new `Character` document\n *     await Character.create({ name: 'Jean-Luc Picard' });\n *\n *     // Insert multiple new `Character` documents\n *     await Character.create([{ name: 'Will Riker' }, { name: 'Geordi LaForge' }]);\n *\n *     // Create a new character within a transaction. Note that you **must**\n *     // pass an array as the first parameter to `create()` if you want to\n *     // specify options.\n *     await Character.create([{ name: 'Jean-Luc Picard' }], { session });\n *\n * @param {Array|Object} docs Documents to insert, as a spread or array\n * @param {Object} [options] Options passed down to `save()`. To specify `options`, `docs` **must** be an array, not a spread. See [Model.save](https://mongoosejs.com/docs/api/model.html#Model.prototype.save()) for available options.\n * @param {Boolean} [options.ordered] saves the docs in series rather than parallel.\n * @param {Boolean} [options.aggregateErrors] Aggregate Errors instead of throwing the first one that occurs. Default: false\n * @return {Promise}\n * @api public\n */\n\nModel.create = async function create(doc, options) {\n  if (typeof options === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.create() no longer accepts a callback');\n  }\n  _checkContext(this, 'create');\n  let args;\n  const discriminatorKey = this.schema.options.discriminatorKey;\n  if (Array.isArray(doc)) {\n    args = doc;\n    options = options != null && typeof options === 'object' ? options : {};\n  } else {\n    const last = arguments[arguments.length - 1];\n    options = {};\n    const hasCallback = typeof last === 'function' || typeof options === 'function' || typeof arguments[2] === 'function';\n    if (hasCallback) {\n      throw new MongooseError('Model.create() no longer accepts a callback');\n    } else {\n      args = [...arguments];\n      // For backwards compatibility with 6.x, because of gh-5061 Mongoose 6.x and\n      // older would treat a falsy last arg as a callback. We don't want to throw\n      // an error here, because it would look strange if `Test.create({}, void 0)`\n      // threw a callback error. But we also don't want to create an unnecessary document.\n      if (args.length > 1 && !last) {\n        args.pop();\n      }\n    }\n    if (args.length === 2 && args[0] != null && args[1] != null && args[0].session == null && last && getConstructorName(last.session) === 'ClientSession' && !this.schema.path('session')) {\n      // Probably means the user is running into the common mistake of trying\n      // to use a spread to specify options, see gh-7535\n      utils.warn('WARNING: to pass a `session` to `Model.create()` in ' + 'Mongoose, you **must** pass an array as the first argument. See: ' + 'https://mongoosejs.com/docs/api/model.html#Model.create()');\n    }\n  }\n  if (args.length === 0) {\n    return Array.isArray(doc) ? [] : null;\n  }\n  let res = [];\n  const immediateError = typeof options.aggregateErrors === 'boolean' ? !options.aggregateErrors : true;\n  delete options.aggregateErrors; // dont pass on the option to \"$save\"\n\n  if (options.ordered) {\n    for (let i = 0; i < args.length; i++) {\n      try {\n        const doc = args[i];\n        const Model = this.discriminators && doc[discriminatorKey] != null ? this.discriminators[doc[discriminatorKey]] || getDiscriminatorByValue(this.discriminators, doc[discriminatorKey]) : this;\n        if (Model == null) {\n          throw new MongooseError(`Discriminator \"${doc[discriminatorKey]}\" not ` + `found for model \"${this.modelName}\"`);\n        }\n        let toSave = doc;\n        if (!(toSave instanceof Model)) {\n          toSave = new Model(toSave);\n        }\n        await toSave.$save(options);\n        res.push(toSave);\n      } catch (err) {\n        if (!immediateError) {\n          res.push(err);\n        } else {\n          throw err;\n        }\n      }\n    }\n    return res;\n  } else if (!immediateError) {\n    res = await Promise.allSettled(args.map(async doc => {\n      const Model = this.discriminators && doc[discriminatorKey] != null ? this.discriminators[doc[discriminatorKey]] || getDiscriminatorByValue(this.discriminators, doc[discriminatorKey]) : this;\n      if (Model == null) {\n        throw new MongooseError(`Discriminator \"${doc[discriminatorKey]}\" not ` + `found for model \"${this.modelName}\"`);\n      }\n      let toSave = doc;\n      if (!(toSave instanceof Model)) {\n        toSave = new Model(toSave);\n      }\n      await toSave.$save(options);\n      return toSave;\n    }));\n    res = res.map(result => result.status === 'fulfilled' ? result.value : result.reason);\n  } else {\n    let firstError = null;\n    res = await Promise.all(args.map(async doc => {\n      const Model = this.discriminators && doc[discriminatorKey] != null ? this.discriminators[doc[discriminatorKey]] || getDiscriminatorByValue(this.discriminators, doc[discriminatorKey]) : this;\n      if (Model == null) {\n        throw new MongooseError(`Discriminator \"${doc[discriminatorKey]}\" not ` + `found for model \"${this.modelName}\"`);\n      }\n      try {\n        let toSave = doc;\n        if (!(toSave instanceof Model)) {\n          toSave = new Model(toSave);\n        }\n        await toSave.$save(options);\n        return toSave;\n      } catch (err) {\n        if (!firstError) {\n          firstError = err;\n        }\n      }\n    }));\n    if (firstError) {\n      throw firstError;\n    }\n  }\n  if (!Array.isArray(doc) && args.length === 1) {\n    return res[0];\n  }\n  return res;\n};\n\n/**\n * _Requires a replica set running MongoDB >= 3.6.0._ Watches the\n * underlying collection for changes using\n * [MongoDB change streams](https://www.mongodb.com/docs/manual/changeStreams/).\n *\n * This function does **not** trigger any middleware. In particular, it\n * does **not** trigger aggregate middleware.\n *\n * The ChangeStream object is an event emitter that emits the following events:\n *\n * - 'change': A change occurred, see below example\n * - 'error': An unrecoverable error occurred. In particular, change streams currently error out if they lose connection to the replica set primary. Follow [this GitHub issue](https://github.com/Automattic/mongoose/issues/6799) for updates.\n * - 'end': Emitted if the underlying stream is closed\n * - 'close': Emitted if the underlying stream is closed\n *\n * #### Example:\n *\n *     const doc = await Person.create({ name: 'Ned Stark' });\n *     const changeStream = Person.watch().on('change', change => console.log(change));\n *     // Will print from the above `console.log()`:\n *     // { _id: { _data: ... },\n *     //   operationType: 'delete',\n *     //   ns: { db: 'mydb', coll: 'Person' },\n *     //   documentKey: { _id: 5a51b125c5500f5aa094c7bd } }\n *     await doc.remove();\n *\n * @param {Array} [pipeline]\n * @param {Object} [options] see the [mongodb driver options](https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#watch)\n * @param {Boolean} [options.hydrate=false] if true and `fullDocument: 'updateLookup'` is set, Mongoose will automatically hydrate `fullDocument` into a fully fledged Mongoose document\n * @return {ChangeStream} mongoose-specific change stream wrapper, inherits from EventEmitter\n * @api public\n */\n\nModel.watch = function (pipeline, options) {\n  _checkContext(this, 'watch');\n  const changeStreamThunk = cb => {\n    pipeline = pipeline || [];\n    prepareDiscriminatorPipeline(pipeline, this.schema, 'fullDocument');\n    if (this.$__collection.buffer) {\n      this.$__collection.addQueue(() => {\n        if (this.closed) {\n          return;\n        }\n        const driverChangeStream = this.$__collection.watch(pipeline, options);\n        cb(null, driverChangeStream);\n      });\n    } else {\n      const driverChangeStream = this.$__collection.watch(pipeline, options);\n      cb(null, driverChangeStream);\n    }\n  };\n  options = options || {};\n  options.model = this;\n  return new ChangeStream(changeStreamThunk, pipeline, options);\n};\n\n/**\n * _Requires MongoDB >= 3.6.0._ Starts a [MongoDB session](https://www.mongodb.com/docs/manual/release-notes/3.6/#client-sessions)\n * for benefits like causal consistency, [retryable writes](https://www.mongodb.com/docs/manual/core/retryable-writes/),\n * and [transactions](https://thecodebarbarian.com/a-node-js-perspective-on-mongodb-4-transactions.html).\n *\n * Calling `MyModel.startSession()` is equivalent to calling `MyModel.db.startSession()`.\n *\n * This function does not trigger any middleware.\n *\n * #### Example:\n *\n *     const session = await Person.startSession();\n *     let doc = await Person.findOne({ name: 'Ned Stark' }, null, { session });\n *     await doc.remove();\n *     // `doc` will always be null, even if reading from a replica set\n *     // secondary. Without causal consistency, it is possible to\n *     // get a doc back from the below query if the query reads from a\n *     // secondary that is experiencing replication lag.\n *     doc = await Person.findOne({ name: 'Ned Stark' }, null, { session, readPreference: 'secondary' });\n *\n * @param {Object} [options] see the [mongodb driver options](https://mongodb.github.io/node-mongodb-native/4.9/classes/MongoClient.html#startSession)\n * @param {Boolean} [options.causalConsistency=true] set to false to disable causal consistency\n * @return {Promise<ClientSession>} promise that resolves to a MongoDB driver `ClientSession`\n * @api public\n */\n\nModel.startSession = function () {\n  _checkContext(this, 'startSession');\n  return this.db.startSession.apply(this.db, arguments);\n};\n\n/**\n * Shortcut for validating an array of documents and inserting them into\n * MongoDB if they're all valid. This function is faster than `.create()`\n * because it only sends one operation to the server, rather than one for each\n * document.\n *\n * Mongoose always validates each document **before** sending `insertMany`\n * to MongoDB. So if one document has a validation error, no documents will\n * be saved, unless you set\n * [the `ordered` option to false](https://www.mongodb.com/docs/manual/reference/method/db.collection.insertMany/#error-handling).\n *\n * This function does **not** trigger save middleware.\n *\n * This function triggers the following middleware.\n *\n * - `insertMany()`\n *\n * #### Example:\n *\n *     await Movies.insertMany([\n *       { name: 'Star Wars' },\n *       { name: 'The Empire Strikes Back' }\n *     ]);\n *\n * @param {Array|Object|*} doc(s)\n * @param {Object} [options] see the [mongodb driver options](https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#insertMany)\n * @param {Boolean} [options.ordered=true] if true, will fail fast on the first error encountered. If false, will insert all the documents it can and report errors later. An `insertMany()` with `ordered = false` is called an \"unordered\" `insertMany()`.\n * @param {Boolean} [options.rawResult=false] if false, the returned promise resolves to the documents that passed mongoose document validation. If `true`, will return the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/InsertManyResult.html) with a `mongoose` property that contains `validationErrors` and `results` if this is an unordered `insertMany`.\n * @param {Boolean} [options.lean=false] if `true`, skips hydrating and validating the documents. This option is useful if you need the extra performance, but Mongoose won't validate the documents before inserting.\n * @param {Number} [options.limit=null] this limits the number of documents being processed (validation/casting) by mongoose in parallel, this does **NOT** send the documents in batches to MongoDB. Use this option if you're processing a large number of documents and your app is running out of memory.\n * @param {String|Object|Array} [options.populate=null] populates the result documents. This option is a no-op if `rawResult` is set.\n * @param {Boolean} [options.throwOnValidationError=false] If true and `ordered: false`, throw an error if one of the operations failed validation, but all valid operations completed successfully.\n * @return {Promise} resolving to the raw result from the MongoDB driver if `options.rawResult` was `true`, or the documents that passed validation, otherwise\n * @api public\n */\n\nModel.insertMany = async function insertMany(arr, options) {\n  _checkContext(this, 'insertMany');\n  if (typeof options === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.insertMany() no longer accepts a callback');\n  }\n  return new Promise((resolve, reject) => {\n    this.$__insertMany(arr, options, (err, res) => {\n      if (err != null) {\n        return reject(err);\n      }\n      resolve(res);\n    });\n  });\n};\n\n/**\n * ignore\n *\n * @param {Array} arr\n * @param {Object} options\n * @param {Function} callback\n * @api private\n * @memberOf Model\n * @method $__insertMany\n * @static\n */\n\nModel.$__insertMany = function (arr, options, callback) {\n  const _this = this;\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n  callback = callback || utils.noop;\n  options = options || {};\n  const limit = options.limit || 1000;\n  const rawResult = !!options.rawResult;\n  const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n  const throwOnValidationError = typeof options.throwOnValidationError === 'boolean' ? options.throwOnValidationError : false;\n  const lean = !!options.lean;\n  if (!Array.isArray(arr)) {\n    arr = [arr];\n  }\n  const validationErrors = [];\n  const validationErrorsToOriginalOrder = new Map();\n  const results = ordered ? null : new Array(arr.length);\n  const toExecute = arr.map((doc, index) => callback => {\n    if (!(doc instanceof _this)) {\n      try {\n        doc = new _this(doc);\n      } catch (err) {\n        return callback(err);\n      }\n    }\n    if (options.session != null) {\n      doc.$session(options.session);\n    }\n    // If option `lean` is set to true bypass validation\n    if (lean) {\n      // we have to execute callback at the nextTick to be compatible\n      // with parallelLimit, as `results` variable has TDZ issue if we\n      // execute the callback synchronously\n      return immediate(() => callback(null, doc));\n    }\n    doc.$validate().then(() => {\n      callback(null, doc);\n    }, error => {\n      if (ordered === false) {\n        validationErrors.push(error);\n        validationErrorsToOriginalOrder.set(error, index);\n        results[index] = error;\n        return callback(null, null);\n      }\n      callback(error);\n    });\n  });\n  parallelLimit(toExecute, limit, function (error, docs) {\n    if (error) {\n      callback(error, null);\n      return;\n    }\n    const originalDocIndex = new Map();\n    const validDocIndexToOriginalIndex = new Map();\n    for (let i = 0; i < docs.length; ++i) {\n      originalDocIndex.set(docs[i], i);\n    }\n\n    // We filter all failed pre-validations by removing nulls\n    const docAttributes = docs.filter(function (doc) {\n      return doc != null;\n    });\n    for (let i = 0; i < docAttributes.length; ++i) {\n      validDocIndexToOriginalIndex.set(i, originalDocIndex.get(docAttributes[i]));\n    }\n\n    // Make sure validation errors are in the same order as the\n    // original documents, so if both doc1 and doc2 both fail validation,\n    // `Model.insertMany([doc1, doc2])` will always have doc1's validation\n    // error before doc2's. Re: gh-12791.\n    if (validationErrors.length > 0) {\n      validationErrors.sort((err1, err2) => {\n        return validationErrorsToOriginalOrder.get(err1) - validationErrorsToOriginalOrder.get(err2);\n      });\n    }\n\n    // Quickly escape while there aren't any valid docAttributes\n    if (docAttributes.length === 0) {\n      if (rawResult) {\n        const res = {\n          acknowledged: true,\n          insertedCount: 0,\n          insertedIds: {},\n          mongoose: {\n            validationErrors: validationErrors\n          }\n        };\n        return callback(null, res);\n      }\n      callback(null, []);\n      return;\n    }\n    const docObjects = docAttributes.map(function (doc) {\n      if (doc.$__schema.options.versionKey) {\n        doc[doc.$__schema.options.versionKey] = 0;\n      }\n      const shouldSetTimestamps = (!options || options.timestamps !== false) && doc.initializeTimestamps && (!doc.$__ || doc.$__.timestamps !== false);\n      if (shouldSetTimestamps) {\n        return doc.initializeTimestamps().toObject(internalToObjectOptions);\n      }\n      return doc.toObject(internalToObjectOptions);\n    });\n    _this.$__collection.insertMany(docObjects, options).then(res => {\n      for (const attribute of docAttributes) {\n        attribute.$__reset();\n        _setIsNew(attribute, false);\n      }\n      if (ordered === false && throwOnValidationError && validationErrors.length > 0) {\n        for (let i = 0; i < results.length; ++i) {\n          if (results[i] === void 0) {\n            results[i] = docs[i];\n          }\n        }\n        return callback(new MongooseBulkWriteError(validationErrors, results, res, 'insertMany'));\n      }\n      if (rawResult) {\n        if (ordered === false) {\n          for (let i = 0; i < results.length; ++i) {\n            if (results[i] === void 0) {\n              results[i] = docs[i];\n            }\n          }\n\n          // Decorate with mongoose validation errors in case of unordered,\n          // because then still do `insertMany()`\n          res.mongoose = {\n            validationErrors: validationErrors,\n            results: results\n          };\n        }\n        return callback(null, res);\n      }\n      if (options.populate != null) {\n        return _this.populate(docAttributes, options.populate).then(docs => {\n          callback(null, docs);\n        }, err => {\n          if (err != null) {\n            err.insertedDocs = docAttributes;\n          }\n          throw err;\n        });\n      }\n      callback(null, docAttributes);\n    }, error => {\n      // `writeErrors` is a property reported by the MongoDB driver,\n      // just not if there's only 1 error.\n      if (error.writeErrors == null && (error.result && error.result.result && error.result.result.writeErrors) != null) {\n        error.writeErrors = error.result.result.writeErrors;\n      }\n\n      // `insertedDocs` is a Mongoose-specific property\n      const hasWriteErrors = error && error.writeErrors;\n      const erroredIndexes = new Set((error && error.writeErrors || []).map(err => err.index));\n      if (error.writeErrors != null) {\n        for (let i = 0; i < error.writeErrors.length; ++i) {\n          const originalIndex = validDocIndexToOriginalIndex.get(error.writeErrors[i].index);\n          error.writeErrors[i] = {\n            ...error.writeErrors[i],\n            index: originalIndex\n          };\n          if (!ordered) {\n            results[originalIndex] = error.writeErrors[i];\n          }\n        }\n      }\n      if (!ordered) {\n        for (let i = 0; i < results.length; ++i) {\n          if (results[i] === void 0) {\n            results[i] = docs[i];\n          }\n        }\n        error.results = results;\n      }\n      let firstErroredIndex = -1;\n      error.insertedDocs = docAttributes.filter((doc, i) => {\n        const isErrored = !hasWriteErrors || erroredIndexes.has(i);\n        if (ordered) {\n          if (firstErroredIndex > -1) {\n            return i < firstErroredIndex;\n          }\n          if (isErrored) {\n            firstErroredIndex = i;\n          }\n        }\n        return !isErrored;\n      }).map(function setIsNewForInsertedDoc(doc) {\n        doc.$__reset();\n        _setIsNew(doc, false);\n        return doc;\n      });\n      if (rawResult && ordered === false) {\n        error.mongoose = {\n          validationErrors: validationErrors,\n          results: results\n        };\n      }\n      callback(error, null);\n    });\n  });\n};\n\n/*!\n * ignore\n */\n\nfunction _setIsNew(doc, val) {\n  doc.$isNew = val;\n  doc.$emit('isNew', val);\n  doc.constructor.emit('isNew', val);\n  const subdocs = doc.$getAllSubdocs();\n  for (const subdoc of subdocs) {\n    subdoc.$isNew = val;\n    subdoc.$emit('isNew', val);\n  }\n}\n\n/**\n * Sends multiple `insertOne`, `updateOne`, `updateMany`, `replaceOne`,\n * `deleteOne`, and/or `deleteMany` operations to the MongoDB server in one\n * command. This is faster than sending multiple independent operations (e.g.\n * if you use `create()`) because with `bulkWrite()` there is only one round\n * trip to MongoDB.\n *\n * Mongoose will perform casting on all operations you provide.\n *\n * This function does **not** trigger any middleware, neither `save()`, nor `update()`.\n * If you need to trigger\n * `save()` middleware for every document use [`create()`](https://mongoosejs.com/docs/api/model.html#Model.create()) instead.\n *\n * #### Example:\n *\n *     Character.bulkWrite([\n *       {\n *         insertOne: {\n *           document: {\n *             name: 'Eddard Stark',\n *             title: 'Warden of the North'\n *           }\n *         }\n *       },\n *       {\n *         updateOne: {\n *           filter: { name: 'Eddard Stark' },\n *           // If you were using the MongoDB driver directly, you'd need to do\n *           // `update: { $set: { title: ... } }` but mongoose adds $set for\n *           // you.\n *           update: { title: 'Hand of the King' }\n *         }\n *       },\n *       {\n *         deleteOne: {\n *           filter: { name: 'Eddard Stark' }\n *         }\n *       }\n *     ]).then(res => {\n *      // Prints \"1 1 1\"\n *      console.log(res.insertedCount, res.modifiedCount, res.deletedCount);\n *     });\n *\n * The [supported operations](https://www.mongodb.com/docs/manual/reference/method/db.collection.bulkWrite/#db.collection.bulkWrite) are:\n *\n * - `insertOne`\n * - `updateOne`\n * - `updateMany`\n * - `deleteOne`\n * - `deleteMany`\n * - `replaceOne`\n *\n * @param {Array} ops\n * @param {Object} [ops.insertOne.document] The document to insert\n * @param {Object} [ops.updateOne.filter] Update the first document that matches this filter\n * @param {Object} [ops.updateOne.update] An object containing [update operators](https://www.mongodb.com/docs/manual/reference/operator/update/)\n * @param {Boolean} [ops.updateOne.upsert=false] If true, insert a doc if none match\n * @param {Boolean} [ops.updateOne.timestamps=true] If false, do not apply [timestamps](https://mongoosejs.com/docs/guide.html#timestamps) to the operation\n * @param {Object} [ops.updateOne.collation] The [MongoDB collation](https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-34-collations) to use\n * @param {Array} [ops.updateOne.arrayFilters] The [array filters](https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-36-array-filters.html) used in `update`\n * @param {Object} [ops.updateMany.filter] Update all the documents that match this filter\n * @param {Object} [ops.updateMany.update] An object containing [update operators](https://www.mongodb.com/docs/manual/reference/operator/update/)\n * @param {Boolean} [ops.updateMany.upsert=false] If true, insert a doc if no documents match `filter`\n * @param {Boolean} [ops.updateMany.timestamps=true] If false, do not apply [timestamps](https://mongoosejs.com/docs/guide.html#timestamps) to the operation\n * @param {Object} [ops.updateMany.collation] The [MongoDB collation](https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-34-collations) to use\n * @param {Array} [ops.updateMany.arrayFilters] The [array filters](https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-36-array-filters.html) used in `update`\n * @param {Object} [ops.deleteOne.filter] Delete the first document that matches this filter\n * @param {Object} [ops.deleteMany.filter] Delete all documents that match this filter\n * @param {Object} [ops.replaceOne.filter] Replace the first document that matches this filter\n * @param {Object} [ops.replaceOne.replacement] The replacement document\n * @param {Boolean} [ops.replaceOne.upsert=false] If true, insert a doc if no documents match `filter`\n * @param {Object} [options]\n * @param {Boolean} [options.ordered=true] If true, execute writes in order and stop at the first error. If false, execute writes in parallel and continue until all writes have either succeeded or errored.\n * @param {ClientSession} [options.session=null] The session associated with this bulk write. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {String|number} [options.w=1] The [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/). See [`Query#w()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.w()) for more information.\n * @param {number} [options.wtimeout=null] The [write concern timeout](https://www.mongodb.com/docs/manual/reference/write-concern/#wtimeout).\n * @param {Boolean} [options.j=true] If false, disable [journal acknowledgement](https://www.mongodb.com/docs/manual/reference/write-concern/#j-option)\n * @param {Boolean} [options.skipValidation=false] Set to true to skip Mongoose schema validation on bulk write operations. Mongoose currently runs validation on `insertOne` and `replaceOne` operations by default.\n * @param {Boolean} [options.bypassDocumentValidation=false] If true, disable [MongoDB server-side schema validation](https://www.mongodb.com/docs/manual/core/schema-validation/) for all writes in this bulk.\n * @param {Boolean} [options.throwOnValidationError=false] If true and `ordered: false`, throw an error if one of the operations failed validation, but all valid operations completed successfully.\n * @param {Boolean} [options.strict=null] Overwrites the [`strict` option](https://mongoosejs.com/docs/guide.html#strict) on schema. If false, allows filtering and writing fields not defined in the schema for all writes in this bulk.\n * @return {Promise} resolves to a [`BulkWriteOpResult`](https://mongodb.github.io/node-mongodb-native/4.9/classes/BulkWriteResult.html) if the operation succeeds\n * @api public\n */\n\nModel.bulkWrite = async function bulkWrite(ops, options) {\n  _checkContext(this, 'bulkWrite');\n  if (typeof options === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.bulkWrite() no longer accepts a callback');\n  }\n  options = options || {};\n  const ordered = options.ordered == null ? true : options.ordered;\n  const validations = ops.map(op => castBulkWrite(this, op, options));\n  return new Promise((resolve, reject) => {\n    if (ordered) {\n      each(validations, (fn, cb) => fn(cb), error => {\n        if (error) {\n          return reject(error);\n        }\n        if (ops.length === 0) {\n          return resolve(getDefaultBulkwriteResult());\n        }\n        try {\n          this.$__collection.bulkWrite(ops, options, (error, res) => {\n            if (error) {\n              return reject(error);\n            }\n            resolve(res);\n          });\n        } catch (err) {\n          return reject(err);\n        }\n      });\n      return;\n    }\n    let remaining = validations.length;\n    let validOps = [];\n    let validationErrors = [];\n    const results = [];\n    if (remaining === 0) {\n      completeUnorderedValidation.call(this);\n    } else {\n      for (let i = 0; i < validations.length; ++i) {\n        validations[i](err => {\n          if (err == null) {\n            validOps.push(i);\n          } else {\n            validationErrors.push({\n              index: i,\n              error: err\n            });\n            results[i] = err;\n          }\n          if (--remaining <= 0) {\n            completeUnorderedValidation.call(this);\n          }\n        });\n      }\n    }\n    validationErrors = validationErrors.sort((v1, v2) => v1.index - v2.index).map(v => v.error);\n    function completeUnorderedValidation() {\n      const validOpIndexes = validOps;\n      validOps = validOps.sort().map(index => ops[index]);\n      if (validOps.length === 0) {\n        return resolve(getDefaultBulkwriteResult());\n      }\n      this.$__collection.bulkWrite(validOps, options, (error, res) => {\n        if (error) {\n          if (validationErrors.length > 0) {\n            error.mongoose = error.mongoose || {};\n            error.mongoose.validationErrors = validationErrors;\n          }\n          return reject(error);\n        }\n        for (let i = 0; i < validOpIndexes.length; ++i) {\n          results[validOpIndexes[i]] = null;\n        }\n        if (validationErrors.length > 0) {\n          if (options.throwOnValidationError) {\n            return reject(new MongooseBulkWriteError(validationErrors, results, res, 'bulkWrite'));\n          } else {\n            res.mongoose = res.mongoose || {};\n            res.mongoose.validationErrors = validationErrors;\n            res.mongoose.results = results;\n          }\n        }\n        resolve(res);\n      });\n    }\n  });\n};\n\n/**\n *  takes an array of documents, gets the changes and inserts/updates documents in the database\n *  according to whether or not the document is new, or whether it has changes or not.\n *\n * `bulkSave` uses `bulkWrite` under the hood, so it's mostly useful when dealing with many documents (10K+)\n *\n * @param {Array<Document>} documents\n * @param {Object} [options] options passed to the underlying `bulkWrite()`\n * @param {Boolean} [options.timestamps] defaults to `null`, when set to false, mongoose will not add/update timestamps to the documents.\n * @param {ClientSession} [options.session=null] The session associated with this bulk write. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {String|number} [options.w=1] The [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/). See [`Query#w()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.w()) for more information.\n * @param {number} [options.wtimeout=null] The [write concern timeout](https://www.mongodb.com/docs/manual/reference/write-concern/#wtimeout).\n * @param {Boolean} [options.j=true] If false, disable [journal acknowledgement](https://www.mongodb.com/docs/manual/reference/write-concern/#j-option)\n *\n */\nModel.bulkSave = async function bulkSave(documents, options) {\n  options = options || {};\n  if (options.timestamps != null) {\n    for (const document of documents) {\n      document.$__.saveOptions = document.$__.saveOptions || {};\n      document.$__.saveOptions.timestamps = options.timestamps;\n    }\n  } else {\n    for (const document of documents) {\n      if (document.$__.timestamps != null) {\n        document.$__.saveOptions = document.$__.saveOptions || {};\n        document.$__.saveOptions.timestamps = document.$__.timestamps;\n      }\n    }\n  }\n  await Promise.all(documents.map(buildPreSavePromise));\n  const writeOperations = this.buildBulkWriteOperations(documents, {\n    skipValidation: true,\n    timestamps: options.timestamps\n  });\n  const {\n    bulkWriteResult,\n    bulkWriteError\n  } = await this.bulkWrite(writeOperations, options).then(res => ({\n    bulkWriteResult: res,\n    bulkWriteError: null\n  }), err => ({\n    bulkWriteResult: null,\n    bulkWriteError: err\n  }));\n  await Promise.all(documents.map(async document => {\n    const documentError = bulkWriteError && bulkWriteError.writeErrors.find(writeError => {\n      const writeErrorDocumentId = writeError.err.op._id || writeError.err.op.q._id;\n      return writeErrorDocumentId.toString() === document._id.toString();\n    });\n    if (documentError == null) {\n      await handleSuccessfulWrite(document);\n    }\n  }));\n  if (bulkWriteError && bulkWriteError.writeErrors && bulkWriteError.writeErrors.length) {\n    throw bulkWriteError;\n  }\n  return bulkWriteResult;\n};\nfunction buildPreSavePromise(document) {\n  return new Promise((resolve, reject) => {\n    document.schema.s.hooks.execPre('save', document, err => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve();\n    });\n  });\n}\nfunction handleSuccessfulWrite(document) {\n  return new Promise((resolve, reject) => {\n    if (document.$isNew) {\n      _setIsNew(document, false);\n    }\n    document.$__reset();\n    document.schema.s.hooks.execPost('save', document, [document], {}, err => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve();\n    });\n  });\n}\n\n/**\n * Apply defaults to the given document or POJO.\n *\n * @param {Object|Document} obj object or document to apply defaults on\n * @returns {Object|Document}\n * @api public\n */\n\nModel.applyDefaults = function applyDefaults(doc) {\n  if (doc.$__ != null) {\n    applyDefaultsHelper(doc, doc.$__.fields, doc.$__.exclude);\n    for (const subdoc of doc.$getAllSubdocs()) {\n      applyDefaults(subdoc, subdoc.$__.fields, subdoc.$__.exclude);\n    }\n    return doc;\n  }\n  applyDefaultsToPOJO(doc, this.schema);\n  return doc;\n};\n\n/**\n * Cast the given POJO to the model's schema\n *\n * #### Example:\n *\n *     const Test = mongoose.model('Test', Schema({ num: Number }));\n *\n *     const obj = Test.castObject({ num: '42' });\n *     obj.num; // 42 as a number\n *\n *     Test.castObject({ num: 'not a number' }); // Throws a ValidationError\n *\n * @param {Object} obj object or document to cast\n * @param {Object} options options passed to castObject\n * @param {Boolean} options.ignoreCastErrors If set to `true` will not throw a ValidationError and only return values that were successfully cast.\n * @returns {Object} POJO casted to the model's schema\n * @throws {ValidationError} if casting failed for at least one path\n * @api public\n */\n\nModel.castObject = function castObject(obj, options) {\n  options = options || {};\n  const ret = {};\n  const schema = this.schema;\n  const paths = Object.keys(schema.paths);\n  for (const path of paths) {\n    const schemaType = schema.path(path);\n    if (!schemaType || !schemaType.$isMongooseArray) {\n      continue;\n    }\n    const val = get(obj, path);\n    pushNestedArrayPaths(paths, val, path);\n  }\n  let error = null;\n  for (const path of paths) {\n    const schemaType = schema.path(path);\n    if (schemaType == null) {\n      continue;\n    }\n    let val = get(obj, path, void 0);\n    if (val == null) {\n      continue;\n    }\n    const pieces = path.indexOf('.') === -1 ? [path] : path.split('.');\n    let cur = ret;\n    for (let i = 0; i < pieces.length - 1; ++i) {\n      if (cur[pieces[i]] == null) {\n        cur[pieces[i]] = isNaN(pieces[i + 1]) ? {} : [];\n      }\n      cur = cur[pieces[i]];\n    }\n    if (schemaType.$isMongooseDocumentArray) {\n      continue;\n    }\n    if (schemaType.$isSingleNested || schemaType.$isMongooseDocumentArrayElement) {\n      try {\n        val = Model.castObject.call(schemaType.caster, val);\n      } catch (err) {\n        if (!options.ignoreCastErrors) {\n          error = error || new ValidationError();\n          error.addError(path, err);\n        }\n        continue;\n      }\n      cur[pieces[pieces.length - 1]] = val;\n      continue;\n    }\n    try {\n      val = schemaType.cast(val);\n      cur[pieces[pieces.length - 1]] = val;\n    } catch (err) {\n      if (!options.ignoreCastErrors) {\n        error = error || new ValidationError();\n        error.addError(path, err);\n      }\n      continue;\n    }\n  }\n  if (error != null) {\n    throw error;\n  }\n  return ret;\n};\n\n/**\n * Build bulk write operations for `bulkSave()`.\n *\n * @param {Array<Document>} documents The array of documents to build write operations of\n * @param {Object} options\n * @param {Boolean} options.skipValidation defaults to `false`, when set to true, building the write operations will bypass validating the documents.\n * @param {Boolean} options.timestamps defaults to `null`, when set to false, mongoose will not add/update timestamps to the documents.\n * @return {Array<Promise>} Returns a array of all Promises the function executes to be awaited.\n * @api private\n */\n\nModel.buildBulkWriteOperations = function buildBulkWriteOperations(documents, options) {\n  if (!Array.isArray(documents)) {\n    throw new Error(`bulkSave expects an array of documents to be passed, received \\`${documents}\\` instead`);\n  }\n  setDefaultOptions();\n  const discriminatorKey = this.schema.options.discriminatorKey;\n  const writeOperations = documents.reduce((accumulator, document, i) => {\n    if (!options.skipValidation) {\n      if (!(document instanceof Document)) {\n        throw new Error(`documents.${i} was not a mongoose document, documents must be an array of mongoose documents (instanceof mongoose.Document).`);\n      }\n      const validationError = document.validateSync();\n      if (validationError) {\n        throw validationError;\n      }\n    }\n    const isANewDocument = document.isNew;\n    if (isANewDocument) {\n      const writeOperation = {\n        insertOne: {\n          document\n        }\n      };\n      utils.injectTimestampsOption(writeOperation.insertOne, options.timestamps);\n      accumulator.push(writeOperation);\n      return accumulator;\n    }\n    const delta = document.$__delta();\n    const isDocumentWithChanges = delta != null && !utils.isEmptyObject(delta[0]);\n    if (isDocumentWithChanges) {\n      const where = document.$__where(delta[0]);\n      const changes = delta[1];\n      _applyCustomWhere(document, where);\n\n      // Set the discriminator key, so bulk write casting knows which\n      // schema to use re: gh-13907\n      if (document[discriminatorKey] != null && !(discriminatorKey in where)) {\n        where[discriminatorKey] = document[discriminatorKey];\n      }\n      document.$__version(where, delta);\n      const writeOperation = {\n        updateOne: {\n          filter: where,\n          update: changes\n        }\n      };\n      utils.injectTimestampsOption(writeOperation.updateOne, options.timestamps);\n      accumulator.push(writeOperation);\n      return accumulator;\n    }\n    return accumulator;\n  }, []);\n  return writeOperations;\n  function setDefaultOptions() {\n    options = options || {};\n    if (options.skipValidation == null) {\n      options.skipValidation = false;\n    }\n  }\n};\n\n/**\n * Shortcut for creating a new Document from existing raw data, pre-saved in the DB.\n * The document returned has no paths marked as modified initially.\n *\n * #### Example:\n *\n *     // hydrate previous data into a Mongoose document\n *     const mongooseCandy = Candy.hydrate({ _id: '54108337212ffb6d459f854c', type: 'jelly bean' });\n *\n * @param {Object} obj\n * @param {Object|String|String[]} [projection] optional projection containing which fields should be selected for this document\n * @param {Object} [options] optional options\n * @param {Boolean} [options.setters=false] if true, apply schema setters when hydrating\n * @return {Document} document instance\n * @api public\n */\n\nModel.hydrate = function (obj, projection, options) {\n  _checkContext(this, 'hydrate');\n  if (projection != null) {\n    if (obj != null && obj.$__ != null) {\n      obj = obj.toObject(internalToObjectOptions);\n    }\n    obj = applyProjection(obj, projection);\n  }\n  const document = require('./queryHelpers').createModel(this, obj, projection);\n  document.$init(obj, options);\n  return document;\n};\n\n/**\n * Same as `updateOne()`, except MongoDB will update _all_ documents that match\n * `filter` (as opposed to just the first one) regardless of the value of\n * the `multi` option.\n *\n * **Note** updateMany will _not_ fire update middleware. Use `pre('updateMany')`\n * and `post('updateMany')` instead.\n *\n * #### Example:\n *\n *     const res = await Person.updateMany({ name: /Stark$/ }, { isDeleted: true });\n *     res.matchedCount; // Number of documents matched\n *     res.modifiedCount; // Number of documents modified\n *     res.acknowledged; // Boolean indicating everything went smoothly.\n *     res.upsertedId; // null or an id containing a document that had to be upserted.\n *     res.upsertedCount; // Number indicating how many documents had to be upserted. Will either be 0 or 1.\n *\n * This function triggers the following middleware.\n *\n * - `updateMany()`\n *\n * @param {Object} filter\n * @param {Object|Array} update\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see MongoDB docs https://www.mongodb.com/docs/manual/reference/command/update/#update-command-output\n * @see UpdateResult https://mongodb.github.io/node-mongodb-native/4.9/interfaces/UpdateResult.html\n * @api public\n */\n\nModel.updateMany = function updateMany(conditions, doc, options) {\n  _checkContext(this, 'updateMany');\n  return _update(this, 'updateMany', conditions, doc, options);\n};\n\n/**\n * Update _only_ the first document that matches `filter`.\n *\n * - Use `replaceOne()` if you want to overwrite an entire document rather than using atomic operators like `$set`.\n *\n * #### Example:\n *\n *     const res = await Person.updateOne({ name: 'Jean-Luc Picard' }, { ship: 'USS Enterprise' });\n *     res.matchedCount; // Number of documents matched\n *     res.modifiedCount; // Number of documents modified\n *     res.acknowledged; // Boolean indicating everything went smoothly.\n *     res.upsertedId; // null or an id containing a document that had to be upserted.\n *     res.upsertedCount; // Number indicating how many documents had to be upserted. Will either be 0 or 1.\n *\n * This function triggers the following middleware.\n *\n * - `updateOne()`\n *\n * @param {Object} filter\n * @param {Object|Array} update\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see MongoDB docs https://www.mongodb.com/docs/manual/reference/command/update/#update-command-output\n * @see UpdateResult https://mongodb.github.io/node-mongodb-native/4.9/interfaces/UpdateResult.html\n * @api public\n */\n\nModel.updateOne = function updateOne(conditions, doc, options) {\n  _checkContext(this, 'updateOne');\n  return _update(this, 'updateOne', conditions, doc, options);\n};\n\n/**\n * Replace the existing document with the given document (no atomic operators like `$set`).\n *\n * #### Example:\n *\n *     const res = await Person.replaceOne({ _id: 24601 }, { name: 'Jean Valjean' });\n *     res.matchedCount; // Number of documents matched\n *     res.modifiedCount; // Number of documents modified\n *     res.acknowledged; // Boolean indicating everything went smoothly.\n *     res.upsertedId; // null or an id containing a document that had to be upserted.\n *     res.upsertedCount; // Number indicating how many documents had to be upserted. Will either be 0 or 1.\n *\n * This function triggers the following middleware.\n *\n * - `replaceOne()`\n *\n * @param {Object} filter\n * @param {Object} doc\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see UpdateResult https://mongodb.github.io/node-mongodb-native/4.9/interfaces/UpdateResult.html\n * @return {Query}\n * @api public\n */\n\nModel.replaceOne = function replaceOne(conditions, doc, options) {\n  _checkContext(this, 'replaceOne');\n  const versionKey = this && this.schema && this.schema.options && this.schema.options.versionKey || null;\n  if (versionKey && !doc[versionKey]) {\n    doc[versionKey] = 0;\n  }\n  return _update(this, 'replaceOne', conditions, doc, options);\n};\n\n/**\n * Common code for `updateOne()`, `updateMany()`, `replaceOne()`, and `update()`\n * because they need to do the same thing\n * @api private\n */\n\nfunction _update(model, op, conditions, doc, options) {\n  const mq = new model.Query({}, {}, model, model.collection);\n\n  // gh-2406\n  // make local deep copy of conditions\n  if (conditions instanceof Document) {\n    conditions = conditions.toObject();\n  } else {\n    conditions = clone(conditions);\n  }\n  options = typeof options === 'function' ? options : clone(options);\n  const versionKey = model && model.schema && model.schema.options && model.schema.options.versionKey || null;\n  decorateUpdateWithVersionKey(doc, options, versionKey);\n  return mq[op](conditions, doc, options);\n}\n\n/**\n * Performs [aggregations](https://www.mongodb.com/docs/manual/aggregation/) on the models collection.\n *\n * If a `callback` is passed, the `aggregate` is executed and a `Promise` is returned. If a callback is not passed, the `aggregate` itself is returned.\n *\n * This function triggers the following middleware.\n *\n * - `aggregate()`\n *\n * #### Example:\n *\n *     // Find the max balance of all accounts\n *     const res = await Users.aggregate([\n *       { $group: { _id: null, maxBalance: { $max: '$balance' }}},\n *       { $project: { _id: 0, maxBalance: 1 }}\n *     ]);\n *\n *     console.log(res); // [ { maxBalance: 98000 } ]\n *\n *     // Or use the aggregation pipeline builder.\n *     const res = await Users.aggregate().\n *       group({ _id: null, maxBalance: { $max: '$balance' } }).\n *       project('-id maxBalance').\n *       exec();\n *     console.log(res); // [ { maxBalance: 98 } ]\n *\n * #### Note:\n *\n * - Mongoose does **not** cast aggregation pipelines to the model's schema because `$project` and `$group` operators allow redefining the \"shape\" of the documents at any stage of the pipeline, which may leave documents in an incompatible format. You can use the [mongoose-cast-aggregation plugin](https://github.com/AbdelrahmanHafez/mongoose-cast-aggregation) to enable minimal casting for aggregation pipelines.\n * - The documents returned are plain javascript objects, not mongoose documents (since any shape of document can be returned).\n *\n * #### More About Aggregations:\n *\n * - [Mongoose `Aggregate`](https://mongoosejs.com/docs/api/aggregate.html)\n * - [An Introduction to Mongoose Aggregate](https://masteringjs.io/tutorials/mongoose/aggregate)\n * - [MongoDB Aggregation docs](https://www.mongodb.com/docs/manual/applications/aggregation/)\n *\n * @see Aggregate https://mongoosejs.com/docs/api/aggregate.html#Aggregate()\n * @see MongoDB https://www.mongodb.com/docs/manual/applications/aggregation/\n * @param {Array} [pipeline] aggregation pipeline as an array of objects\n * @param {Object} [options] aggregation options\n * @return {Aggregate}\n * @api public\n */\n\nModel.aggregate = function aggregate(pipeline, options) {\n  _checkContext(this, 'aggregate');\n  if (typeof options === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.aggregate() no longer accepts a callback');\n  }\n  const aggregate = new Aggregate(pipeline || []);\n  aggregate.model(this);\n  if (options != null) {\n    aggregate.option(options);\n  }\n  if (typeof callback === 'undefined') {\n    return aggregate;\n  }\n  return aggregate;\n};\n\n/**\n * Casts and validates the given object against this model's schema, passing the\n * given `context` to custom validators.\n *\n * #### Example:\n *\n *     const Model = mongoose.model('Test', Schema({\n *       name: { type: String, required: true },\n *       age: { type: Number, required: true }\n *     });\n *\n *     try {\n *       await Model.validate({ name: null }, ['name'])\n *     } catch (err) {\n *       err instanceof mongoose.Error.ValidationError; // true\n *       Object.keys(err.errors); // ['name']\n *     }\n *\n * @param {Object} obj\n * @param {Object|Array|String} pathsOrOptions\n * @param {Object} [context]\n * @return {Promise<Object>} casted and validated copy of `obj` if validation succeeded\n * @api public\n */\n\nModel.validate = async function validate(obj, pathsOrOptions, context) {\n  if (arguments.length < 3 || arguments.length === 3 && typeof arguments[2] === 'function') {\n    // For convenience, if we're validating a document or an object, make `context` default to\n    // the model so users don't have to always pass `context`, re: gh-10132, gh-10346\n    context = obj;\n  }\n  if (typeof context === 'function' || typeof arguments[3] === 'function') {\n    throw new MongooseError('Model.validate() no longer accepts a callback');\n  }\n  let schema = this.schema;\n  const discriminatorKey = schema.options.discriminatorKey;\n  if (schema.discriminators != null && obj != null && obj[discriminatorKey] != null) {\n    schema = getSchemaDiscriminatorByValue(schema, obj[discriminatorKey]) || schema;\n  }\n  let paths = Object.keys(schema.paths);\n  if (pathsOrOptions != null) {\n    const _pathsToValidate = typeof pathsOrOptions === 'string' ? new Set(pathsOrOptions.split(' ')) : Array.isArray(pathsOrOptions) ? new Set(pathsOrOptions) : new Set(paths);\n    paths = paths.filter(p => {\n      if (pathsOrOptions.pathsToSkip) {\n        if (Array.isArray(pathsOrOptions.pathsToSkip)) {\n          if (pathsOrOptions.pathsToSkip.find(x => x == p)) {\n            return false;\n          }\n        } else if (typeof pathsOrOptions.pathsToSkip == 'string') {\n          if (pathsOrOptions.pathsToSkip.includes(p)) {\n            return false;\n          }\n        }\n      }\n      const pieces = p.split('.');\n      let cur = pieces[0];\n      for (const piece of pieces) {\n        if (_pathsToValidate.has(cur)) {\n          return true;\n        }\n        cur += '.' + piece;\n      }\n      return _pathsToValidate.has(p);\n    });\n  }\n  for (const path of paths) {\n    const schemaType = schema.path(path);\n    if (!schemaType || !schemaType.$isMongooseArray || schemaType.$isMongooseDocumentArray) {\n      continue;\n    }\n    const val = get(obj, path);\n    pushNestedArrayPaths(paths, val, path);\n  }\n  let error = null;\n  paths = new Set(paths);\n  try {\n    obj = this.castObject(obj);\n  } catch (err) {\n    error = err;\n    for (const key of Object.keys(error.errors || {})) {\n      paths.delete(key);\n    }\n  }\n  let remaining = paths.size;\n  return new Promise((resolve, reject) => {\n    for (const path of paths) {\n      const schemaType = schema.path(path);\n      if (schemaType == null) {\n        _checkDone();\n        continue;\n      }\n      const pieces = path.indexOf('.') === -1 ? [path] : path.split('.');\n      let cur = obj;\n      for (let i = 0; i < pieces.length - 1; ++i) {\n        cur = cur[pieces[i]];\n      }\n      const val = get(obj, path, void 0);\n      schemaType.doValidate(val, err => {\n        if (err) {\n          error = error || new ValidationError();\n          error.addError(path, err);\n        }\n        _checkDone();\n      }, context, {\n        path: path\n      });\n    }\n    function _checkDone() {\n      if (--remaining <= 0) {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(obj);\n        }\n      }\n    }\n  });\n};\n\n/**\n * Populates document references.\n *\n * Changed in Mongoose 6: the model you call `populate()` on should be the\n * \"local field\" model, **not** the \"foreign field\" model.\n *\n * #### Available top-level options:\n *\n * - path: space delimited path(s) to populate\n * - select: optional fields to select\n * - match: optional query conditions to match\n * - model: optional name of the model to use for population\n * - options: optional query options like sort, limit, etc\n * - justOne: optional boolean, if true Mongoose will always set `path` to a document, or `null` if no document was found. If false, Mongoose will always set `path` to an array, which will be empty if no documents are found. Inferred from schema by default.\n * - strictPopulate: optional boolean, set to `false` to allow populating paths that aren't in the schema.\n *\n * #### Example:\n *\n *     const Dog = mongoose.model('Dog', new Schema({ name: String, breed: String }));\n *     const Person = mongoose.model('Person', new Schema({\n *       name: String,\n *       pet: { type: mongoose.ObjectId, ref: 'Dog' }\n *     }));\n *\n *     const pets = await Pet.create([\n *       { name: 'Daisy', breed: 'Beagle' },\n *       { name: 'Einstein', breed: 'Catalan Sheepdog' }\n *     ]);\n *\n *     // populate many plain objects\n *     const users = [\n *       { name: 'John Wick', dog: pets[0]._id },\n *       { name: 'Doc Brown', dog: pets[1]._id }\n *     ];\n *     await User.populate(users, { path: 'dog', select: 'name' });\n *     users[0].dog.name; // 'Daisy'\n *     users[0].dog.breed; // undefined because of `select`\n *\n * @param {Document|Array} docs Either a single document or array of documents to populate.\n * @param {Object|String} options Either the paths to populate or an object specifying all parameters\n * @param {string} [options.path=null] The path to populate.\n * @param {string|PopulateOptions} [options.populate=null] Recursively populate paths in the populated documents. See [deep populate docs](https://mongoosejs.com/docs/populate.html#deep-populate).\n * @param {boolean} [options.retainNullValues=false] By default, Mongoose removes null and undefined values from populated arrays. Use this option to make `populate()` retain `null` and `undefined` array entries.\n * @param {boolean} [options.getters=false] If true, Mongoose will call any getters defined on the `localField`. By default, Mongoose gets the raw value of `localField`. For example, you would need to set this option to `true` if you wanted to [add a `lowercase` getter to your `localField`](https://mongoosejs.com/docs/schematypes.html#schematype-options).\n * @param {boolean} [options.clone=false] When you do `BlogPost.find().populate('author')`, blog posts with the same author will share 1 copy of an `author` doc. Enable this option to make Mongoose clone populated docs before assigning them.\n * @param {Object|Function} [options.match=null] Add an additional filter to the populate query. Can be a filter object containing [MongoDB query syntax](https://www.mongodb.com/docs/manual/tutorial/query-documents/), or a function that returns a filter object.\n * @param {Boolean} [options.skipInvalidIds=false] By default, Mongoose throws a cast error if `localField` and `foreignField` schemas don't line up. If you enable this option, Mongoose will instead filter out any `localField` properties that cannot be casted to `foreignField`'s schema type.\n * @param {Number} [options.perDocumentLimit=null] For legacy reasons, `limit` with `populate()` may give incorrect results because it only executes a single query for every document being populated. If you set `perDocumentLimit`, Mongoose will ensure correct `limit` per document by executing a separate query for each document to `populate()`. For example, `.find().populate({ path: 'test', perDocumentLimit: 2 })` will execute 2 additional queries if `.find()` returns 2 documents.\n * @param {Boolean} [options.strictPopulate=true] Set to false to allow populating paths that aren't defined in the given model's schema.\n * @param {Object} [options.options=null] Additional options like `limit` and `lean`.\n * @param {Function} [options.transform=null] Function that Mongoose will call on every populated document that allows you to transform the populated document.\n * @param {Function} [callback(err,doc)] Optional callback, executed upon completion. Receives `err` and the `doc(s)`.\n * @return {Promise}\n * @api public\n */\n\nModel.populate = async function populate(docs, paths) {\n  _checkContext(this, 'populate');\n  if (typeof paths === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.populate() no longer accepts a callback');\n  }\n  const _this = this;\n  // normalized paths\n  paths = utils.populate(paths);\n  // data that should persist across subPopulate calls\n  const cache = {};\n  return new Promise((resolve, reject) => {\n    _populate(_this, docs, paths, cache, (err, res) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve(res);\n    });\n  });\n};\n\n/**\n * Populate helper\n *\n * @param {Model} model the model to use\n * @param {Document|Array} docs Either a single document or array of documents to populate.\n * @param {Object} paths\n * @param {never} cache Unused\n * @param {Function} [callback] Optional callback, executed upon completion. Receives `err` and the `doc(s)`.\n * @return {Function}\n * @api private\n */\n\nfunction _populate(model, docs, paths, cache, callback) {\n  let pending = paths.length;\n  if (paths.length === 0) {\n    return callback(null, docs);\n  }\n  // each path has its own query options and must be executed separately\n  for (const path of paths) {\n    populate(model, docs, path, next);\n  }\n  function next(err) {\n    if (err) {\n      return callback(err, null);\n    }\n    if (--pending) {\n      return;\n    }\n    callback(null, docs);\n  }\n}\n\n/*!\n * Populates `docs`\n */\nconst excludeIdReg = /\\s?-_id\\s?/;\nconst excludeIdRegGlobal = /\\s?-_id\\s?/g;\nfunction populate(model, docs, options, callback) {\n  const populateOptions = options;\n  if (options.strictPopulate == null) {\n    if (options._localModel != null && options._localModel.schema._userProvidedOptions.strictPopulate != null) {\n      populateOptions.strictPopulate = options._localModel.schema._userProvidedOptions.strictPopulate;\n    } else if (options._localModel != null && model.base.options.strictPopulate != null) {\n      populateOptions.strictPopulate = model.base.options.strictPopulate;\n    } else if (model.base.options.strictPopulate != null) {\n      populateOptions.strictPopulate = model.base.options.strictPopulate;\n    }\n  }\n\n  // normalize single / multiple docs passed\n  if (!Array.isArray(docs)) {\n    docs = [docs];\n  }\n  if (docs.length === 0 || docs.every(utils.isNullOrUndefined)) {\n    return callback();\n  }\n  const modelsMap = getModelsMapForPopulate(model, docs, populateOptions);\n  if (modelsMap instanceof MongooseError) {\n    return immediate(function () {\n      callback(modelsMap);\n    });\n  }\n  const len = modelsMap.length;\n  let vals = [];\n  function flatten(item) {\n    // no need to include undefined values in our query\n    return undefined !== item;\n  }\n  let _remaining = len;\n  let hasOne = false;\n  const params = [];\n  for (let i = 0; i < len; ++i) {\n    const mod = modelsMap[i];\n    let select = mod.options.select;\n    let ids = utils.array.flatten(mod.ids, flatten);\n    ids = utils.array.unique(ids);\n    const assignmentOpts = {};\n    assignmentOpts.sort = mod && mod.options && mod.options.options && mod.options.options.sort || void 0;\n    assignmentOpts.excludeId = excludeIdReg.test(select) || select && select._id === 0;\n\n    // Lean transform may delete `_id`, which would cause assignment\n    // to fail. So delay running lean transform until _after_\n    // `_assign()`\n    if (mod.options && mod.options.options && mod.options.options.lean && mod.options.options.lean.transform) {\n      mod.options.options._leanTransform = mod.options.options.lean.transform;\n      mod.options.options.lean = true;\n    }\n    if (ids.length === 0 || ids.every(utils.isNullOrUndefined)) {\n      // Ensure that we set to 0 or empty array even\n      // if we don't actually execute a query to make sure there's a value\n      // and we know this path was populated for future sets. See gh-7731, gh-8230\n      --_remaining;\n      _assign(model, [], mod, assignmentOpts);\n      continue;\n    }\n    hasOne = true;\n    if (typeof populateOptions.foreignField === 'string') {\n      mod.foreignField.clear();\n      mod.foreignField.add(populateOptions.foreignField);\n    }\n    const match = createPopulateQueryFilter(ids, mod.match, mod.foreignField, mod.model, mod.options.skipInvalidIds);\n    if (assignmentOpts.excludeId) {\n      // override the exclusion from the query so we can use the _id\n      // for document matching during assignment. we'll delete the\n      // _id back off before returning the result.\n      if (typeof select === 'string') {\n        select = select.replace(excludeIdRegGlobal, ' ');\n      } else {\n        // preserve original select conditions by copying\n        select = {\n          ...select\n        };\n        delete select._id;\n      }\n    }\n    if (mod.options.options && mod.options.options.limit != null) {\n      assignmentOpts.originalLimit = mod.options.options.limit;\n    } else if (mod.options.limit != null) {\n      assignmentOpts.originalLimit = mod.options.limit;\n    }\n    params.push([mod, match, select, assignmentOpts, _next]);\n  }\n  if (!hasOne) {\n    // If models but no docs, skip further deep populate.\n    if (modelsMap.length !== 0) {\n      return callback();\n    }\n    // If no models to populate but we have a nested populate,\n    // keep trying, re: gh-8946\n    if (populateOptions.populate != null) {\n      const opts = utils.populate(populateOptions.populate).map(pop => Object.assign({}, pop, {\n        path: populateOptions.path + '.' + pop.path\n      }));\n      model.populate(docs, opts).then(res => {\n        callback(null, res);\n      }, err => {\n        callback(err);\n      });\n      return;\n    }\n    return callback();\n  }\n  for (const arr of params) {\n    _execPopulateQuery.apply(null, arr);\n  }\n  function _next(err, valsFromDb) {\n    if (err != null) {\n      return callback(err, null);\n    }\n    vals = vals.concat(valsFromDb);\n    if (--_remaining === 0) {\n      _done();\n    }\n  }\n  function _done() {\n    for (const arr of params) {\n      const mod = arr[0];\n      const assignmentOpts = arr[3];\n      for (const val of vals) {\n        mod.options._childDocs.push(val);\n      }\n      try {\n        _assign(model, vals, mod, assignmentOpts);\n      } catch (err) {\n        return callback(err);\n      }\n    }\n    for (const arr of params) {\n      removeDeselectedForeignField(arr[0].foreignField, arr[0].options, vals);\n    }\n    for (const arr of params) {\n      const mod = arr[0];\n      if (mod.options && mod.options.options && mod.options.options._leanTransform) {\n        for (const doc of vals) {\n          mod.options.options._leanTransform(doc);\n        }\n      }\n    }\n    callback();\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _execPopulateQuery(mod, match, select, assignmentOpts, callback) {\n  let subPopulate = clone(mod.options.populate);\n  const queryOptions = Object.assign({\n    skip: mod.options.skip,\n    limit: mod.options.limit,\n    perDocumentLimit: mod.options.perDocumentLimit\n  }, mod.options.options);\n  if (mod.count) {\n    delete queryOptions.skip;\n  }\n  if (queryOptions.perDocumentLimit != null) {\n    queryOptions.limit = queryOptions.perDocumentLimit;\n    delete queryOptions.perDocumentLimit;\n  } else if (queryOptions.limit != null) {\n    queryOptions.limit = queryOptions.limit * mod.ids.length;\n  }\n  const query = mod.model.find(match, select, queryOptions);\n  // If we're doing virtual populate and projection is inclusive and foreign\n  // field is not selected, automatically select it because mongoose needs it.\n  // If projection is exclusive and client explicitly unselected the foreign\n  // field, that's the client's fault.\n  for (const foreignField of mod.foreignField) {\n    if (foreignField !== '_id' && query.selectedInclusively() && !isPathSelectedInclusive(query._fields, foreignField)) {\n      query.select(foreignField);\n    }\n  }\n\n  // If using count, still need the `foreignField` so we can match counts\n  // to documents, otherwise we would need a separate `count()` for every doc.\n  if (mod.count) {\n    for (const foreignField of mod.foreignField) {\n      query.select(foreignField);\n    }\n  }\n\n  // If we need to sub-populate, call populate recursively\n  if (subPopulate) {\n    // If subpopulating on a discriminator, skip check for non-existent\n    // paths. Because the discriminator may not have the path defined.\n    if (mod.model.baseModelName != null) {\n      if (Array.isArray(subPopulate)) {\n        subPopulate.forEach(pop => {\n          pop.strictPopulate = false;\n        });\n      } else if (typeof subPopulate === 'string') {\n        subPopulate = {\n          path: subPopulate,\n          strictPopulate: false\n        };\n      } else {\n        subPopulate.strictPopulate = false;\n      }\n    }\n    const basePath = mod.options._fullPath || mod.options.path;\n    if (Array.isArray(subPopulate)) {\n      for (const pop of subPopulate) {\n        pop._fullPath = basePath + '.' + pop.path;\n      }\n    } else if (typeof subPopulate === 'object') {\n      subPopulate._fullPath = basePath + '.' + subPopulate.path;\n    }\n    query.populate(subPopulate);\n  }\n  query.exec().then(docs => {\n    for (const val of docs) {\n      leanPopulateMap.set(val, mod.model);\n    }\n    callback(null, docs);\n  }, err => {\n    callback(err);\n  });\n}\n\n/*!\n * ignore\n */\n\nfunction _assign(model, vals, mod, assignmentOpts) {\n  const options = mod.options;\n  const isVirtual = mod.isVirtual;\n  const justOne = mod.justOne;\n  let _val;\n  const lean = options && options.options && options.options.lean || false;\n  const len = vals.length;\n  const rawOrder = {};\n  const rawDocs = {};\n  let key;\n  let val;\n\n  // Clone because `assignRawDocsToIdStructure` will mutate the array\n  const allIds = clone(mod.allIds);\n  // optimization:\n  // record the document positions as returned by\n  // the query result.\n  for (let i = 0; i < len; i++) {\n    val = vals[i];\n    if (val == null) {\n      continue;\n    }\n    for (const foreignField of mod.foreignField) {\n      _val = utils.getValue(foreignField, val);\n      if (Array.isArray(_val)) {\n        _val = utils.array.unique(utils.array.flatten(_val));\n        for (let __val of _val) {\n          if (__val instanceof Document) {\n            __val = __val._id;\n          }\n          key = String(__val);\n          if (rawDocs[key]) {\n            if (Array.isArray(rawDocs[key])) {\n              rawDocs[key].push(val);\n              rawOrder[key].push(i);\n            } else {\n              rawDocs[key] = [rawDocs[key], val];\n              rawOrder[key] = [rawOrder[key], i];\n            }\n          } else {\n            if (isVirtual && !justOne) {\n              rawDocs[key] = [val];\n              rawOrder[key] = [i];\n            } else {\n              rawDocs[key] = val;\n              rawOrder[key] = i;\n            }\n          }\n        }\n      } else {\n        if (_val instanceof Document) {\n          _val = _val._id;\n        }\n        key = String(_val);\n        if (rawDocs[key]) {\n          if (Array.isArray(rawDocs[key])) {\n            rawDocs[key].push(val);\n            rawOrder[key].push(i);\n          } else if (isVirtual || rawDocs[key].constructor !== val.constructor || String(rawDocs[key]._id) !== String(val._id)) {\n            // May need to store multiple docs with the same id if there's multiple models\n            // if we have discriminators or a ref function. But avoid converting to an array\n            // if we have multiple queries on the same model because of `perDocumentLimit` re: gh-9906\n            rawDocs[key] = [rawDocs[key], val];\n            rawOrder[key] = [rawOrder[key], i];\n          }\n        } else {\n          rawDocs[key] = val;\n          rawOrder[key] = i;\n        }\n      }\n      // flag each as result of population\n      if (!lean) {\n        val.$__.wasPopulated = val.$__.wasPopulated || true;\n      }\n    }\n  }\n  assignVals({\n    originalModel: model,\n    // If virtual, make sure to not mutate original field\n    rawIds: mod.isVirtual ? allIds : mod.allIds,\n    allIds: allIds,\n    unpopulatedValues: mod.unpopulatedValues,\n    foreignField: mod.foreignField,\n    rawDocs: rawDocs,\n    rawOrder: rawOrder,\n    docs: mod.docs,\n    path: options.path,\n    options: assignmentOpts,\n    justOne: mod.justOne,\n    isVirtual: mod.isVirtual,\n    allOptions: mod,\n    populatedModel: mod.model,\n    lean: lean,\n    virtual: mod.virtual,\n    count: mod.count,\n    match: mod.match\n  });\n}\n\n/**\n * Compiler utility.\n *\n * @param {String|Function} name model name or class extending Model\n * @param {Schema} schema\n * @param {String} collectionName\n * @param {Connection} connection\n * @param {Mongoose} base mongoose instance\n * @api private\n */\n\nModel.compile = function compile(name, schema, collectionName, connection, base) {\n  const versioningEnabled = schema.options.versionKey !== false;\n  if (versioningEnabled && !schema.paths[schema.options.versionKey]) {\n    // add versioning to top level documents only\n    const o = {};\n    o[schema.options.versionKey] = Number;\n    schema.add(o);\n  }\n  let model;\n  if (typeof name === 'function' && name.prototype instanceof Model) {\n    model = name;\n    name = model.name;\n    schema.loadClass(model, false);\n    model.prototype.$isMongooseModelPrototype = true;\n  } else {\n    // generate new class\n    model = function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] || getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    };\n  }\n  model.hooks = schema.s.hooks.clone();\n  model.base = base;\n  model.modelName = name;\n  if (!(model.prototype instanceof Model)) {\n    Object.setPrototypeOf(model, Model);\n    Object.setPrototypeOf(model.prototype, Model.prototype);\n  }\n  model.model = function model(name) {\n    return this.db.model(name);\n  };\n  model.db = connection;\n  model.prototype.db = connection;\n  model.prototype[modelDbSymbol] = connection;\n  model.discriminators = model.prototype.discriminators = undefined;\n  model[modelSymbol] = true;\n  model.events = new EventEmitter();\n  schema._preCompile();\n  const _userProvidedOptions = schema._userProvidedOptions || {};\n  const collectionOptions = {\n    schemaUserProvidedOptions: _userProvidedOptions,\n    capped: schema.options.capped,\n    Promise: model.base.Promise,\n    modelName: name\n  };\n  if (schema.options.autoCreate !== void 0) {\n    collectionOptions.autoCreate = schema.options.autoCreate;\n  }\n  const collection = connection.collection(collectionName, collectionOptions);\n  model.prototype.collection = collection;\n  model.prototype.$collection = collection;\n  model.prototype[modelCollectionSymbol] = collection;\n  model.prototype.$__setSchema(schema);\n\n  // apply methods and statics\n  applyMethods(model, schema);\n  applyStatics(model, schema);\n  applyHooks(model, schema);\n  applyStaticHooks(model, schema.s.hooks, schema.statics);\n  model.schema = model.prototype.$__schema;\n  model.collection = collection;\n  model.$__collection = collection;\n\n  // Create custom query constructor\n  model.Query = function () {\n    Query.apply(this, arguments);\n  };\n  Object.setPrototypeOf(model.Query.prototype, Query.prototype);\n  model.Query.base = Query.base;\n  model.Query.prototype.constructor = Query;\n  applyQueryMiddleware(model.Query, model);\n  applyQueryMethods(model, schema.query);\n  return model;\n};\n\n/**\n * Register custom query methods for this model\n *\n * @param {Model} model\n * @param {Schema} schema\n * @api private\n */\n\nfunction applyQueryMethods(model, methods) {\n  for (const i in methods) {\n    model.Query.prototype[i] = methods[i];\n  }\n}\n\n/**\n * Subclass this model with `conn`, `schema`, and `collection` settings.\n *\n * @param {Connection} conn\n * @param {Schema} [schema]\n * @param {String} [collection]\n * @return {Model}\n * @api private\n * @memberOf Model\n * @static\n * @method __subclass\n */\n\nModel.__subclass = function subclass(conn, schema, collection) {\n  // subclass model using this connection and collection name\n  const _this = this;\n  const Model = function Model(doc, fields, skipId) {\n    if (!(this instanceof Model)) {\n      return new Model(doc, fields, skipId);\n    }\n    _this.call(this, doc, fields, skipId);\n  };\n  Object.setPrototypeOf(Model, _this);\n  Object.setPrototypeOf(Model.prototype, _this.prototype);\n  Model.db = conn;\n  Model.prototype.db = conn;\n  Model.prototype[modelDbSymbol] = conn;\n  _this[subclassedSymbol] = _this[subclassedSymbol] || [];\n  _this[subclassedSymbol].push(Model);\n  if (_this.discriminators != null) {\n    Model.discriminators = {};\n    for (const key of Object.keys(_this.discriminators)) {\n      Model.discriminators[key] = _this.discriminators[key].__subclass(_this.db, _this.discriminators[key].schema, collection);\n    }\n  }\n  const s = schema && typeof schema !== 'string' ? schema : _this.prototype.$__schema;\n  const options = s.options || {};\n  const _userProvidedOptions = s._userProvidedOptions || {};\n  if (!collection) {\n    collection = _this.prototype.$__schema.get('collection') || utils.toCollectionName(_this.modelName, this.base.pluralize());\n  }\n  const collectionOptions = {\n    schemaUserProvidedOptions: _userProvidedOptions,\n    capped: s && options.capped\n  };\n  Model.prototype.collection = conn.collection(collection, collectionOptions);\n  Model.prototype.$collection = Model.prototype.collection;\n  Model.prototype[modelCollectionSymbol] = Model.prototype.collection;\n  Model.collection = Model.prototype.collection;\n  Model.$__collection = Model.collection;\n  // Errors handled internally, so ignore\n  Model.init().catch(() => {});\n  return Model;\n};\n\n/**\n * Helper for console.log. Given a model named 'MyModel', returns the string\n * `'Model { MyModel }'`.\n *\n * #### Example:\n *\n *     const MyModel = mongoose.model('Test', Schema({ name: String }));\n *     MyModel.inspect(); // 'Model { Test }'\n *     console.log(MyModel); // Prints 'Model { Test }'\n *\n * @api public\n */\n\nModel.inspect = function () {\n  return `Model { ${this.modelName} }`;\n};\nif (util.inspect.custom) {\n  // Avoid Node deprecation warning DEP0079\n  Model[util.inspect.custom] = Model.inspect;\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = Model;","map":{"version":3,"names":["Aggregate","require","ChangeStream","Document","DocumentNotFoundError","DivergentArrayError","EventEmitter","Kareem","MongooseBuffer","MongooseError","OverwriteModelError","Query","SaveOptions","Schema","ValidationError","VersionError","ParallelSaveError","applyDefaultsHelper","applyDefaultsToPOJO","applyQueryMiddleware","applyHooks","applyMethods","applyProjection","applySchemaCollation","applyStaticHooks","applyStatics","applyWriteConcern","assignVals","castBulkWrite","clone","createPopulateQueryFilter","decorateUpdateWithVersionKey","getDefaultBulkwriteResult","getSchemaDiscriminatorByValue","discriminator","firstKey","each","get","getConstructorName","getDiscriminatorByValue","getModelsMapForPopulate","immediate","internalToObjectOptions","isDefaultIdIndex","isIndexEqual","getRelatedDBIndexes","getRelatedSchemaIndexes","isPathExcluded","decorateDiscriminatorIndexOptions","isPathSelectedInclusive","leanPopulateMap","parallelLimit","parentPaths","prepareDiscriminatorPipeline","pushNestedArrayPaths","removeDeselectedForeignField","setDottedPath","STATES","util","utils","MongooseBulkWriteError","minimize","VERSION_WHERE","VERSION_INC","VERSION_ALL","arrayAtomicsSymbol","modelCollectionSymbol","Symbol","modelDbSymbol","modelSymbol","subclassedSymbol","saveToObjectOptions","Object","assign","bson","flattenObjectIds","Model","doc","fields","skipId","TypeError","call","setPrototypeOf","prototype","$isMongooseModelPrototype","db","collection","$__collection","modelName","$where","baseModelName","events","_middleware","_applyCustomWhere","where","key","keys","$__handleSave","options","callback","saveOptions","$__schema","writeConcern","w","j","wtimeout","checkKeys","session","$session","hasOwnProperty","$isNew","obj","toObject","_id","$__version","insertOne","then","ret","err","_setIsNew","$__reset","$__","inserting","delta","$__delta","$__where","update","length","handleEmptyUpdate","updateOne","$__undoReset","modifiedPaths","optionsWithCustomValues","optimisticConcurrency","Array","isArray","versionKey","val","$__getValue","constructor","findOne","documentExists","matchedCount","catch","$__save","error","result","hooks","s","execPost","numAffected","versionBump","version","doIncrement","undefined","$versionError","$__setValue","saving","savedState","$emit","emit","generateVersionError","save","arguments","parallelSave","$op","timestamps","$__handleReject","Promise","resolve","reject","$save","shouldSkipVersioning","self","path","skipVersioning","replace","operand","data","op","test","increment","handleAtomics","value","$set","$__getAtomics","forEach","atomic","atomics","ops","i","isMongooseObject","depopulate","_isNested","valueOf","iter","mem","transform","map","$each","dirty","$__dirty","optCon","Set","modPaths","find","has","len","divergent","d","_doc","match","checkDivergentArray","push","pop","$populated","selected","pathSplit","split","top","$elemMatch","join","$isDefault","indexOf","pathsToCheck","isSelected","isMongooseArray","$path","pathSymbol","Buffer","isBuffer","primitiveAtomics","virtuals","getters","omitUndefined","array","check","object","skip","select","$pop","$__isSelected","$inc","_where","deleteOne","Error","query","pre","queryPreDeleteOne","cb","execPre","callSubdocPreHooks","$getAllSubdocs","subdoc","skipIfAlreadyDeleted","isDeleted","skipWrappedFunction","post","callSubdocPostHooks","queryPostDeleteOne","$model","name","model","exists","filter","_checkContext","lean","setOptions","schema","getFunctionName","isPOJO","mergePlugins","isObject","instanceOfSchema","mergeHooks","models","overwriteModels","$isRootDiscriminator","$globalPluginsApplied","discriminators","defineProperty","configurable","writable","submodel","__subclass","ctx","fnName","global","init","$init","conn","_ensureIndexes","autoIndex","getOption","config","base","ensureIndexes","_automatic","_createCollection","readyState","connecting","disconnected","_shouldBufferCommands","_queue","fn","autoCreate","createCollection","_catch","_this","$caught","apply","collectionOptions","schemaCollation","collation","capped","size","timeseries","expireAfterSeconds","expires","clusteredIndex","unique","collectionName","code","syncIndexes","diffIndexesResult","diffIndexes","dropped","cleanIndexes","toDrop","createIndexes","toCreate","dbIndexes","listIndexes","codeName","schemaIndexes","indexes","getIndexesToDrop","getIndexesToCreate","schemaIndexKeysObject","schemaIndexOptions","found","index","includes","dbIndex","res","_dropIndexes","all","indexName","dropIndex","buffer","addQueue","toArray","indexError","done","warn","indexSingleDone","indexSingleStart","baseSchema","_baseSchema","baseSchemaIndexes","create","shift","_autoIndex","deepEqual","indexFields","indexOptions","background","createIndex","translateAliases","errorOnDuplicates","translate","alias","translated","fieldKeys","currentSchema","aliases","paths","translatedKey","Map","set","delete","field","conditions","mq","deleteMany","projection","findById","id","estimatedDocumentCount","countDocuments","distinct","findOneAndUpdate","findByIdAndUpdate","findOneAndDelete","findByIdAndDelete","findOneAndReplace","replacement","args","discriminatorKey","last","hasCallback","immediateError","aggregateErrors","ordered","toSave","allSettled","status","reason","firstError","watch","pipeline","changeStreamThunk","closed","driverChangeStream","startSession","insertMany","arr","$__insertMany","noop","limit","rawResult","throwOnValidationError","validationErrors","validationErrorsToOriginalOrder","results","toExecute","$validate","docs","originalDocIndex","validDocIndexToOriginalIndex","docAttributes","sort","err1","err2","acknowledged","insertedCount","insertedIds","mongoose","docObjects","shouldSetTimestamps","initializeTimestamps","attribute","populate","insertedDocs","writeErrors","hasWriteErrors","erroredIndexes","originalIndex","firstErroredIndex","isErrored","setIsNewForInsertedDoc","subdocs","bulkWrite","validations","remaining","validOps","completeUnorderedValidation","v1","v2","v","validOpIndexes","bulkSave","documents","document","buildPreSavePromise","writeOperations","buildBulkWriteOperations","skipValidation","bulkWriteResult","bulkWriteError","documentError","writeError","writeErrorDocumentId","q","toString","handleSuccessfulWrite","applyDefaults","exclude","castObject","schemaType","$isMongooseArray","pieces","cur","isNaN","$isMongooseDocumentArray","$isSingleNested","$isMongooseDocumentArrayElement","caster","ignoreCastErrors","addError","cast","setDefaultOptions","reduce","accumulator","validationError","validateSync","isANewDocument","isNew","writeOperation","injectTimestampsOption","isDocumentWithChanges","isEmptyObject","changes","hydrate","createModel","updateMany","_update","replaceOne","aggregate","option","validate","pathsOrOptions","context","_pathsToValidate","p","pathsToSkip","x","piece","errors","_checkDone","doValidate","cache","_populate","pending","next","excludeIdReg","excludeIdRegGlobal","populateOptions","strictPopulate","_localModel","_userProvidedOptions","every","isNullOrUndefined","modelsMap","vals","flatten","item","_remaining","hasOne","params","mod","ids","assignmentOpts","excludeId","_leanTransform","_assign","foreignField","clear","add","skipInvalidIds","originalLimit","_next","opts","_execPopulateQuery","valsFromDb","concat","_done","_childDocs","subPopulate","queryOptions","perDocumentLimit","count","selectedInclusively","_fields","basePath","_fullPath","exec","isVirtual","justOne","_val","rawOrder","rawDocs","allIds","getValue","__val","String","wasPopulated","originalModel","rawIds","unpopulatedValues","allOptions","populatedModel","virtual","compile","connection","versioningEnabled","o","Number","loadClass","execPreSync","Discriminator","_preCompile","schemaUserProvidedOptions","$collection","$__setSchema","statics","applyQueryMethods","methods","subclass","toCollectionName","pluralize","inspect","custom","module","exports"],"sources":["C:/Users/Lenovo/node_modules/mongoose/lib/model.js"],"sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst Aggregate = require('./aggregate');\nconst ChangeStream = require('./cursor/changeStream');\nconst Document = require('./document');\nconst DocumentNotFoundError = require('./error/notFound');\nconst DivergentArrayError = require('./error/divergentArray');\nconst EventEmitter = require('events').EventEmitter;\nconst Kareem = require('kareem');\nconst MongooseBuffer = require('./types/buffer');\nconst MongooseError = require('./error/index');\nconst OverwriteModelError = require('./error/overwriteModel');\nconst Query = require('./query');\nconst SaveOptions = require('./options/saveOptions');\nconst Schema = require('./schema');\nconst ValidationError = require('./error/validation');\nconst VersionError = require('./error/version');\nconst ParallelSaveError = require('./error/parallelSave');\nconst applyDefaultsHelper = require('./helpers/document/applyDefaults');\nconst applyDefaultsToPOJO = require('./helpers/model/applyDefaultsToPOJO');\nconst applyQueryMiddleware = require('./helpers/query/applyQueryMiddleware');\nconst applyHooks = require('./helpers/model/applyHooks');\nconst applyMethods = require('./helpers/model/applyMethods');\nconst applyProjection = require('./helpers/projection/applyProjection');\nconst applySchemaCollation = require('./helpers/indexes/applySchemaCollation');\nconst applyStaticHooks = require('./helpers/model/applyStaticHooks');\nconst applyStatics = require('./helpers/model/applyStatics');\nconst applyWriteConcern = require('./helpers/schema/applyWriteConcern');\nconst assignVals = require('./helpers/populate/assignVals');\nconst castBulkWrite = require('./helpers/model/castBulkWrite');\nconst clone = require('./helpers/clone');\nconst createPopulateQueryFilter = require('./helpers/populate/createPopulateQueryFilter');\nconst decorateUpdateWithVersionKey = require('./helpers/update/decorateUpdateWithVersionKey');\nconst getDefaultBulkwriteResult = require('./helpers/getDefaultBulkwriteResult');\nconst getSchemaDiscriminatorByValue = require('./helpers/discriminator/getSchemaDiscriminatorByValue');\nconst discriminator = require('./helpers/model/discriminator');\nconst firstKey = require('./helpers/firstKey');\nconst each = require('./helpers/each');\nconst get = require('./helpers/get');\nconst getConstructorName = require('./helpers/getConstructorName');\nconst getDiscriminatorByValue = require('./helpers/discriminator/getDiscriminatorByValue');\nconst getModelsMapForPopulate = require('./helpers/populate/getModelsMapForPopulate');\nconst immediate = require('./helpers/immediate');\nconst internalToObjectOptions = require('./options').internalToObjectOptions;\nconst isDefaultIdIndex = require('./helpers/indexes/isDefaultIdIndex');\nconst isIndexEqual = require('./helpers/indexes/isIndexEqual');\nconst {\n  getRelatedDBIndexes,\n  getRelatedSchemaIndexes\n} = require('./helpers/indexes/getRelatedIndexes');\nconst isPathExcluded = require('./helpers/projection/isPathExcluded');\nconst decorateDiscriminatorIndexOptions = require('./helpers/indexes/decorateDiscriminatorIndexOptions');\nconst isPathSelectedInclusive = require('./helpers/projection/isPathSelectedInclusive');\nconst leanPopulateMap = require('./helpers/populate/leanPopulateMap');\nconst parallelLimit = require('./helpers/parallelLimit');\nconst parentPaths = require('./helpers/path/parentPaths');\nconst prepareDiscriminatorPipeline = require('./helpers/aggregate/prepareDiscriminatorPipeline');\nconst pushNestedArrayPaths = require('./helpers/model/pushNestedArrayPaths');\nconst removeDeselectedForeignField = require('./helpers/populate/removeDeselectedForeignField');\nconst setDottedPath = require('./helpers/path/setDottedPath');\nconst STATES = require('./connectionState');\nconst util = require('util');\nconst utils = require('./utils');\nconst MongooseBulkWriteError = require('./error/bulkWriteError');\nconst minimize = require('./helpers/minimize');\n\nconst VERSION_WHERE = 1;\nconst VERSION_INC = 2;\nconst VERSION_ALL = VERSION_WHERE | VERSION_INC;\n\nconst arrayAtomicsSymbol = require('./helpers/symbols').arrayAtomicsSymbol;\nconst modelCollectionSymbol = Symbol('mongoose#Model#collection');\nconst modelDbSymbol = Symbol('mongoose#Model#db');\nconst modelSymbol = require('./helpers/symbols').modelSymbol;\nconst subclassedSymbol = Symbol('mongoose#Model#subclassed');\n\nconst saveToObjectOptions = Object.assign({}, internalToObjectOptions, {\n  bson: true,\n  flattenObjectIds: false\n});\n\n/**\n * A Model is a class that's your primary tool for interacting with MongoDB.\n * An instance of a Model is called a [Document](https://mongoosejs.com/docs/api/document.html#Document).\n *\n * In Mongoose, the term \"Model\" refers to subclasses of the `mongoose.Model`\n * class. You should not use the `mongoose.Model` class directly. The\n * [`mongoose.model()`](https://mongoosejs.com/docs/api/mongoose.html#Mongoose.prototype.model()) and\n * [`connection.model()`](https://mongoosejs.com/docs/api/connection.html#Connection.prototype.model()) functions\n * create subclasses of `mongoose.Model` as shown below.\n *\n * #### Example:\n *\n *     // `UserModel` is a \"Model\", a subclass of `mongoose.Model`.\n *     const UserModel = mongoose.model('User', new Schema({ name: String }));\n *\n *     // You can use a Model to create new documents using `new`:\n *     const userDoc = new UserModel({ name: 'Foo' });\n *     await userDoc.save();\n *\n *     // You also use a model to create queries:\n *     const userFromDb = await UserModel.findOne({ name: 'Foo' });\n *\n * @param {Object} doc values for initial set\n * @param {Object} [fields] optional object containing the fields that were selected in the query which returned this document. You do **not** need to set this parameter to ensure Mongoose handles your [query projection](https://mongoosejs.com/docs/api/query.html#Query.prototype.select()).\n * @param {Boolean} [skipId=false] optional boolean. If true, mongoose doesn't add an `_id` field to the document.\n * @inherits Document https://mongoosejs.com/docs/api/document.html\n * @event `error`: If listening to this event, 'error' is emitted when a document was saved and an `error` occurred. If not listening, the event bubbles to the connection used to create this Model.\n * @event `index`: Emitted after `Model#ensureIndexes` completes. If an error occurred it is passed with the event.\n * @event `index-single-start`: Emitted when an individual index starts within `Model#ensureIndexes`. The fields and options being used to build the index are also passed with the event.\n * @event `index-single-done`: Emitted when an individual index finishes within `Model#ensureIndexes`. If an error occurred it is passed with the event. The fields, options, and index name are also passed.\n * @api public\n */\n\nfunction Model(doc, fields, skipId) {\n  if (fields instanceof Schema) {\n    throw new TypeError('2nd argument to `Model` must be a POJO or string, ' +\n      '**not** a schema. Make sure you\\'re calling `mongoose.model()`, not ' +\n      '`mongoose.Model()`.');\n  }\n  Document.call(this, doc, fields, skipId);\n}\n\n/**\n * Inherits from Document.\n *\n * All Model.prototype features are available on\n * top level (non-sub) documents.\n * @api private\n */\n\nObject.setPrototypeOf(Model.prototype, Document.prototype);\nModel.prototype.$isMongooseModelPrototype = true;\n\n/**\n * Connection the model uses.\n *\n * @api public\n * @property db\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.db;\n\n/**\n * The collection instance this model uses.\n * A Mongoose collection is a thin wrapper around a [MongoDB Node.js driver collection]([MongoDB Node.js driver collection](https://mongodb.github.io/node-mongodb-native/Next/classes/Collection.html)).\n * Using `Model.collection` means you bypass Mongoose middleware, validation, and casting.\n *\n * This property is read-only. Modifying this property is a no-op.\n *\n * @api public\n * @property collection\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.collection;\n\n/**\n * Internal collection the model uses.\n *\n * This property is read-only. Modifying this property is a no-op.\n *\n * @api private\n * @property collection\n * @memberOf Model\n * @instance\n */\n\n\nModel.prototype.$__collection;\n\n/**\n * The name of the model\n *\n * @api public\n * @property modelName\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.modelName;\n\n/**\n * Additional properties to attach to the query when calling `save()` and\n * `isNew` is false.\n *\n * @api public\n * @property $where\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.$where;\n\n/**\n * If this is a discriminator model, `baseModelName` is the name of\n * the base model.\n *\n * @api public\n * @property baseModelName\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.baseModelName;\n\n/**\n * Event emitter that reports any errors that occurred. Useful for global error\n * handling.\n *\n * #### Example:\n *\n *     MyModel.events.on('error', err => console.log(err.message));\n *\n *     // Prints a 'CastError' because of the above handler\n *     await MyModel.findOne({ _id: 'Not a valid ObjectId' }).catch(noop);\n *\n * @api public\n * @property events\n * @fires error whenever any query or model function errors\n * @memberOf Model\n * @static\n */\n\nModel.events;\n\n/**\n * Compiled middleware for this model. Set in `applyHooks()`.\n *\n * @api private\n * @property _middleware\n * @memberOf Model\n * @static\n */\n\nModel._middleware;\n\n/*!\n * ignore\n */\n\nfunction _applyCustomWhere(doc, where) {\n  if (doc.$where == null) {\n    return;\n  }\n  for (const key of Object.keys(doc.$where)) {\n    where[key] = doc.$where[key];\n  }\n}\n\n/*!\n * ignore\n */\n\nModel.prototype.$__handleSave = function(options, callback) {\n  const saveOptions = {};\n\n  applyWriteConcern(this.$__schema, options);\n  if (typeof options.writeConcern !== 'undefined') {\n    saveOptions.writeConcern = {};\n    if ('w' in options.writeConcern) {\n      saveOptions.writeConcern.w = options.writeConcern.w;\n    }\n    if ('j' in options.writeConcern) {\n      saveOptions.writeConcern.j = options.writeConcern.j;\n    }\n    if ('wtimeout' in options.writeConcern) {\n      saveOptions.writeConcern.wtimeout = options.writeConcern.wtimeout;\n    }\n  } else {\n    if ('w' in options) {\n      saveOptions.w = options.w;\n    }\n    if ('j' in options) {\n      saveOptions.j = options.j;\n    }\n    if ('wtimeout' in options) {\n      saveOptions.wtimeout = options.wtimeout;\n    }\n  }\n  if ('checkKeys' in options) {\n    saveOptions.checkKeys = options.checkKeys;\n  }\n\n  const session = this.$session();\n  if (!saveOptions.hasOwnProperty('session') && session != null) {\n    saveOptions.session = session;\n  }\n\n  if (this.$isNew) {\n    // send entire doc\n    const obj = this.toObject(saveToObjectOptions);\n    if ((obj || {})._id === void 0) {\n      // documents must have an _id else mongoose won't know\n      // what to update later if more changes are made. the user\n      // wouldn't know what _id was generated by mongodb either\n      // nor would the ObjectId generated by mongodb necessarily\n      // match the schema definition.\n      immediate(function() {\n        callback(new MongooseError('document must have an _id before saving'));\n      });\n      return;\n    }\n\n    this.$__version(true, obj);\n    this[modelCollectionSymbol].insertOne(obj, saveOptions).then(\n      ret => callback(null, ret),\n      err => {\n        _setIsNew(this, true);\n\n        callback(err, null);\n      }\n    );\n\n    this.$__reset();\n    _setIsNew(this, false);\n    // Make it possible to retry the insert\n    this.$__.inserting = true;\n    return;\n  }\n\n  // Make sure we don't treat it as a new object on error,\n  // since it already exists\n  this.$__.inserting = false;\n  const delta = this.$__delta();\n  if (delta) {\n    if (delta instanceof MongooseError) {\n      callback(delta);\n      return;\n    }\n\n    const where = this.$__where(delta[0]);\n    if (where instanceof MongooseError) {\n      callback(where);\n      return;\n    }\n\n    _applyCustomWhere(this, where);\n\n    const update = delta[1];\n    if (this.$__schema.options.minimize) {\n      minimize(update);\n      // minimize might leave us with an empty object, which would\n      // lead to MongoDB throwing a \"Update document requires atomic operators\" error\n      if (Object.keys(update).length === 0) {\n        handleEmptyUpdate.call(this);\n        return;\n      }\n    }\n\n    this[modelCollectionSymbol].updateOne(where, update, saveOptions).then(\n      ret => {\n        ret.$where = where;\n        callback(null, ret);\n      },\n      err => {\n        this.$__undoReset();\n\n        callback(err);\n      }\n    );\n  } else {\n    handleEmptyUpdate.call(this);\n    return;\n  }\n\n  // store the modified paths before the document is reset\n  this.$__.modifiedPaths = this.modifiedPaths();\n  this.$__reset();\n\n  _setIsNew(this, false);\n\n  function handleEmptyUpdate() {\n    const optionsWithCustomValues = Object.assign({}, options, saveOptions);\n    const where = this.$__where();\n    const optimisticConcurrency = this.$__schema.options.optimisticConcurrency;\n    if (optimisticConcurrency && !Array.isArray(optimisticConcurrency)) {\n      const key = this.$__schema.options.versionKey;\n      const val = this.$__getValue(key);\n      if (val != null) {\n        where[key] = val;\n      }\n    }\n    this.constructor.collection.findOne(where, optionsWithCustomValues)\n      .then(documentExists => {\n        const matchedCount = !documentExists ? 0 : 1;\n        callback(null, { $where: where, matchedCount });\n      })\n      .catch(callback);\n  }\n};\n\n/*!\n * ignore\n */\n\nModel.prototype.$__save = function(options, callback) {\n  this.$__handleSave(options, (error, result) => {\n    if (error) {\n      const hooks = this.$__schema.s.hooks;\n      return hooks.execPost('save:error', this, [this], { error: error }, (error) => {\n        callback(error, this);\n      });\n    }\n    let numAffected = 0;\n    const writeConcern = options != null ?\n      options.writeConcern != null ?\n        options.writeConcern.w :\n        options.w :\n      0;\n    if (writeConcern !== 0) {\n      // Skip checking if write succeeded if writeConcern is set to\n      // unacknowledged writes, because otherwise `numAffected` will always be 0\n      if (result != null) {\n        if (Array.isArray(result)) {\n          numAffected = result.length;\n        } else if (result.matchedCount != null) {\n          numAffected = result.matchedCount;\n        } else {\n          numAffected = result;\n        }\n      }\n\n      const versionBump = this.$__.version;\n      // was this an update that required a version bump?\n      if (versionBump && !this.$__.inserting) {\n        const doIncrement = VERSION_INC === (VERSION_INC & this.$__.version);\n        this.$__.version = undefined;\n        const key = this.$__schema.options.versionKey;\n        const version = this.$__getValue(key) || 0;\n        if (numAffected <= 0) {\n          // the update failed. pass an error back\n          this.$__undoReset();\n          const err = this.$__.$versionError ||\n            new VersionError(this, version, this.$__.modifiedPaths);\n          return callback(err);\n        }\n\n        // increment version if was successful\n        if (doIncrement) {\n          this.$__setValue(key, version + 1);\n        }\n      }\n      if (result != null && numAffected <= 0) {\n        this.$__undoReset();\n        error = new DocumentNotFoundError(result.$where,\n          this.constructor.modelName, numAffected, result);\n        const hooks = this.$__schema.s.hooks;\n        return hooks.execPost('save:error', this, [this], { error: error }, (error) => {\n          callback(error, this);\n        });\n      }\n    }\n    this.$__.saving = undefined;\n    this.$__.savedState = {};\n    this.$emit('save', this, numAffected);\n    this.constructor.emit('save', this, numAffected);\n    callback(null, this);\n  });\n};\n\n/*!\n * ignore\n */\n\nfunction generateVersionError(doc, modifiedPaths) {\n  const key = doc.$__schema.options.versionKey;\n  if (!key) {\n    return null;\n  }\n  const version = doc.$__getValue(key) || 0;\n  return new VersionError(doc, version, modifiedPaths);\n}\n\n/**\n * Saves this document by inserting a new document into the database if [document.isNew](https://mongoosejs.com/docs/api/document.html#Document.prototype.isNew) is `true`,\n * or sends an [updateOne](https://mongoosejs.com/docs/api/document.html#Document.prototype.updateOne()) operation with just the modified paths if `isNew` is `false`.\n *\n * #### Example:\n *\n *     product.sold = Date.now();\n *     product = await product.save();\n *\n * If save is successful, the returned promise will fulfill with the document\n * saved.\n *\n * #### Example:\n *\n *     const newProduct = await product.save();\n *     newProduct === product; // true\n *\n * @param {Object} [options] options optional options\n * @param {Session} [options.session=null] the [session](https://www.mongodb.com/docs/manual/reference/server-sessions/) associated with this save operation. If not specified, defaults to the [document's associated session](https://mongoosejs.com/docs/api/document.html#Document.prototype.session()).\n * @param {Object} [options.safe] (DEPRECATED) overrides [schema's safe option](https://mongoosejs.com/docs/guide.html#safe). Use the `w` option instead.\n * @param {Boolean} [options.validateBeforeSave] set to false to save without validating.\n * @param {Boolean} [options.validateModifiedOnly=false] if `true`, Mongoose will only validate modified paths, as opposed to modified paths and `required` paths.\n * @param {Number|String} [options.w] set the [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/#w-option). Overrides the [schema-level `writeConcern` option](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Boolean} [options.j] set to true for MongoDB to wait until this `save()` has been [journaled before resolving the returned promise](https://www.mongodb.com/docs/manual/reference/write-concern/#j-option). Overrides the [schema-level `writeConcern` option](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Number} [options.wtimeout] sets a [timeout for the write concern](https://www.mongodb.com/docs/manual/reference/write-concern/#wtimeout). Overrides the [schema-level `writeConcern` option](https://mongoosejs.com/docs/guide.html#writeConcern).\n * @param {Boolean} [options.checkKeys=true] the MongoDB driver prevents you from saving keys that start with '$' or contain '.' by default. Set this option to `false` to skip that check. See [restrictions on field names](https://docs.mongodb.com/manual/reference/limits/#mongodb-limit-Restrictions-on-Field-Names)\n * @param {Boolean} [options.timestamps=true] if `false` and [timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this `save()`.\n * @throws {DocumentNotFoundError} if this [save updates an existing document](https://mongoosejs.com/docs/api/document.html#Document.prototype.isNew) but the document doesn't exist in the database. For example, you will get this error if the document is [deleted between when you retrieved the document and when you saved it](documents.html#updating).\n * @return {Promise}\n * @api public\n * @see middleware https://mongoosejs.com/docs/middleware.html\n */\n\nModel.prototype.save = async function save(options) {\n  if (typeof options === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.prototype.save() no longer accepts a callback');\n  }\n\n  let parallelSave;\n  this.$op = 'save';\n\n  if (this.$__.saving) {\n    parallelSave = new ParallelSaveError(this);\n  } else {\n    this.$__.saving = new ParallelSaveError(this);\n  }\n\n  options = new SaveOptions(options);\n  if (options.hasOwnProperty('session')) {\n    this.$session(options.session);\n  }\n  if (this.$__.timestamps != null) {\n    options.timestamps = this.$__.timestamps;\n  }\n  this.$__.$versionError = generateVersionError(this, this.modifiedPaths());\n\n  if (parallelSave) {\n    this.$__handleReject(parallelSave);\n    throw parallelSave;\n  }\n\n  this.$__.saveOptions = options;\n\n  await new Promise((resolve, reject) => {\n    this.$__save(options, error => {\n      this.$__.saving = null;\n      this.$__.saveOptions = null;\n      this.$__.$versionError = null;\n      this.$op = null;\n      if (error != null) {\n        this.$__handleReject(error);\n        return reject(error);\n      }\n\n      resolve();\n    });\n  });\n\n  return this;\n};\n\nModel.prototype.$save = Model.prototype.save;\n\n/**\n * Determines whether versioning should be skipped for the given path\n *\n * @param {Document} self\n * @param {String} path\n * @return {Boolean} true if versioning should be skipped for the given path\n * @api private\n */\nfunction shouldSkipVersioning(self, path) {\n  const skipVersioning = self.$__schema.options.skipVersioning;\n  if (!skipVersioning) return false;\n\n  // Remove any array indexes from the path\n  path = path.replace(/\\.\\d+\\./, '.');\n\n  return skipVersioning[path];\n}\n\n/**\n * Apply the operation to the delta (update) clause as\n * well as track versioning for our where clause.\n *\n * @param {Document} self\n * @param {Object} where Unused\n * @param {Object} delta\n * @param {Object} data\n * @param {Mixed} val\n * @param {String} [op]\n * @api private\n */\n\nfunction operand(self, where, delta, data, val, op) {\n  // delta\n  op || (op = '$set');\n  if (!delta[op]) delta[op] = {};\n  delta[op][data.path] = val;\n  // disabled versioning?\n  if (self.$__schema.options.versionKey === false) return;\n\n  // path excluded from versioning?\n  if (shouldSkipVersioning(self, data.path)) return;\n\n  // already marked for versioning?\n  if (VERSION_ALL === (VERSION_ALL & self.$__.version)) return;\n\n  if (self.$__schema.options.optimisticConcurrency) {\n    return;\n  }\n\n  switch (op) {\n    case '$set':\n    case '$unset':\n    case '$pop':\n    case '$pull':\n    case '$pullAll':\n    case '$push':\n    case '$addToSet':\n    case '$inc':\n      break;\n    default:\n      // nothing to do\n      return;\n  }\n\n  // ensure updates sent with positional notation are\n  // editing the correct array element.\n  // only increment the version if an array position changes.\n  // modifying elements of an array is ok if position does not change.\n  if (op === '$push' || op === '$addToSet' || op === '$pullAll' || op === '$pull') {\n    if (/\\.\\d+\\.|\\.\\d+$/.test(data.path)) {\n      increment.call(self);\n    } else {\n      self.$__.version = VERSION_INC;\n    }\n  } else if (/^\\$p/.test(op)) {\n    // potentially changing array positions\n    increment.call(self);\n  } else if (Array.isArray(val)) {\n    // $set an array\n    increment.call(self);\n  } else if (/\\.\\d+\\.|\\.\\d+$/.test(data.path)) {\n    // now handling $set, $unset\n    // subpath of array\n    self.$__.version = VERSION_WHERE;\n  }\n}\n\n/**\n * Compiles an update and where clause for a `val` with _atomics.\n *\n * @param {Document} self\n * @param {Object} where\n * @param {Object} delta\n * @param {Object} data\n * @param {Array} value\n * @api private\n */\n\nfunction handleAtomics(self, where, delta, data, value) {\n  if (delta.$set && delta.$set[data.path]) {\n    // $set has precedence over other atomics\n    return;\n  }\n\n  if (typeof value.$__getAtomics === 'function') {\n    value.$__getAtomics().forEach(function(atomic) {\n      const op = atomic[0];\n      const val = atomic[1];\n      operand(self, where, delta, data, val, op);\n    });\n    return;\n  }\n\n  // legacy support for plugins\n\n  const atomics = value[arrayAtomicsSymbol];\n  const ops = Object.keys(atomics);\n  let i = ops.length;\n  let val;\n  let op;\n\n  if (i === 0) {\n    // $set\n\n    if (utils.isMongooseObject(value)) {\n      value = value.toObject({ depopulate: 1, _isNested: true });\n    } else if (value.valueOf) {\n      value = value.valueOf();\n    }\n\n    return operand(self, where, delta, data, value);\n  }\n\n  function iter(mem) {\n    return utils.isMongooseObject(mem)\n      ? mem.toObject({ depopulate: 1, _isNested: true })\n      : mem;\n  }\n\n  while (i--) {\n    op = ops[i];\n    val = atomics[op];\n\n    if (utils.isMongooseObject(val)) {\n      val = val.toObject({ depopulate: true, transform: false, _isNested: true });\n    } else if (Array.isArray(val)) {\n      val = val.map(iter);\n    } else if (val.valueOf) {\n      val = val.valueOf();\n    }\n\n    if (op === '$addToSet') {\n      val = { $each: val };\n    }\n\n    operand(self, where, delta, data, val, op);\n  }\n}\n\n/**\n * Produces a special query document of the modified properties used in updates.\n *\n * @api private\n * @method $__delta\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.$__delta = function() {\n  const dirty = this.$__dirty();\n\n  const optimisticConcurrency = this.$__schema.options.optimisticConcurrency;\n  if (optimisticConcurrency) {\n    if (Array.isArray(optimisticConcurrency)) {\n      const optCon = new Set(optimisticConcurrency);\n      const modPaths = this.modifiedPaths();\n      if (modPaths.find(path => optCon.has(path))) {\n        this.$__.version = dirty.length ? VERSION_ALL : VERSION_WHERE;\n      }\n    } else {\n      this.$__.version = dirty.length ? VERSION_ALL : VERSION_WHERE;\n    }\n  }\n\n  if (!dirty.length && VERSION_ALL !== this.$__.version) {\n    return;\n  }\n  const where = {};\n  const delta = {};\n  const len = dirty.length;\n  const divergent = [];\n  let d = 0;\n\n  where._id = this._doc._id;\n  // If `_id` is an object, need to depopulate, but also need to be careful\n  // because `_id` can technically be null (see gh-6406)\n  if ((where && where._id && where._id.$__ || null) != null) {\n    where._id = where._id.toObject({ transform: false, depopulate: true });\n  }\n  for (; d < len; ++d) {\n    const data = dirty[d];\n    let value = data.value;\n    const match = checkDivergentArray(this, data.path, value);\n    if (match) {\n      divergent.push(match);\n      continue;\n    }\n\n    const pop = this.$populated(data.path, true);\n    if (!pop && this.$__.selected) {\n      // If any array was selected using an $elemMatch projection, we alter the path and where clause\n      // NOTE: MongoDB only supports projected $elemMatch on top level array.\n      const pathSplit = data.path.split('.');\n      const top = pathSplit[0];\n      if (this.$__.selected[top] && this.$__.selected[top].$elemMatch) {\n        // If the selected array entry was modified\n        if (pathSplit.length > 1 && pathSplit[1] == 0 && typeof where[top] === 'undefined') {\n          where[top] = this.$__.selected[top];\n          pathSplit[1] = '$';\n          data.path = pathSplit.join('.');\n        }\n        // if the selected array was modified in any other way throw an error\n        else {\n          divergent.push(data.path);\n          continue;\n        }\n      }\n    }\n\n    // If this path is set to default, and either this path or one of\n    // its parents is excluded, don't treat this path as dirty.\n    if (this.$isDefault(data.path) && this.$__.selected) {\n      if (data.path.indexOf('.') === -1 && isPathExcluded(this.$__.selected, data.path)) {\n        continue;\n      }\n\n      const pathsToCheck = parentPaths(data.path);\n      if (pathsToCheck.find(path => isPathExcluded(this.$__.isSelected, path))) {\n        continue;\n      }\n    }\n\n    if (divergent.length) continue;\n    if (value === undefined) {\n      operand(this, where, delta, data, 1, '$unset');\n    } else if (value === null) {\n      operand(this, where, delta, data, null);\n    } else if (utils.isMongooseArray(value) && value.$path() && value[arrayAtomicsSymbol]) {\n      // arrays and other custom types (support plugins etc)\n      handleAtomics(this, where, delta, data, value);\n    } else if (value[MongooseBuffer.pathSymbol] && Buffer.isBuffer(value)) {\n      // MongooseBuffer\n      value = value.toObject();\n      operand(this, where, delta, data, value);\n    } else {\n      if (this.$__.primitiveAtomics && this.$__.primitiveAtomics[data.path] != null) {\n        const val = this.$__.primitiveAtomics[data.path];\n        const op = firstKey(val);\n        operand(this, where, delta, data, val[op], op);\n      } else {\n        value = clone(value, {\n          depopulate: true,\n          transform: false,\n          virtuals: false,\n          getters: false,\n          omitUndefined: true,\n          _isNested: true\n        });\n        operand(this, where, delta, data, value);\n      }\n    }\n  }\n\n  if (divergent.length) {\n    return new DivergentArrayError(divergent);\n  }\n\n  if (this.$__.version) {\n    this.$__version(where, delta);\n  }\n\n  if (Object.keys(delta).length === 0) {\n    return [where, null];\n  }\n\n  return [where, delta];\n};\n\n/**\n * Determine if array was populated with some form of filter and is now\n * being updated in a manner which could overwrite data unintentionally.\n *\n * @see https://github.com/Automattic/mongoose/issues/1334\n * @param {Document} doc\n * @param {String} path\n * @param {Any} array\n * @return {String|undefined}\n * @api private\n */\n\nfunction checkDivergentArray(doc, path, array) {\n  // see if we populated this path\n  const pop = doc.$populated(path, true);\n\n  if (!pop && doc.$__.selected) {\n    // If any array was selected using an $elemMatch projection, we deny the update.\n    // NOTE: MongoDB only supports projected $elemMatch on top level array.\n    const top = path.split('.')[0];\n    if (doc.$__.selected[top + '.$']) {\n      return top;\n    }\n  }\n\n  if (!(pop && utils.isMongooseArray(array))) return;\n\n  // If the array was populated using options that prevented all\n  // documents from being returned (match, skip, limit) or they\n  // deselected the _id field, $pop and $set of the array are\n  // not safe operations. If _id was deselected, we do not know\n  // how to remove elements. $pop will pop off the _id from the end\n  // of the array in the db which is not guaranteed to be the\n  // same as the last element we have here. $set of the entire array\n  // would be similarly destructive as we never received all\n  // elements of the array and potentially would overwrite data.\n  const check = pop.options.match ||\n      pop.options.options && utils.object.hasOwnProperty(pop.options.options, 'limit') || // 0 is not permitted\n      pop.options.options && pop.options.options.skip || // 0 is permitted\n      pop.options.select && // deselected _id?\n      (pop.options.select._id === 0 ||\n      /\\s?-_id\\s?/.test(pop.options.select));\n\n  if (check) {\n    const atomics = array[arrayAtomicsSymbol];\n    if (Object.keys(atomics).length === 0 || atomics.$set || atomics.$pop) {\n      return path;\n    }\n  }\n}\n\n/**\n * Appends versioning to the where and update clauses.\n *\n * @api private\n * @method $__version\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.$__version = function(where, delta) {\n  const key = this.$__schema.options.versionKey;\n  if (where === true) {\n    // this is an insert\n    if (key) {\n      setDottedPath(delta, key, 0);\n      this.$__setValue(key, 0);\n    }\n    return;\n  }\n\n  if (key === false) {\n    return;\n  }\n\n  // updates\n\n  // only apply versioning if our versionKey was selected. else\n  // there is no way to select the correct version. we could fail\n  // fast here and force them to include the versionKey but\n  // thats a bit intrusive. can we do this automatically?\n\n  if (!this.$__isSelected(key)) {\n    return;\n  }\n\n  // $push $addToSet don't need the where clause set\n  if (VERSION_WHERE === (VERSION_WHERE & this.$__.version)) {\n    const value = this.$__getValue(key);\n    if (value != null) where[key] = value;\n  }\n\n  if (VERSION_INC === (VERSION_INC & this.$__.version)) {\n    if (get(delta.$set, key, null) != null) {\n      // Version key is getting set, means we'll increment the doc's version\n      // after a successful save, so we should set the incremented version so\n      // future saves don't fail (gh-5779)\n      ++delta.$set[key];\n    } else {\n      delta.$inc = delta.$inc || {};\n      delta.$inc[key] = 1;\n    }\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction increment() {\n  this.$__.version = VERSION_ALL;\n  return this;\n}\n\n/**\n * Signal that we desire an increment of this documents version.\n *\n * #### Example:\n *\n *     const doc = await Model.findById(id);\n *     doc.increment();\n *     await doc.save();\n *\n * @see versionKeys https://mongoosejs.com/docs/guide.html#versionKey\n * @memberOf Model\n * @method increment\n * @api public\n */\n\nModel.prototype.increment = increment;\n\n/**\n * Returns a query object\n *\n * @api private\n * @method $__where\n * @memberOf Model\n * @instance\n */\n\nModel.prototype.$__where = function _where(where) {\n  where || (where = {});\n\n  if (!where._id) {\n    where._id = this._doc._id;\n  }\n\n  if (this._doc._id === void 0) {\n    return new MongooseError('No _id found on document!');\n  }\n\n  return where;\n};\n\n/**\n * Delete this document from the db.\n *\n * #### Example:\n *\n *     await product.deleteOne();\n *     await Product.findById(product._id); // null\n *\n * @return {Query} Query\n * @api public\n */\n\nModel.prototype.deleteOne = function deleteOne(options) {\n  if (typeof options === 'function' ||\n      typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.prototype.deleteOne() no longer accepts a callback');\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  if (options.hasOwnProperty('session')) {\n    this.$session(options.session);\n  }\n\n  const self = this;\n  const where = this.$__where();\n  if (where instanceof Error) {\n    throw where;\n  }\n  const query = self.constructor.deleteOne(where, options);\n\n  if (this.$session() != null) {\n    if (!('session' in query.options)) {\n      query.options.session = this.$session();\n    }\n  }\n\n  query.pre(function queryPreDeleteOne(cb) {\n    self.constructor._middleware.execPre('deleteOne', self, [self], cb);\n  });\n  query.pre(function callSubdocPreHooks(cb) {\n    each(self.$getAllSubdocs(), (subdoc, cb) => {\n      subdoc.constructor._middleware.execPre('deleteOne', subdoc, [subdoc], cb);\n    }, cb);\n  });\n  query.pre(function skipIfAlreadyDeleted(cb) {\n    if (self.$__.isDeleted) {\n      return cb(Kareem.skipWrappedFunction());\n    }\n    return cb();\n  });\n  query.post(function callSubdocPostHooks(cb) {\n    each(self.$getAllSubdocs(), (subdoc, cb) => {\n      subdoc.constructor._middleware.execPost('deleteOne', subdoc, [subdoc], {}, cb);\n    }, cb);\n  });\n  query.post(function queryPostDeleteOne(cb) {\n    self.constructor._middleware.execPost('deleteOne', self, [self], {}, cb);\n  });\n\n  return query;\n};\n\n/**\n * Returns the model instance used to create this document if no `name` specified.\n * If `name` specified, returns the model with the given `name`.\n *\n * #### Example:\n *\n *     const doc = new Tank({});\n *     doc.$model() === Tank; // true\n *     await doc.$model('User').findById(id);\n *\n * @param {String} [name] model name\n * @method $model\n * @api public\n * @return {Model}\n */\n\nModel.prototype.$model = function $model(name) {\n  if (arguments.length === 0) {\n    return this.constructor;\n  }\n  return this[modelDbSymbol].model(name);\n};\n\n/**\n * Returns the model instance used to create this document if no `name` specified.\n * If `name` specified, returns the model with the given `name`.\n *\n * #### Example:\n *\n *     const doc = new Tank({});\n *     doc.$model() === Tank; // true\n *     await doc.$model('User').findById(id);\n *\n * @param {String} [name] model name\n * @method model\n * @api public\n * @return {Model}\n */\n\nModel.prototype.model = Model.prototype.$model;\n\n/**\n * Returns a document with `_id` only if at least one document exists in the database that matches\n * the given `filter`, and `null` otherwise.\n *\n * Under the hood, `MyModel.exists({ answer: 42 })` is equivalent to\n * `MyModel.findOne({ answer: 42 }).select({ _id: 1 }).lean()`\n *\n * #### Example:\n *\n *     await Character.deleteMany({});\n *     await Character.create({ name: 'Jean-Luc Picard' });\n *\n *     await Character.exists({ name: /picard/i }); // { _id: ... }\n *     await Character.exists({ name: /riker/i }); // null\n *\n * This function triggers the following middleware.\n *\n * - `findOne()`\n *\n * @param {Object} filter\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @return {Query}\n */\n\nModel.exists = function exists(filter, options) {\n  _checkContext(this, 'exists');\n  if (typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.exists() no longer accepts a callback');\n  }\n\n  const query = this.findOne(filter).\n    select({ _id: 1 }).\n    lean().\n    setOptions(options);\n\n  return query;\n};\n\n/**\n * Adds a discriminator type.\n *\n * #### Example:\n *\n *     function BaseSchema() {\n *       Schema.apply(this, arguments);\n *\n *       this.add({\n *         name: String,\n *         createdAt: Date\n *       });\n *     }\n *     util.inherits(BaseSchema, Schema);\n *\n *     const PersonSchema = new BaseSchema();\n *     const BossSchema = new BaseSchema({ department: String });\n *\n *     const Person = mongoose.model('Person', PersonSchema);\n *     const Boss = Person.discriminator('Boss', BossSchema);\n *     new Boss().__t; // \"Boss\". `__t` is the default `discriminatorKey`\n *\n *     const employeeSchema = new Schema({ boss: ObjectId });\n *     const Employee = Person.discriminator('Employee', employeeSchema, 'staff');\n *     new Employee().__t; // \"staff\" because of 3rd argument above\n *\n * @param {String} name discriminator model name\n * @param {Schema} schema discriminator model schema\n * @param {Object|String} [options] If string, same as `options.value`.\n * @param {String} [options.value] the string stored in the `discriminatorKey` property. If not specified, Mongoose uses the `name` parameter.\n * @param {Boolean} [options.clone=true] By default, `discriminator()` clones the given `schema`. Set to `false` to skip cloning.\n * @param {Boolean} [options.overwriteModels=false] by default, Mongoose does not allow you to define a discriminator with the same name as another discriminator. Set this to allow overwriting discriminators with the same name.\n * @param {Boolean} [options.mergeHooks=true] By default, Mongoose merges the base schema's hooks with the discriminator schema's hooks. Set this option to `false` to make Mongoose use the discriminator schema's hooks instead.\n * @param {Boolean} [options.mergePlugins=true] By default, Mongoose merges the base schema's plugins with the discriminator schema's plugins. Set this option to `false` to make Mongoose use the discriminator schema's plugins instead.\n * @return {Model} The newly created discriminator model\n * @api public\n */\n\nModel.discriminator = function(name, schema, options) {\n  let model;\n  if (typeof name === 'function') {\n    model = name;\n    name = utils.getFunctionName(model);\n    if (!(model.prototype instanceof Model)) {\n      throw new MongooseError('The provided class ' + name + ' must extend Model');\n    }\n  }\n\n  options = options || {};\n  const value = utils.isPOJO(options) ? options.value : options;\n  const clone = typeof options.clone === 'boolean' ? options.clone : true;\n  const mergePlugins = typeof options.mergePlugins === 'boolean' ? options.mergePlugins : true;\n\n  _checkContext(this, 'discriminator');\n\n  if (utils.isObject(schema) && !schema.instanceOfSchema) {\n    schema = new Schema(schema);\n  }\n  if (schema instanceof Schema && clone) {\n    schema = schema.clone();\n  }\n\n  schema = discriminator(this, name, schema, value, mergePlugins, options.mergeHooks);\n  if (this.db.models[name] && !schema.options.overwriteModels) {\n    throw new OverwriteModelError(name);\n  }\n\n  schema.$isRootDiscriminator = true;\n  schema.$globalPluginsApplied = true;\n\n  model = this.db.model(model || name, schema, this.$__collection.name);\n  this.discriminators[name] = model;\n  const d = this.discriminators[name];\n  Object.setPrototypeOf(d.prototype, this.prototype);\n  Object.defineProperty(d, 'baseModelName', {\n    value: this.modelName,\n    configurable: true,\n    writable: false\n  });\n\n  // apply methods and statics\n  applyMethods(d, schema);\n  applyStatics(d, schema);\n\n  if (this[subclassedSymbol] != null) {\n    for (const submodel of this[subclassedSymbol]) {\n      submodel.discriminators = submodel.discriminators || {};\n      submodel.discriminators[name] =\n        model.__subclass(model.db, schema, submodel.collection.name);\n    }\n  }\n\n  return d;\n};\n\n/**\n * Make sure `this` is a model\n * @api private\n */\n\nfunction _checkContext(ctx, fnName) {\n  // Check context, because it is easy to mistakenly type\n  // `new Model.discriminator()` and get an incomprehensible error\n  if (ctx == null || ctx === global) {\n    throw new MongooseError('`Model.' + fnName + '()` cannot run without a ' +\n      'model as `this`. Make sure you are calling `MyModel.' + fnName + '()` ' +\n      'where `MyModel` is a Mongoose model.');\n  } else if (ctx[modelSymbol] == null) {\n    throw new MongooseError('`Model.' + fnName + '()` cannot run without a ' +\n      'model as `this`. Make sure you are not calling ' +\n      '`new Model.' + fnName + '()`');\n  }\n}\n\n// Model (class) features\n\n/*!\n * Give the constructor the ability to emit events.\n */\n\nfor (const i in EventEmitter.prototype) {\n  Model[i] = EventEmitter.prototype[i];\n}\n\n/**\n * This function is responsible for building [indexes](https://www.mongodb.com/docs/manual/indexes/),\n * unless [`autoIndex`](https://mongoosejs.com/docs/guide.html#autoIndex) is turned off.\n *\n * Mongoose calls this function automatically when a model is created using\n * [`mongoose.model()`](https://mongoosejs.com/docs/api/mongoose.html#Mongoose.prototype.model()) or\n * [`connection.model()`](https://mongoosejs.com/docs/api/connection.html#Connection.prototype.model()), so you\n * don't need to call `init()` to trigger index builds.\n *\n * However, you _may_ need to call `init()`  to get back a promise that will resolve when your indexes are finished.\n * Calling `await Model.init()` is helpful if you need to wait for indexes to build before continuing.\n * For example, if you want to wait for unique indexes to build before continuing with a test case.\n *\n * #### Example:\n *\n *     const eventSchema = new Schema({ thing: { type: 'string', unique: true } })\n *     // This calls `Event.init()` implicitly, so you don't need to call\n *     // `Event.init()` on your own.\n *     const Event = mongoose.model('Event', eventSchema);\n *\n *     await Event.init();\n *     console.log('Indexes are done building!');\n *\n * @api public\n * @returns {Promise}\n */\n\nModel.init = function init() {\n  _checkContext(this, 'init');\n  if (typeof arguments[0] === 'function') {\n    throw new MongooseError('Model.init() no longer accepts a callback');\n  }\n\n  this.schema.emit('init', this);\n\n  if (this.$init != null) {\n    return this.$init;\n  }\n\n  const conn = this.db;\n  const _ensureIndexes = async() => {\n    const autoIndex = utils.getOption(\n      'autoIndex',\n      this.schema.options,\n      conn.config,\n      conn.base.options\n    );\n    if (!autoIndex) {\n      return;\n    }\n    return await this.ensureIndexes({ _automatic: true });\n  };\n  const _createCollection = async() => {\n    if ((conn.readyState === STATES.connecting || conn.readyState === STATES.disconnected) && conn._shouldBufferCommands()) {\n      await new Promise(resolve => {\n        conn._queue.push({ fn: resolve });\n      });\n    }\n    const autoCreate = utils.getOption(\n      'autoCreate',\n      this.schema.options,\n      conn.config,\n      conn.base.options\n    );\n    if (!autoCreate) {\n      return;\n    }\n    return await this.createCollection();\n  };\n\n  this.$init = _createCollection().then(() => _ensureIndexes());\n\n  const _catch = this.$init.catch;\n  const _this = this;\n  this.$init.catch = function() {\n    _this.$caught = true;\n    return _catch.apply(_this.$init, arguments);\n  };\n\n  return this.$init;\n};\n\n\n/**\n * Create the collection for this model. By default, if no indexes are specified,\n * mongoose will not create the collection for the model until any documents are\n * created. Use this method to create the collection explicitly.\n *\n * Note 1: You may need to call this before starting a transaction\n * See https://www.mongodb.com/docs/manual/core/transactions/#transactions-and-operations\n *\n * Note 2: You don't have to call this if your schema contains index or unique field.\n * In that case, just use `Model.init()`\n *\n * #### Example:\n *\n *     const userSchema = new Schema({ name: String })\n *     const User = mongoose.model('User', userSchema);\n *\n *     User.createCollection().then(function(collection) {\n *       console.log('Collection is created!');\n *     });\n *\n * @api public\n * @param {Object} [options] see [MongoDB driver docs](https://mongodb.github.io/node-mongodb-native/4.9/classes/Db.html#createCollection)\n * @returns {Promise}\n */\n\nModel.createCollection = async function createCollection(options) {\n  _checkContext(this, 'createCollection');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.createCollection() no longer accepts a callback');\n  }\n\n  const collectionOptions = this &&\n    this.schema &&\n    this.schema.options &&\n    this.schema.options.collectionOptions;\n  if (collectionOptions != null) {\n    options = Object.assign({}, collectionOptions, options);\n  }\n\n  const schemaCollation = this &&\n    this.schema &&\n    this.schema.options &&\n    this.schema.options.collation;\n  if (schemaCollation != null) {\n    options = Object.assign({ collation: schemaCollation }, options);\n  }\n  const capped = this &&\n    this.schema &&\n    this.schema.options &&\n    this.schema.options.capped;\n  if (capped != null) {\n    if (typeof capped === 'number') {\n      options = Object.assign({ capped: true, size: capped }, options);\n    } else if (typeof capped === 'object') {\n      options = Object.assign({ capped: true }, capped, options);\n    }\n  }\n  const timeseries = this &&\n    this.schema &&\n    this.schema.options &&\n    this.schema.options.timeseries;\n  if (timeseries != null) {\n    options = Object.assign({ timeseries }, options);\n    if (options.expireAfterSeconds != null) {\n      // do nothing\n    } else if (options.expires != null) {\n      utils.expires(options);\n    } else if (this.schema.options.expireAfterSeconds != null) {\n      options.expireAfterSeconds = this.schema.options.expireAfterSeconds;\n    } else if (this.schema.options.expires != null) {\n      options.expires = this.schema.options.expires;\n      utils.expires(options);\n    }\n  }\n\n  const clusteredIndex = this &&\n    this.schema &&\n    this.schema.options &&\n    this.schema.options.clusteredIndex;\n  if (clusteredIndex != null) {\n    options = Object.assign({ clusteredIndex: { ...clusteredIndex, unique: true } }, options);\n  }\n\n  try {\n    await this.db.createCollection(this.$__collection.collectionName, options);\n  } catch (err) {\n\n    if (err != null && (err.name !== 'MongoServerError' || err.code !== 48)) {\n      throw err;\n    }\n  }\n  return this.$__collection;\n};\n\n/**\n * Makes the indexes in MongoDB match the indexes defined in this model's\n * schema. This function will drop any indexes that are not defined in\n * the model's schema except the `_id` index, and build any indexes that\n * are in your schema but not in MongoDB.\n *\n * See the [introductory blog post](https://thecodebarbarian.com/whats-new-in-mongoose-5-2-syncindexes)\n * for more information.\n *\n * #### Example:\n *\n *     const schema = new Schema({ name: { type: String, unique: true } });\n *     const Customer = mongoose.model('Customer', schema);\n *     await Customer.collection.createIndex({ age: 1 }); // Index is not in schema\n *     // Will drop the 'age' index and create an index on `name`\n *     await Customer.syncIndexes();\n *\n * You should be careful about running `syncIndexes()` on production applications under heavy load,\n * because index builds are expensive operations, and unexpected index drops can lead to degraded\n * performance. Before running `syncIndexes()`, you can use the [`diffIndexes()` function](#Model.diffIndexes())\n * to check what indexes `syncIndexes()` will drop and create.\n *\n * #### Example:\n *\n *     const { toDrop, toCreate } = await Model.diffIndexes();\n *     toDrop; // Array of strings containing names of indexes that `syncIndexes()` will drop\n *     toCreate; // Array of strings containing names of indexes that `syncIndexes()` will create\n *\n * @param {Object} [options] options to pass to `ensureIndexes()`\n * @param {Boolean} [options.background=null] if specified, overrides each index's `background` property\n * @return {Promise}\n * @api public\n */\n\nModel.syncIndexes = async function syncIndexes(options) {\n  _checkContext(this, 'syncIndexes');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.syncIndexes() no longer accepts a callback');\n  }\n\n  const model = this;\n\n  try {\n    await model.createCollection();\n  } catch (err) {\n    if (err != null && (err.name !== 'MongoServerError' || err.code !== 48)) {\n      throw err;\n    }\n  }\n\n  const diffIndexesResult = await model.diffIndexes();\n  const dropped = await model.cleanIndexes({ ...options, toDrop: diffIndexesResult.toDrop });\n  await model.createIndexes({ ...options, toCreate: diffIndexesResult.toCreate });\n\n  return dropped;\n};\n\n/**\n * Does a dry-run of `Model.syncIndexes()`, returning the indexes that `syncIndexes()` would drop and create if you were to run `syncIndexes()`.\n *\n * #### Example:\n *\n *     const { toDrop, toCreate } = await Model.diffIndexes();\n *     toDrop; // Array of strings containing names of indexes that `syncIndexes()` will drop\n *     toCreate; // Array of strings containing names of indexes that `syncIndexes()` will create\n *\n * @param {Object} [options]\n * @return {Promise<Object>} contains the indexes that would be dropped in MongoDB and indexes that would be created in MongoDB as `{ toDrop: string[], toCreate: string[] }`.\n */\n\nModel.diffIndexes = async function diffIndexes() {\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.syncIndexes() no longer accepts a callback');\n  }\n\n  const model = this;\n\n  let dbIndexes = await model.listIndexes().catch(err => {\n    if (err.codeName == 'NamespaceNotFound') {\n      return undefined;\n    }\n    throw err;\n  });\n  if (dbIndexes === undefined) {\n    dbIndexes = [];\n  }\n  dbIndexes = getRelatedDBIndexes(model, dbIndexes);\n\n  const schema = model.schema;\n  const schemaIndexes = getRelatedSchemaIndexes(model, schema.indexes());\n\n  const toDrop = getIndexesToDrop(schema, schemaIndexes, dbIndexes);\n  const toCreate = getIndexesToCreate(schema, schemaIndexes, dbIndexes, toDrop);\n\n  return { toDrop, toCreate };\n};\n\nfunction getIndexesToCreate(schema, schemaIndexes, dbIndexes, toDrop) {\n  const toCreate = [];\n\n  for (const [schemaIndexKeysObject, schemaIndexOptions] of schemaIndexes) {\n    let found = false;\n\n    const options = decorateDiscriminatorIndexOptions(schema, clone(schemaIndexOptions));\n\n    for (const index of dbIndexes) {\n      if (isDefaultIdIndex(index)) {\n        continue;\n      }\n      if (\n        isIndexEqual(schemaIndexKeysObject, options, index) &&\n        !toDrop.includes(index.name)\n      ) {\n        found = true;\n        break;\n      }\n    }\n\n    if (!found) {\n      toCreate.push(schemaIndexKeysObject);\n    }\n  }\n\n  return toCreate;\n}\n\nfunction getIndexesToDrop(schema, schemaIndexes, dbIndexes) {\n  const toDrop = [];\n\n  for (const dbIndex of dbIndexes) {\n    let found = false;\n    // Never try to drop `_id` index, MongoDB server doesn't allow it\n    if (isDefaultIdIndex(dbIndex)) {\n      continue;\n    }\n\n    for (const [schemaIndexKeysObject, schemaIndexOptions] of schemaIndexes) {\n      const options = decorateDiscriminatorIndexOptions(schema, clone(schemaIndexOptions));\n      applySchemaCollation(schemaIndexKeysObject, options, schema.options);\n\n      if (isIndexEqual(schemaIndexKeysObject, options, dbIndex)) {\n        found = true;\n        break;\n      }\n    }\n\n    if (!found) {\n      toDrop.push(dbIndex.name);\n    }\n  }\n\n  return toDrop;\n}\n/**\n * Deletes all indexes that aren't defined in this model's schema. Used by\n * `syncIndexes()`.\n *\n * The returned promise resolves to a list of the dropped indexes' names as an array\n *\n * @param {Function} [callback] optional callback\n * @return {Promise|undefined} Returns `undefined` if callback is specified, returns a promise if no callback.\n * @api public\n */\n\nModel.cleanIndexes = async function cleanIndexes(options) {\n  _checkContext(this, 'cleanIndexes');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.cleanIndexes() no longer accepts a callback');\n  }\n  const model = this;\n\n  const collection = model.$__collection;\n\n  if (Array.isArray(options && options.toDrop)) {\n    const res = await _dropIndexes(options.toDrop, collection);\n    return res;\n  }\n\n  const res = await model.diffIndexes();\n  return await _dropIndexes(res.toDrop, collection);\n};\n\nasync function _dropIndexes(toDrop, collection) {\n  if (toDrop.length === 0) {\n    return [];\n  }\n\n  await Promise.all(toDrop.map(indexName => collection.dropIndex(indexName)));\n  return toDrop;\n}\n\n/**\n * Lists the indexes currently defined in MongoDB. This may or may not be\n * the same as the indexes defined in your schema depending on whether you\n * use the [`autoIndex` option](https://mongoosejs.com/docs/guide.html#autoIndex) and if you\n * build indexes manually.\n *\n * @return {Promise}\n * @api public\n */\n\nModel.listIndexes = async function listIndexes() {\n  _checkContext(this, 'listIndexes');\n  if (typeof arguments[0] === 'function') {\n    throw new MongooseError('Model.listIndexes() no longer accepts a callback');\n  }\n\n  if (this.$__collection.buffer) {\n    await new Promise(resolve => {\n      this.$__collection.addQueue(resolve);\n    });\n  }\n\n  return this.$__collection.listIndexes().toArray();\n};\n\n/**\n * Sends `createIndex` commands to mongo for each index declared in the schema.\n * The `createIndex` commands are sent in series.\n *\n * #### Example:\n *\n *     Event.ensureIndexes(function (err) {\n *       if (err) return handleError(err);\n *     });\n *\n * After completion, an `index` event is emitted on this `Model` passing an error if one occurred.\n *\n * #### Example:\n *\n *     const eventSchema = new Schema({ thing: { type: 'string', unique: true } })\n *     const Event = mongoose.model('Event', eventSchema);\n *\n *     Event.on('index', function (err) {\n *       if (err) console.error(err); // error occurred during index creation\n *     })\n *\n * _NOTE: It is not recommended that you run this in production. Index creation may impact database performance depending on your load. Use with caution._\n *\n * @param {Object} [options] internal options\n * @return {Promise}\n * @api public\n */\n\nModel.ensureIndexes = async function ensureIndexes(options) {\n  _checkContext(this, 'ensureIndexes');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.ensureIndexes() no longer accepts a callback');\n  }\n\n  await new Promise((resolve, reject) => {\n    _ensureIndexes(this, options, (err) => {\n      if (err != null) {\n        return reject(err);\n      }\n      resolve();\n    });\n  });\n};\n\n/**\n * Similar to `ensureIndexes()`, except for it uses the [`createIndex`](https://mongodb.github.io/node-mongodb-native/4.9/classes/Db.html#createIndex)\n * function.\n *\n * @param {Object} [options] internal options\n * @return {Promise}\n * @api public\n */\n\nModel.createIndexes = async function createIndexes(options) {\n  _checkContext(this, 'createIndexes');\n\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.createIndexes() no longer accepts a callback');\n  }\n\n  return this.ensureIndexes(options);\n};\n\n\n/*!\n * ignore\n */\n\nfunction _ensureIndexes(model, options, callback) {\n  const indexes = model.schema.indexes();\n  let indexError;\n\n  options = options || {};\n  const done = function(err) {\n    if (err && !model.$caught) {\n      model.emit('error', err);\n    }\n    model.emit('index', err || indexError);\n    callback && callback(err || indexError);\n  };\n\n  for (const index of indexes) {\n    if (isDefaultIdIndex(index)) {\n      utils.warn('mongoose: Cannot specify a custom index on `_id` for ' +\n        'model name \"' + model.modelName + '\", ' +\n        'MongoDB does not allow overwriting the default `_id` index. See ' +\n        'https://bit.ly/mongodb-id-index');\n    }\n  }\n\n  if (!indexes.length) {\n    immediate(function() {\n      done();\n    });\n    return;\n  }\n  // Indexes are created one-by-one to support how MongoDB < 2.4 deals\n  // with background indexes.\n\n  const indexSingleDone = function(err, fields, options, name) {\n    model.emit('index-single-done', err, fields, options, name);\n  };\n  const indexSingleStart = function(fields, options) {\n    model.emit('index-single-start', fields, options);\n  };\n\n  const baseSchema = model.schema._baseSchema;\n  const baseSchemaIndexes = baseSchema ? baseSchema.indexes() : [];\n\n  immediate(function() {\n    // If buffering is off, do this manually.\n    if (options._automatic && !model.collection.collection) {\n      model.collection.addQueue(create, []);\n    } else {\n      create();\n    }\n  });\n\n\n  function create() {\n    if (options._automatic) {\n      if (model.schema.options.autoIndex === false ||\n          (model.schema.options.autoIndex == null && model.db.config.autoIndex === false)) {\n        return done();\n      }\n    }\n\n    const index = indexes.shift();\n    if (!index) {\n      return done();\n    }\n    if (options._automatic && index[1]._autoIndex === false) {\n      return create();\n    }\n\n    if (baseSchemaIndexes.find(i => utils.deepEqual(i, index))) {\n      return create();\n    }\n\n    const indexFields = clone(index[0]);\n    const indexOptions = clone(index[1]);\n\n    delete indexOptions._autoIndex;\n    decorateDiscriminatorIndexOptions(model.schema, indexOptions);\n    applyWriteConcern(model.schema, indexOptions);\n    applySchemaCollation(indexFields, indexOptions, model.schema.options);\n\n    indexSingleStart(indexFields, options);\n\n    if ('background' in options) {\n      indexOptions.background = options.background;\n    }\n\n    if ('toCreate' in options) {\n      if (options.toCreate.length === 0) {\n        return done();\n      }\n    }\n\n    model.collection.createIndex(indexFields, indexOptions).then(\n      name => {\n        indexSingleDone(null, indexFields, indexOptions, name);\n        create();\n      },\n      err => {\n        if (!indexError) {\n          indexError = err;\n        }\n        if (!model.$caught) {\n          model.emit('error', err);\n        }\n\n        indexSingleDone(err, indexFields, indexOptions);\n        create();\n      }\n    );\n  }\n}\n\n/**\n * Schema the model uses.\n *\n * @property schema\n * @static\n * @api public\n * @memberOf Model\n */\n\nModel.schema;\n\n/**\n * Connection instance the model uses.\n *\n * @property db\n * @static\n * @api public\n * @memberOf Model\n */\n\nModel.db;\n\n/**\n * Collection the model uses.\n *\n * @property collection\n * @api public\n * @memberOf Model\n */\n\nModel.collection;\n\n/**\n * Internal collection the model uses.\n *\n * @property collection\n * @api private\n * @memberOf Model\n */\nModel.$__collection;\n\n/**\n * Base Mongoose instance the model uses.\n *\n * @property base\n * @api public\n * @memberOf Model\n */\n\nModel.base;\n\n/**\n * Registered discriminators for this model.\n *\n * @property discriminators\n * @api public\n * @memberOf Model\n */\n\nModel.discriminators;\n\n/**\n * Translate any aliases fields/conditions so the final query or document object is pure\n *\n * #### Example:\n *\n *     await Character.find(Character.translateAliases({\n *        '名': 'Eddard Stark' // Alias for 'name'\n *     });\n *\n * By default, `translateAliases()` overwrites raw fields with aliased fields.\n * So if `n` is an alias for `name`, `{ n: 'alias', name: 'raw' }` will resolve to `{ name: 'alias' }`.\n * However, you can set the `errorOnDuplicates` option to throw an error if there are potentially conflicting paths.\n * The `translateAliases` option for queries uses `errorOnDuplicates`.\n *\n * #### Note:\n *\n * Only translate arguments of object type anything else is returned raw\n *\n * @param {Object} fields fields/conditions that may contain aliased keys\n * @param {Boolean} [errorOnDuplicates] if true, throw an error if there's both a key and an alias for that key in `fields`\n * @return {Object} the translated 'pure' fields/conditions\n */\nModel.translateAliases = function translateAliases(fields, errorOnDuplicates) {\n  _checkContext(this, 'translateAliases');\n\n  const translate = (key, value) => {\n    let alias;\n    const translated = [];\n    const fieldKeys = key.split('.');\n    let currentSchema = this.schema;\n    for (const i in fieldKeys) {\n      const name = fieldKeys[i];\n      if (currentSchema && currentSchema.aliases[name]) {\n        alias = currentSchema.aliases[name];\n        if (errorOnDuplicates && alias in fields) {\n          throw new MongooseError(`Provided object has both field \"${name}\" and its alias \"${alias}\"`);\n        }\n        // Alias found,\n        translated.push(alias);\n      } else {\n        alias = name;\n        // Alias not found, so treat as un-aliased key\n        translated.push(name);\n      }\n\n      // Check if aliased path is a schema\n      if (currentSchema && currentSchema.paths[alias]) {\n        currentSchema = currentSchema.paths[alias].schema;\n      }\n      else\n        currentSchema = null;\n    }\n\n    const translatedKey = translated.join('.');\n    if (fields instanceof Map)\n      fields.set(translatedKey, value);\n    else\n      fields[translatedKey] = value;\n\n    if (translatedKey !== key) {\n      // We'll be using the translated key instead\n      if (fields instanceof Map) {\n        // Delete from map\n        fields.delete(key);\n      } else {\n        // Delete from object\n        delete fields[key]; // We'll be using the translated key instead\n      }\n    }\n    return fields;\n  };\n\n  if (typeof fields === 'object') {\n    // Fields is an object (query conditions or document fields)\n    if (fields instanceof Map) {\n      // A Map was supplied\n      for (const field of new Map(fields)) {\n        fields = translate(field[0], field[1]);\n      }\n    } else {\n      // Infer a regular object was supplied\n      for (const key of Object.keys(fields)) {\n        fields = translate(key, fields[key]);\n        if (key[0] === '$') {\n          if (Array.isArray(fields[key])) {\n            for (const i in fields[key]) {\n              // Recursively translate nested queries\n              fields[key][i] = this.translateAliases(fields[key][i]);\n            }\n          } else {\n            this.translateAliases(fields[key]);\n          }\n        }\n      }\n    }\n\n    return fields;\n  } else {\n    // Don't know typeof fields\n    return fields;\n  }\n};\n\n/**\n * Deletes the first document that matches `conditions` from the collection.\n * It returns an object with the property `deletedCount` indicating how many documents were deleted.\n * Behaves like `remove()`, but deletes at most one document regardless of the\n * `single` option.\n *\n * #### Example:\n *\n *     await Character.deleteOne({ name: 'Eddard Stark' }); // returns {deletedCount: 1}\n *\n * #### Note:\n *\n * This function triggers `deleteOne` query hooks. Read the\n * [middleware docs](https://mongoosejs.com/docs/middleware.html#naming) to learn more.\n *\n * @param {Object} conditions\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @api public\n */\n\nModel.deleteOne = function deleteOne(conditions, options) {\n  _checkContext(this, 'deleteOne');\n\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.prototype.deleteOne() no longer accepts a callback');\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.setOptions(options);\n\n  return mq.deleteOne(conditions);\n};\n\n/**\n * Deletes all of the documents that match `conditions` from the collection.\n * It returns an object with the property `deletedCount` containing the number of documents deleted.\n * Behaves like `remove()`, but deletes all documents that match `conditions`\n * regardless of the `single` option.\n *\n * #### Example:\n *\n *     await Character.deleteMany({ name: /Stark/, age: { $gte: 18 } }); // returns {deletedCount: x} where x is the number of documents deleted.\n *\n * #### Note:\n *\n * This function triggers `deleteMany` query hooks. Read the\n * [middleware docs](https://mongoosejs.com/docs/middleware.html#naming) to learn more.\n *\n * @param {Object} conditions\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @api public\n */\n\nModel.deleteMany = function deleteMany(conditions, options) {\n  _checkContext(this, 'deleteMany');\n\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.deleteMany() no longer accepts a callback');\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.setOptions(options);\n\n  return mq.deleteMany(conditions);\n};\n\n/**\n * Finds documents.\n *\n * Mongoose casts the `filter` to match the model's schema before the command is sent.\n * See our [query casting tutorial](https://mongoosejs.com/docs/tutorials/query_casting.html) for\n * more information on how Mongoose casts `filter`.\n *\n * #### Example:\n *\n *     // find all documents\n *     await MyModel.find({});\n *\n *     // find all documents named john and at least 18\n *     await MyModel.find({ name: 'john', age: { $gte: 18 } }).exec();\n *\n *     // executes, name LIKE john and only selecting the \"name\" and \"friends\" fields\n *     await MyModel.find({ name: /john/i }, 'name friends').exec();\n *\n *     // passing options\n *     await MyModel.find({ name: /john/i }, null, { skip: 10 }).exec();\n *\n * @param {Object|ObjectId} filter\n * @param {Object|String|String[]} [projection] optional fields to return, see [`Query.prototype.select()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.select())\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @see field selection https://mongoosejs.com/docs/api/query.html#Query.prototype.select()\n * @see query casting https://mongoosejs.com/docs/tutorials/query_casting.html\n * @api public\n */\n\nModel.find = function find(conditions, projection, options) {\n  _checkContext(this, 'find');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function' || typeof arguments[3] === 'function') {\n    throw new MongooseError('Model.find() no longer accepts a callback');\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(projection);\n  mq.setOptions(options);\n\n  return mq.find(conditions);\n};\n\n/**\n * Finds a single document by its _id field. `findById(id)` is almost*\n * equivalent to `findOne({ _id: id })`. If you want to query by a document's\n * `_id`, use `findById()` instead of `findOne()`.\n *\n * The `id` is cast based on the Schema before sending the command.\n *\n * This function triggers the following middleware.\n *\n * - `findOne()`\n *\n * \\* Except for how it treats `undefined`. If you use `findOne()`, you'll see\n * that `findOne(undefined)` and `findOne({ _id: undefined })` are equivalent\n * to `findOne({})` and return arbitrary documents. However, mongoose\n * translates `findById(undefined)` into `findOne({ _id: null })`.\n *\n * #### Example:\n *\n *     // Find the adventure with the given `id`, or `null` if not found\n *     await Adventure.findById(id).exec();\n *\n *     // select only the adventures name and length\n *     await Adventure.findById(id, 'name length').exec();\n *\n * @param {Any} id value of `_id` to query by\n * @param {Object|String|String[]} [projection] optional fields to return, see [`Query.prototype.select()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.select())\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @return {Query}\n * @see field selection https://mongoosejs.com/docs/api/query.html#Query.prototype.select()\n * @see lean queries https://mongoosejs.com/docs/tutorials/lean.html\n * @see findById in Mongoose https://masteringjs.io/tutorials/mongoose/find-by-id\n * @api public\n */\n\nModel.findById = function findById(id, projection, options) {\n  _checkContext(this, 'findById');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.findById() no longer accepts a callback');\n  }\n\n  if (typeof id === 'undefined') {\n    id = null;\n  }\n\n  return this.findOne({ _id: id }, projection, options);\n};\n\n/**\n * Finds one document.\n *\n * The `conditions` are cast to their respective SchemaTypes before the command is sent.\n *\n * *Note:* `conditions` is optional, and if `conditions` is null or undefined,\n * mongoose will send an empty `findOne` command to MongoDB, which will return\n * an arbitrary document. If you're querying by `_id`, use `findById()` instead.\n *\n * #### Example:\n *\n *     // Find one adventure whose `country` is 'Croatia', otherwise `null`\n *     await Adventure.findOne({ country: 'Croatia' }).exec();\n *\n *     // Model.findOne() no longer accepts a callback\n *\n *     // Select only the adventures name and length\n *     await Adventure.findOne({ country: 'Croatia' }, 'name length').exec();\n *\n * @param {Object} [conditions]\n * @param {Object|String|String[]} [projection] optional fields to return, see [`Query.prototype.select()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.select())\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @see field selection https://mongoosejs.com/docs/api/query.html#Query.prototype.select()\n * @see lean queries https://mongoosejs.com/docs/tutorials/lean.html\n * @api public\n */\n\nModel.findOne = function findOne(conditions, projection, options) {\n  _checkContext(this, 'findOne');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.findOne() no longer accepts a callback');\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(projection);\n  mq.setOptions(options);\n\n  return mq.findOne(conditions);\n};\n\n/**\n * Estimates the number of documents in the MongoDB collection. Faster than\n * using `countDocuments()` for large collections because\n * `estimatedDocumentCount()` uses collection metadata rather than scanning\n * the entire collection.\n *\n * #### Example:\n *\n *     const numAdventures = await Adventure.estimatedDocumentCount();\n *\n * @param {Object} [options]\n * @return {Query}\n * @api public\n */\n\nModel.estimatedDocumentCount = function estimatedDocumentCount(options) {\n  _checkContext(this, 'estimatedDocumentCount');\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n\n  return mq.estimatedDocumentCount(options);\n};\n\n/**\n * Counts number of documents matching `filter` in a database collection.\n *\n * #### Example:\n *\n *     Adventure.countDocuments({ type: 'jungle' }, function (err, count) {\n *       console.log('there are %d jungle adventures', count);\n *     });\n *\n * If you want to count all documents in a large collection,\n * use the [`estimatedDocumentCount()` function](https://mongoosejs.com/docs/api/model.html#Model.estimatedDocumentCount())\n * instead. If you call `countDocuments({})`, MongoDB will always execute\n * a full collection scan and **not** use any indexes.\n *\n * The `countDocuments()` function is similar to `count()`, but there are a\n * [few operators that `countDocuments()` does not support](https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#countDocuments).\n * Below are the operators that `count()` supports but `countDocuments()` does not,\n * and the suggested replacement:\n *\n * - `$where`: [`$expr`](https://www.mongodb.com/docs/manual/reference/operator/query/expr/)\n * - `$near`: [`$geoWithin`](https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/) with [`$center`](https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center)\n * - `$nearSphere`: [`$geoWithin`](https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/) with [`$centerSphere`](https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere)\n *\n * @param {Object} filter\n * @return {Query}\n * @api public\n */\n\nModel.countDocuments = function countDocuments(conditions, options) {\n  _checkContext(this, 'countDocuments');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.countDocuments() no longer accepts a callback');\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  if (options != null) {\n    mq.setOptions(options);\n  }\n\n  return mq.countDocuments(conditions);\n};\n\n\n/**\n * Creates a Query for a `distinct` operation.\n *\n * #### Example:\n *\n *     const query = Link.distinct('url');\n *     query.exec();\n *\n * @param {String} field\n * @param {Object} [conditions] optional\n * @return {Query}\n * @api public\n */\n\nModel.distinct = function distinct(field, conditions) {\n  _checkContext(this, 'distinct');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function') {\n    throw new MongooseError('Model.distinct() no longer accepts a callback');\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n\n  return mq.distinct(field, conditions);\n};\n\n/**\n * Creates a Query, applies the passed conditions, and returns the Query.\n *\n * For example, instead of writing:\n *\n *     User.find({ age: { $gte: 21, $lte: 65 } });\n *\n * we can instead write:\n *\n *     User.where('age').gte(21).lte(65).exec();\n *\n * Since the Query class also supports `where` you can continue chaining\n *\n *     User\n *     .where('age').gte(21).lte(65)\n *     .where('name', /^b/i)\n *     ... etc\n *\n * @param {String} path\n * @param {Object} [val] optional value\n * @return {Query}\n * @api public\n */\n\nModel.where = function where(path, val) {\n  _checkContext(this, 'where');\n\n  void val; // eslint\n  const mq = new this.Query({}, {}, this, this.$__collection).find({});\n  return mq.where.apply(mq, arguments);\n};\n\n/**\n * Creates a `Query` and specifies a `$where` condition.\n *\n * Sometimes you need to query for things in mongodb using a JavaScript expression. You can do so via `find({ $where: javascript })`, or you can use the mongoose shortcut method $where via a Query chain or from your mongoose Model.\n *\n *     Blog.$where('this.username.indexOf(\"val\") !== -1').exec(function (err, docs) {});\n *\n * @param {String|Function} argument is a javascript string or anonymous function\n * @method $where\n * @memberOf Model\n * @return {Query}\n * @see Query.$where https://mongoosejs.com/docs/api/query.html#Query.prototype.$where\n * @api public\n */\n\nModel.$where = function $where() {\n  _checkContext(this, '$where');\n\n  const mq = new this.Query({}, {}, this, this.$__collection).find({});\n  return mq.$where.apply(mq, arguments);\n};\n\n/**\n * Issues a mongodb findOneAndUpdate command.\n *\n * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found document (if any) to the callback. The query executes if `callback` is passed else a Query object is returned.\n *\n * #### Example:\n *\n *     A.findOneAndUpdate(conditions, update, options)  // returns Query\n *     A.findOneAndUpdate(conditions, update)           // returns Query\n *     A.findOneAndUpdate()                             // returns Query\n *\n * #### Note:\n *\n * All top level update keys which are not `atomic` operation names are treated as set operations:\n *\n * #### Example:\n *\n *     const query = { name: 'borne' };\n *     Model.findOneAndUpdate(query, { name: 'jason bourne' }, options)\n *\n *     // is sent as\n *     Model.findOneAndUpdate(query, { $set: { name: 'jason bourne' }}, options)\n *\n * #### Note:\n *\n * `findOneAndX` and `findByIdAndX` functions support limited validation that\n * you can enable by setting the `runValidators` option.\n *\n * If you need full-fledged validation, use the traditional approach of first\n * retrieving the document.\n *\n *     const doc = await Model.findById(id);\n *     doc.name = 'jason bourne';\n *     await doc.save();\n *\n * @param {Object} [conditions]\n * @param {Object} [update]\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {String} [options.returnDocument='before'] Has two possible values, `'before'` and `'after'`. By default, it will return the document before the update was applied.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.lean()) and [the Mongoose lean tutorial](https://mongoosejs.com/docs/tutorials/lean.html).\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object|String|String[]} [options.projection=null] optional fields to return, see [`Query.prototype.select()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.select())\n * @param {Boolean} [options.new=false] if true, return the modified document rather than the original\n * @param {Object|String} [options.fields] Field selection. Equivalent to `.select(fields).findOneAndUpdate()`\n * @param {Number} [options.maxTimeMS] puts a time limit on the query - requires mongodb >= 2.6.0\n * @param {Object|String} [options.sort] if multiple docs are found by the conditions, sets the sort order to choose which doc to update.\n * @param {Boolean} [options.runValidators] if true, runs [update validators](https://mongoosejs.com/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema\n * @param {Boolean} [options.setDefaultsOnInsert=true] If `setDefaultsOnInsert` and `upsert` are true, mongoose will apply the [defaults](https://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created\n * @param {Boolean} [options.includeResultMetadata] if true, returns the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html)\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @see Tutorial https://mongoosejs.com/docs/tutorials/findoneandupdate.html\n * @see mongodb https://www.mongodb.com/docs/manual/reference/command/findAndModify/\n * @api public\n */\n\nModel.findOneAndUpdate = function(conditions, update, options) {\n  _checkContext(this, 'findOneAndUpdate');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function' || typeof arguments[3] === 'function') {\n    throw new MongooseError('Model.findOneAndUpdate() no longer accepts a callback');\n  }\n\n  if (arguments.length === 1) {\n    update = conditions;\n    conditions = null;\n    options = null;\n  }\n\n  let fields;\n  if (options) {\n    fields = options.fields || options.projection;\n  }\n\n  update = clone(update, {\n    depopulate: true,\n    _isNested: true\n  });\n\n  decorateUpdateWithVersionKey(update, options, this.schema.options.versionKey);\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(fields);\n\n  return mq.findOneAndUpdate(conditions, update, options);\n};\n\n/**\n * Issues a mongodb findOneAndUpdate command by a document's _id field.\n * `findByIdAndUpdate(id, ...)` is equivalent to `findOneAndUpdate({ _id: id }, ...)`.\n *\n * Finds a matching document, updates it according to the `update` arg,\n * passing any `options`, and returns the found document (if any).\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndUpdate()`\n *\n * #### Example:\n *\n *     A.findByIdAndUpdate(id, update, options)  // returns Query\n *     A.findByIdAndUpdate(id, update)           // returns Query\n *     A.findByIdAndUpdate()                     // returns Query\n *\n * #### Note:\n *\n * All top level update keys which are not `atomic` operation names are treated as set operations:\n *\n * #### Example:\n *\n *     Model.findByIdAndUpdate(id, { name: 'jason bourne' }, options)\n *\n *     // is sent as\n *     Model.findByIdAndUpdate(id, { $set: { name: 'jason bourne' }}, options)\n *\n * #### Note:\n *\n * `findOneAndX` and `findByIdAndX` functions support limited validation. You can\n * enable validation by setting the `runValidators` option.\n *\n * If you need full-fledged validation, use the traditional approach of first\n * retrieving the document.\n *\n *     const doc = await Model.findById(id)\n *     doc.name = 'jason bourne';\n *     await doc.save();\n *\n * @param {Object|Number|String} id value of `_id` to query by\n * @param {Object} [update]\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {String} [options.returnDocument='before'] Has two possible values, `'before'` and `'after'`. By default, it will return the document before the update was applied.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.lean()) and [the Mongoose lean tutorial](https://mongoosejs.com/docs/tutorials/lean.html).\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Object|String} [options.sort] if multiple docs are found by the conditions, sets the sort order to choose which doc to update.\n * @param {Boolean} [options.runValidators] if true, runs [update validators](https://mongoosejs.com/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema\n * @param {Boolean} [options.setDefaultsOnInsert=true] If `setDefaultsOnInsert` and `upsert` are true, mongoose will apply the [defaults](https://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created\n * @param {Boolean} [options.includeResultMetadata] if true, returns the full [ModifyResult from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html) rather than just the document\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Boolean} [options.new=false] if true, return the modified document rather than the original\n * @param {Object|String} [options.select] sets the document fields to return.\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @see Model.findOneAndUpdate https://mongoosejs.com/docs/api/model.html#Model.findOneAndUpdate()\n * @see mongodb https://www.mongodb.com/docs/manual/reference/command/findAndModify/\n * @api public\n */\n\nModel.findByIdAndUpdate = function(id, update, options) {\n  _checkContext(this, 'findByIdAndUpdate');\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function' || typeof arguments[3] === 'function') {\n    throw new MongooseError('Model.findByIdAndUpdate() no longer accepts a callback');\n  }\n\n  // if a model is passed in instead of an id\n  if (id instanceof Document) {\n    id = id._id;\n  }\n\n  return this.findOneAndUpdate.call(this, { _id: id }, update, options);\n};\n\n/**\n * Issue a MongoDB `findOneAndDelete()` command.\n *\n * Finds a matching document, removes it, and returns the found document (if any).\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndDelete()`\n *\n * #### Example:\n *\n *     A.findOneAndDelete(conditions, options)  // return Query\n *     A.findOneAndDelete(conditions) // returns Query\n *     A.findOneAndDelete()           // returns Query\n *\n * `findOneAndX` and `findByIdAndX` functions support limited validation. You can\n * enable validation by setting the `runValidators` option.\n *\n * If you need full-fledged validation, use the traditional approach of first\n * retrieving the document.\n *\n *     const doc = await Model.findById(id)\n *     doc.name = 'jason bourne';\n *     await doc.save();\n *\n * @param {Object} conditions\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Object|String|String[]} [options.projection=null] optional fields to return, see [`Query.prototype.select()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.select())\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {Boolean} [options.includeResultMetadata] if true, returns the full [ModifyResult from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html) rather than just the document\n * @param {Object|String} [options.sort] if multiple docs are found by the conditions, sets the sort order to choose which doc to update.\n * @param {Object|String} [options.select] sets the document fields to return.\n * @param {Number} [options.maxTimeMS] puts a time limit on the query - requires mongodb >= 2.6.0\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @api public\n */\n\nModel.findOneAndDelete = function(conditions, options) {\n  _checkContext(this, 'findOneAndDelete');\n\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.findOneAndDelete() no longer accepts a callback');\n  }\n\n  let fields;\n  if (options) {\n    fields = options.select;\n    options.select = undefined;\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(fields);\n\n  return mq.findOneAndDelete(conditions, options);\n};\n\n/**\n * Issue a MongoDB `findOneAndDelete()` command by a document's _id field.\n * In other words, `findByIdAndDelete(id)` is a shorthand for\n * `findOneAndDelete({ _id: id })`.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndDelete()`\n *\n * @param {Object|Number|String} id value of `_id` to query by\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @see Model.findOneAndDelete https://mongoosejs.com/docs/api/model.html#Model.findOneAndDelete()\n * @see mongodb https://www.mongodb.com/docs/manual/reference/command/findAndModify/\n */\n\nModel.findByIdAndDelete = function(id, options) {\n  _checkContext(this, 'findByIdAndDelete');\n\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.findByIdAndDelete() no longer accepts a callback');\n  }\n\n  return this.findOneAndDelete({ _id: id }, options);\n};\n\n/**\n * Issue a MongoDB `findOneAndReplace()` command.\n *\n * Finds a matching document, replaces it with the provided doc, and returns the document.\n *\n * This function triggers the following query middleware.\n *\n * - `findOneAndReplace()`\n *\n * #### Example:\n *\n *     A.findOneAndReplace(filter, replacement, options)  // return Query\n *     A.findOneAndReplace(filter, replacement) // returns Query\n *     A.findOneAndReplace()                    // returns Query\n *\n * @param {Object} filter Replace the first document that matches this filter\n * @param {Object} [replacement] Replace with this document\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {String} [options.returnDocument='before'] Has two possible values, `'before'` and `'after'`. By default, it will return the document before the update was applied.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.lean()) and [the Mongoose lean tutorial](https://mongoosejs.com/docs/tutorials/lean.html).\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Object|String|String[]} [options.projection=null] optional fields to return, see [`Query.prototype.select()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.select())\n * @param {Object|String} [options.sort] if multiple docs are found by the conditions, sets the sort order to choose which doc to update.\n * @param {Boolean} [options.includeResultMetadata] if true, returns the full [ModifyResult from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html) rather than just the document\n * @param {Object|String} [options.select] sets the document fields to return.\n * @param {Number} [options.maxTimeMS] puts a time limit on the query - requires mongodb >= 2.6.0\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @api public\n */\n\nModel.findOneAndReplace = function(filter, replacement, options) {\n  _checkContext(this, 'findOneAndReplace');\n\n  if (typeof arguments[0] === 'function' || typeof arguments[1] === 'function' || typeof arguments[2] === 'function' || typeof arguments[3] === 'function') {\n    throw new MongooseError('Model.findOneAndReplace() no longer accepts a callback');\n  }\n\n  let fields;\n  if (options) {\n    fields = options.select;\n    options.select = undefined;\n  }\n\n  const mq = new this.Query({}, {}, this, this.$__collection);\n  mq.select(fields);\n\n  return mq.findOneAndReplace(filter, replacement, options);\n};\n\n/**\n * Shortcut for saving one or more documents to the database.\n * `MyModel.create(docs)` does `new MyModel(doc).save()` for every doc in\n * docs.\n *\n * This function triggers the following middleware.\n *\n * - `save()`\n *\n * #### Example:\n *\n *     // Insert one new `Character` document\n *     await Character.create({ name: 'Jean-Luc Picard' });\n *\n *     // Insert multiple new `Character` documents\n *     await Character.create([{ name: 'Will Riker' }, { name: 'Geordi LaForge' }]);\n *\n *     // Create a new character within a transaction. Note that you **must**\n *     // pass an array as the first parameter to `create()` if you want to\n *     // specify options.\n *     await Character.create([{ name: 'Jean-Luc Picard' }], { session });\n *\n * @param {Array|Object} docs Documents to insert, as a spread or array\n * @param {Object} [options] Options passed down to `save()`. To specify `options`, `docs` **must** be an array, not a spread. See [Model.save](https://mongoosejs.com/docs/api/model.html#Model.prototype.save()) for available options.\n * @param {Boolean} [options.ordered] saves the docs in series rather than parallel.\n * @param {Boolean} [options.aggregateErrors] Aggregate Errors instead of throwing the first one that occurs. Default: false\n * @return {Promise}\n * @api public\n */\n\nModel.create = async function create(doc, options) {\n  if (typeof options === 'function' ||\n      typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.create() no longer accepts a callback');\n  }\n\n  _checkContext(this, 'create');\n\n  let args;\n  const discriminatorKey = this.schema.options.discriminatorKey;\n\n  if (Array.isArray(doc)) {\n    args = doc;\n    options = options != null && typeof options === 'object' ? options : {};\n  } else {\n    const last = arguments[arguments.length - 1];\n    options = {};\n    const hasCallback = typeof last === 'function' ||\n      typeof options === 'function' ||\n      typeof arguments[2] === 'function';\n    if (hasCallback) {\n      throw new MongooseError('Model.create() no longer accepts a callback');\n    } else {\n      args = [...arguments];\n      // For backwards compatibility with 6.x, because of gh-5061 Mongoose 6.x and\n      // older would treat a falsy last arg as a callback. We don't want to throw\n      // an error here, because it would look strange if `Test.create({}, void 0)`\n      // threw a callback error. But we also don't want to create an unnecessary document.\n      if (args.length > 1 && !last) {\n        args.pop();\n      }\n    }\n\n    if (args.length === 2 &&\n        args[0] != null &&\n        args[1] != null &&\n        args[0].session == null &&\n        last &&\n        getConstructorName(last.session) === 'ClientSession' &&\n        !this.schema.path('session')) {\n      // Probably means the user is running into the common mistake of trying\n      // to use a spread to specify options, see gh-7535\n      utils.warn('WARNING: to pass a `session` to `Model.create()` in ' +\n        'Mongoose, you **must** pass an array as the first argument. See: ' +\n        'https://mongoosejs.com/docs/api/model.html#Model.create()');\n    }\n  }\n\n  if (args.length === 0) {\n    return Array.isArray(doc) ? [] : null;\n  }\n  let res = [];\n  const immediateError = typeof options.aggregateErrors === 'boolean' ? !options.aggregateErrors : true;\n\n  delete options.aggregateErrors; // dont pass on the option to \"$save\"\n\n  if (options.ordered) {\n    for (let i = 0; i < args.length; i++) {\n      try {\n        const doc = args[i];\n        const Model = this.discriminators && doc[discriminatorKey] != null ?\n          this.discriminators[doc[discriminatorKey]] || getDiscriminatorByValue(this.discriminators, doc[discriminatorKey]) :\n          this;\n        if (Model == null) {\n          throw new MongooseError(`Discriminator \"${doc[discriminatorKey]}\" not ` +\n          `found for model \"${this.modelName}\"`);\n        }\n        let toSave = doc;\n        if (!(toSave instanceof Model)) {\n          toSave = new Model(toSave);\n        }\n\n        await toSave.$save(options);\n        res.push(toSave);\n      } catch (err) {\n        if (!immediateError) {\n          res.push(err);\n        } else {\n          throw err;\n        }\n      }\n    }\n    return res;\n  } else if (!immediateError) {\n    res = await Promise.allSettled(args.map(async doc => {\n      const Model = this.discriminators && doc[discriminatorKey] != null ?\n        this.discriminators[doc[discriminatorKey]] || getDiscriminatorByValue(this.discriminators, doc[discriminatorKey]) :\n        this;\n      if (Model == null) {\n        throw new MongooseError(`Discriminator \"${doc[discriminatorKey]}\" not ` +\n            `found for model \"${this.modelName}\"`);\n      }\n      let toSave = doc;\n\n      if (!(toSave instanceof Model)) {\n        toSave = new Model(toSave);\n      }\n\n      await toSave.$save(options);\n\n      return toSave;\n    }));\n    res = res.map(result => result.status === 'fulfilled' ? result.value : result.reason);\n  } else {\n    let firstError = null;\n    res = await Promise.all(args.map(async doc => {\n      const Model = this.discriminators && doc[discriminatorKey] != null ?\n        this.discriminators[doc[discriminatorKey]] || getDiscriminatorByValue(this.discriminators, doc[discriminatorKey]) :\n        this;\n      if (Model == null) {\n        throw new MongooseError(`Discriminator \"${doc[discriminatorKey]}\" not ` +\n            `found for model \"${this.modelName}\"`);\n      }\n      try {\n        let toSave = doc;\n\n        if (!(toSave instanceof Model)) {\n          toSave = new Model(toSave);\n        }\n\n        await toSave.$save(options);\n\n        return toSave;\n      } catch (err) {\n        if (!firstError) {\n          firstError = err;\n        }\n      }\n    }));\n    if (firstError) {\n      throw firstError;\n    }\n  }\n\n\n  if (!Array.isArray(doc) && args.length === 1) {\n    return res[0];\n  }\n\n  return res;\n};\n\n/**\n * _Requires a replica set running MongoDB >= 3.6.0._ Watches the\n * underlying collection for changes using\n * [MongoDB change streams](https://www.mongodb.com/docs/manual/changeStreams/).\n *\n * This function does **not** trigger any middleware. In particular, it\n * does **not** trigger aggregate middleware.\n *\n * The ChangeStream object is an event emitter that emits the following events:\n *\n * - 'change': A change occurred, see below example\n * - 'error': An unrecoverable error occurred. In particular, change streams currently error out if they lose connection to the replica set primary. Follow [this GitHub issue](https://github.com/Automattic/mongoose/issues/6799) for updates.\n * - 'end': Emitted if the underlying stream is closed\n * - 'close': Emitted if the underlying stream is closed\n *\n * #### Example:\n *\n *     const doc = await Person.create({ name: 'Ned Stark' });\n *     const changeStream = Person.watch().on('change', change => console.log(change));\n *     // Will print from the above `console.log()`:\n *     // { _id: { _data: ... },\n *     //   operationType: 'delete',\n *     //   ns: { db: 'mydb', coll: 'Person' },\n *     //   documentKey: { _id: 5a51b125c5500f5aa094c7bd } }\n *     await doc.remove();\n *\n * @param {Array} [pipeline]\n * @param {Object} [options] see the [mongodb driver options](https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#watch)\n * @param {Boolean} [options.hydrate=false] if true and `fullDocument: 'updateLookup'` is set, Mongoose will automatically hydrate `fullDocument` into a fully fledged Mongoose document\n * @return {ChangeStream} mongoose-specific change stream wrapper, inherits from EventEmitter\n * @api public\n */\n\nModel.watch = function(pipeline, options) {\n  _checkContext(this, 'watch');\n\n  const changeStreamThunk = cb => {\n    pipeline = pipeline || [];\n    prepareDiscriminatorPipeline(pipeline, this.schema, 'fullDocument');\n    if (this.$__collection.buffer) {\n      this.$__collection.addQueue(() => {\n        if (this.closed) {\n          return;\n        }\n        const driverChangeStream = this.$__collection.watch(pipeline, options);\n        cb(null, driverChangeStream);\n      });\n    } else {\n      const driverChangeStream = this.$__collection.watch(pipeline, options);\n      cb(null, driverChangeStream);\n    }\n  };\n\n  options = options || {};\n  options.model = this;\n\n  return new ChangeStream(changeStreamThunk, pipeline, options);\n};\n\n/**\n * _Requires MongoDB >= 3.6.0._ Starts a [MongoDB session](https://www.mongodb.com/docs/manual/release-notes/3.6/#client-sessions)\n * for benefits like causal consistency, [retryable writes](https://www.mongodb.com/docs/manual/core/retryable-writes/),\n * and [transactions](https://thecodebarbarian.com/a-node-js-perspective-on-mongodb-4-transactions.html).\n *\n * Calling `MyModel.startSession()` is equivalent to calling `MyModel.db.startSession()`.\n *\n * This function does not trigger any middleware.\n *\n * #### Example:\n *\n *     const session = await Person.startSession();\n *     let doc = await Person.findOne({ name: 'Ned Stark' }, null, { session });\n *     await doc.remove();\n *     // `doc` will always be null, even if reading from a replica set\n *     // secondary. Without causal consistency, it is possible to\n *     // get a doc back from the below query if the query reads from a\n *     // secondary that is experiencing replication lag.\n *     doc = await Person.findOne({ name: 'Ned Stark' }, null, { session, readPreference: 'secondary' });\n *\n * @param {Object} [options] see the [mongodb driver options](https://mongodb.github.io/node-mongodb-native/4.9/classes/MongoClient.html#startSession)\n * @param {Boolean} [options.causalConsistency=true] set to false to disable causal consistency\n * @return {Promise<ClientSession>} promise that resolves to a MongoDB driver `ClientSession`\n * @api public\n */\n\nModel.startSession = function() {\n  _checkContext(this, 'startSession');\n\n  return this.db.startSession.apply(this.db, arguments);\n};\n\n/**\n * Shortcut for validating an array of documents and inserting them into\n * MongoDB if they're all valid. This function is faster than `.create()`\n * because it only sends one operation to the server, rather than one for each\n * document.\n *\n * Mongoose always validates each document **before** sending `insertMany`\n * to MongoDB. So if one document has a validation error, no documents will\n * be saved, unless you set\n * [the `ordered` option to false](https://www.mongodb.com/docs/manual/reference/method/db.collection.insertMany/#error-handling).\n *\n * This function does **not** trigger save middleware.\n *\n * This function triggers the following middleware.\n *\n * - `insertMany()`\n *\n * #### Example:\n *\n *     await Movies.insertMany([\n *       { name: 'Star Wars' },\n *       { name: 'The Empire Strikes Back' }\n *     ]);\n *\n * @param {Array|Object|*} doc(s)\n * @param {Object} [options] see the [mongodb driver options](https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#insertMany)\n * @param {Boolean} [options.ordered=true] if true, will fail fast on the first error encountered. If false, will insert all the documents it can and report errors later. An `insertMany()` with `ordered = false` is called an \"unordered\" `insertMany()`.\n * @param {Boolean} [options.rawResult=false] if false, the returned promise resolves to the documents that passed mongoose document validation. If `true`, will return the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/InsertManyResult.html) with a `mongoose` property that contains `validationErrors` and `results` if this is an unordered `insertMany`.\n * @param {Boolean} [options.lean=false] if `true`, skips hydrating and validating the documents. This option is useful if you need the extra performance, but Mongoose won't validate the documents before inserting.\n * @param {Number} [options.limit=null] this limits the number of documents being processed (validation/casting) by mongoose in parallel, this does **NOT** send the documents in batches to MongoDB. Use this option if you're processing a large number of documents and your app is running out of memory.\n * @param {String|Object|Array} [options.populate=null] populates the result documents. This option is a no-op if `rawResult` is set.\n * @param {Boolean} [options.throwOnValidationError=false] If true and `ordered: false`, throw an error if one of the operations failed validation, but all valid operations completed successfully.\n * @return {Promise} resolving to the raw result from the MongoDB driver if `options.rawResult` was `true`, or the documents that passed validation, otherwise\n * @api public\n */\n\nModel.insertMany = async function insertMany(arr, options) {\n  _checkContext(this, 'insertMany');\n  if (typeof options === 'function' ||\n    typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.insertMany() no longer accepts a callback');\n  }\n\n  return new Promise((resolve, reject) => {\n    this.$__insertMany(arr, options, (err, res) => {\n      if (err != null) {\n        return reject(err);\n      }\n      resolve(res);\n    });\n  });\n};\n\n/**\n * ignore\n *\n * @param {Array} arr\n * @param {Object} options\n * @param {Function} callback\n * @api private\n * @memberOf Model\n * @method $__insertMany\n * @static\n */\n\nModel.$__insertMany = function(arr, options, callback) {\n  const _this = this;\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  callback = callback || utils.noop;\n  options = options || {};\n  const limit = options.limit || 1000;\n  const rawResult = !!options.rawResult;\n  const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n  const throwOnValidationError = typeof options.throwOnValidationError === 'boolean' ? options.throwOnValidationError : false;\n  const lean = !!options.lean;\n\n  if (!Array.isArray(arr)) {\n    arr = [arr];\n  }\n\n  const validationErrors = [];\n  const validationErrorsToOriginalOrder = new Map();\n  const results = ordered ? null : new Array(arr.length);\n  const toExecute = arr.map((doc, index) =>\n    callback => {\n      if (!(doc instanceof _this)) {\n        try {\n          doc = new _this(doc);\n        } catch (err) {\n          return callback(err);\n        }\n      }\n      if (options.session != null) {\n        doc.$session(options.session);\n      }\n      // If option `lean` is set to true bypass validation\n      if (lean) {\n        // we have to execute callback at the nextTick to be compatible\n        // with parallelLimit, as `results` variable has TDZ issue if we\n        // execute the callback synchronously\n        return immediate(() => callback(null, doc));\n      }\n      doc.$validate().then(\n        () => { callback(null, doc); },\n        error => {\n          if (ordered === false) {\n            validationErrors.push(error);\n            validationErrorsToOriginalOrder.set(error, index);\n            results[index] = error;\n            return callback(null, null);\n          }\n          callback(error);\n        }\n      );\n    });\n\n  parallelLimit(toExecute, limit, function(error, docs) {\n    if (error) {\n      callback(error, null);\n      return;\n    }\n\n    const originalDocIndex = new Map();\n    const validDocIndexToOriginalIndex = new Map();\n    for (let i = 0; i < docs.length; ++i) {\n      originalDocIndex.set(docs[i], i);\n    }\n\n    // We filter all failed pre-validations by removing nulls\n    const docAttributes = docs.filter(function(doc) {\n      return doc != null;\n    });\n    for (let i = 0; i < docAttributes.length; ++i) {\n      validDocIndexToOriginalIndex.set(i, originalDocIndex.get(docAttributes[i]));\n    }\n\n    // Make sure validation errors are in the same order as the\n    // original documents, so if both doc1 and doc2 both fail validation,\n    // `Model.insertMany([doc1, doc2])` will always have doc1's validation\n    // error before doc2's. Re: gh-12791.\n    if (validationErrors.length > 0) {\n      validationErrors.sort((err1, err2) => {\n        return validationErrorsToOriginalOrder.get(err1) - validationErrorsToOriginalOrder.get(err2);\n      });\n    }\n\n    // Quickly escape while there aren't any valid docAttributes\n    if (docAttributes.length === 0) {\n      if (rawResult) {\n        const res = {\n          acknowledged: true,\n          insertedCount: 0,\n          insertedIds: {},\n          mongoose: {\n            validationErrors: validationErrors\n          }\n        };\n        return callback(null, res);\n      }\n      callback(null, []);\n      return;\n    }\n    const docObjects = docAttributes.map(function(doc) {\n      if (doc.$__schema.options.versionKey) {\n        doc[doc.$__schema.options.versionKey] = 0;\n      }\n      const shouldSetTimestamps = (!options || options.timestamps !== false) && doc.initializeTimestamps && (!doc.$__ || doc.$__.timestamps !== false);\n      if (shouldSetTimestamps) {\n        return doc.initializeTimestamps().toObject(internalToObjectOptions);\n      }\n      return doc.toObject(internalToObjectOptions);\n    });\n\n    _this.$__collection.insertMany(docObjects, options).then(\n      res => {\n        for (const attribute of docAttributes) {\n          attribute.$__reset();\n          _setIsNew(attribute, false);\n        }\n\n        if (ordered === false && throwOnValidationError && validationErrors.length > 0) {\n          for (let i = 0; i < results.length; ++i) {\n            if (results[i] === void 0) {\n              results[i] = docs[i];\n            }\n          }\n          return callback(new MongooseBulkWriteError(\n            validationErrors,\n            results,\n            res,\n            'insertMany'\n          ));\n        }\n\n        if (rawResult) {\n          if (ordered === false) {\n            for (let i = 0; i < results.length; ++i) {\n              if (results[i] === void 0) {\n                results[i] = docs[i];\n              }\n            }\n\n            // Decorate with mongoose validation errors in case of unordered,\n            // because then still do `insertMany()`\n            res.mongoose = {\n              validationErrors: validationErrors,\n              results: results\n            };\n          }\n          return callback(null, res);\n        }\n\n        if (options.populate != null) {\n          return _this.populate(docAttributes, options.populate).then(\n            docs => { callback(null, docs); },\n            err => {\n              if (err != null) {\n                err.insertedDocs = docAttributes;\n              }\n              throw err;\n            }\n          );\n        }\n\n        callback(null, docAttributes);\n      },\n      error => {\n        // `writeErrors` is a property reported by the MongoDB driver,\n        // just not if there's only 1 error.\n        if (error.writeErrors == null &&\n            (error.result && error.result.result && error.result.result.writeErrors) != null) {\n          error.writeErrors = error.result.result.writeErrors;\n        }\n\n        // `insertedDocs` is a Mongoose-specific property\n        const hasWriteErrors = error && error.writeErrors;\n        const erroredIndexes = new Set((error && error.writeErrors || []).map(err => err.index));\n\n        if (error.writeErrors != null) {\n          for (let i = 0; i < error.writeErrors.length; ++i) {\n            const originalIndex = validDocIndexToOriginalIndex.get(error.writeErrors[i].index);\n            error.writeErrors[i] = {\n              ...error.writeErrors[i],\n              index: originalIndex\n            };\n            if (!ordered) {\n              results[originalIndex] = error.writeErrors[i];\n            }\n          }\n        }\n\n        if (!ordered) {\n          for (let i = 0; i < results.length; ++i) {\n            if (results[i] === void 0) {\n              results[i] = docs[i];\n            }\n          }\n\n          error.results = results;\n        }\n\n        let firstErroredIndex = -1;\n        error.insertedDocs = docAttributes.\n          filter((doc, i) => {\n            const isErrored = !hasWriteErrors || erroredIndexes.has(i);\n\n            if (ordered) {\n              if (firstErroredIndex > -1) {\n                return i < firstErroredIndex;\n              }\n\n              if (isErrored) {\n                firstErroredIndex = i;\n              }\n            }\n\n            return !isErrored;\n          }).\n          map(function setIsNewForInsertedDoc(doc) {\n            doc.$__reset();\n            _setIsNew(doc, false);\n            return doc;\n          });\n\n        if (rawResult && ordered === false) {\n          error.mongoose = {\n            validationErrors: validationErrors,\n            results: results\n          };\n        }\n\n        callback(error, null);\n      }\n    );\n  });\n};\n\n/*!\n * ignore\n */\n\nfunction _setIsNew(doc, val) {\n  doc.$isNew = val;\n  doc.$emit('isNew', val);\n  doc.constructor.emit('isNew', val);\n\n  const subdocs = doc.$getAllSubdocs();\n  for (const subdoc of subdocs) {\n    subdoc.$isNew = val;\n    subdoc.$emit('isNew', val);\n  }\n}\n\n/**\n * Sends multiple `insertOne`, `updateOne`, `updateMany`, `replaceOne`,\n * `deleteOne`, and/or `deleteMany` operations to the MongoDB server in one\n * command. This is faster than sending multiple independent operations (e.g.\n * if you use `create()`) because with `bulkWrite()` there is only one round\n * trip to MongoDB.\n *\n * Mongoose will perform casting on all operations you provide.\n *\n * This function does **not** trigger any middleware, neither `save()`, nor `update()`.\n * If you need to trigger\n * `save()` middleware for every document use [`create()`](https://mongoosejs.com/docs/api/model.html#Model.create()) instead.\n *\n * #### Example:\n *\n *     Character.bulkWrite([\n *       {\n *         insertOne: {\n *           document: {\n *             name: 'Eddard Stark',\n *             title: 'Warden of the North'\n *           }\n *         }\n *       },\n *       {\n *         updateOne: {\n *           filter: { name: 'Eddard Stark' },\n *           // If you were using the MongoDB driver directly, you'd need to do\n *           // `update: { $set: { title: ... } }` but mongoose adds $set for\n *           // you.\n *           update: { title: 'Hand of the King' }\n *         }\n *       },\n *       {\n *         deleteOne: {\n *           filter: { name: 'Eddard Stark' }\n *         }\n *       }\n *     ]).then(res => {\n *      // Prints \"1 1 1\"\n *      console.log(res.insertedCount, res.modifiedCount, res.deletedCount);\n *     });\n *\n * The [supported operations](https://www.mongodb.com/docs/manual/reference/method/db.collection.bulkWrite/#db.collection.bulkWrite) are:\n *\n * - `insertOne`\n * - `updateOne`\n * - `updateMany`\n * - `deleteOne`\n * - `deleteMany`\n * - `replaceOne`\n *\n * @param {Array} ops\n * @param {Object} [ops.insertOne.document] The document to insert\n * @param {Object} [ops.updateOne.filter] Update the first document that matches this filter\n * @param {Object} [ops.updateOne.update] An object containing [update operators](https://www.mongodb.com/docs/manual/reference/operator/update/)\n * @param {Boolean} [ops.updateOne.upsert=false] If true, insert a doc if none match\n * @param {Boolean} [ops.updateOne.timestamps=true] If false, do not apply [timestamps](https://mongoosejs.com/docs/guide.html#timestamps) to the operation\n * @param {Object} [ops.updateOne.collation] The [MongoDB collation](https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-34-collations) to use\n * @param {Array} [ops.updateOne.arrayFilters] The [array filters](https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-36-array-filters.html) used in `update`\n * @param {Object} [ops.updateMany.filter] Update all the documents that match this filter\n * @param {Object} [ops.updateMany.update] An object containing [update operators](https://www.mongodb.com/docs/manual/reference/operator/update/)\n * @param {Boolean} [ops.updateMany.upsert=false] If true, insert a doc if no documents match `filter`\n * @param {Boolean} [ops.updateMany.timestamps=true] If false, do not apply [timestamps](https://mongoosejs.com/docs/guide.html#timestamps) to the operation\n * @param {Object} [ops.updateMany.collation] The [MongoDB collation](https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-34-collations) to use\n * @param {Array} [ops.updateMany.arrayFilters] The [array filters](https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-36-array-filters.html) used in `update`\n * @param {Object} [ops.deleteOne.filter] Delete the first document that matches this filter\n * @param {Object} [ops.deleteMany.filter] Delete all documents that match this filter\n * @param {Object} [ops.replaceOne.filter] Replace the first document that matches this filter\n * @param {Object} [ops.replaceOne.replacement] The replacement document\n * @param {Boolean} [ops.replaceOne.upsert=false] If true, insert a doc if no documents match `filter`\n * @param {Object} [options]\n * @param {Boolean} [options.ordered=true] If true, execute writes in order and stop at the first error. If false, execute writes in parallel and continue until all writes have either succeeded or errored.\n * @param {ClientSession} [options.session=null] The session associated with this bulk write. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {String|number} [options.w=1] The [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/). See [`Query#w()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.w()) for more information.\n * @param {number} [options.wtimeout=null] The [write concern timeout](https://www.mongodb.com/docs/manual/reference/write-concern/#wtimeout).\n * @param {Boolean} [options.j=true] If false, disable [journal acknowledgement](https://www.mongodb.com/docs/manual/reference/write-concern/#j-option)\n * @param {Boolean} [options.skipValidation=false] Set to true to skip Mongoose schema validation on bulk write operations. Mongoose currently runs validation on `insertOne` and `replaceOne` operations by default.\n * @param {Boolean} [options.bypassDocumentValidation=false] If true, disable [MongoDB server-side schema validation](https://www.mongodb.com/docs/manual/core/schema-validation/) for all writes in this bulk.\n * @param {Boolean} [options.throwOnValidationError=false] If true and `ordered: false`, throw an error if one of the operations failed validation, but all valid operations completed successfully.\n * @param {Boolean} [options.strict=null] Overwrites the [`strict` option](https://mongoosejs.com/docs/guide.html#strict) on schema. If false, allows filtering and writing fields not defined in the schema for all writes in this bulk.\n * @return {Promise} resolves to a [`BulkWriteOpResult`](https://mongodb.github.io/node-mongodb-native/4.9/classes/BulkWriteResult.html) if the operation succeeds\n * @api public\n */\n\nModel.bulkWrite = async function bulkWrite(ops, options) {\n  _checkContext(this, 'bulkWrite');\n\n  if (typeof options === 'function' ||\n      typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.bulkWrite() no longer accepts a callback');\n  }\n  options = options || {};\n  const ordered = options.ordered == null ? true : options.ordered;\n\n  const validations = ops.map(op => castBulkWrite(this, op, options));\n\n  return new Promise((resolve, reject) => {\n    if (ordered) {\n      each(validations, (fn, cb) => fn(cb), error => {\n        if (error) {\n          return reject(error);\n        }\n\n        if (ops.length === 0) {\n          return resolve(getDefaultBulkwriteResult());\n        }\n\n        try {\n          this.$__collection.bulkWrite(ops, options, (error, res) => {\n            if (error) {\n              return reject(error);\n            }\n\n            resolve(res);\n          });\n        } catch (err) {\n          return reject(err);\n        }\n      });\n\n      return;\n    }\n\n    let remaining = validations.length;\n    let validOps = [];\n    let validationErrors = [];\n    const results = [];\n    if (remaining === 0) {\n      completeUnorderedValidation.call(this);\n    } else {\n      for (let i = 0; i < validations.length; ++i) {\n        validations[i]((err) => {\n          if (err == null) {\n            validOps.push(i);\n          } else {\n            validationErrors.push({ index: i, error: err });\n            results[i] = err;\n          }\n          if (--remaining <= 0) {\n            completeUnorderedValidation.call(this);\n          }\n        });\n      }\n    }\n\n    validationErrors = validationErrors.\n      sort((v1, v2) => v1.index - v2.index).\n      map(v => v.error);\n\n    function completeUnorderedValidation() {\n      const validOpIndexes = validOps;\n      validOps = validOps.sort().map(index => ops[index]);\n\n      if (validOps.length === 0) {\n        return resolve(getDefaultBulkwriteResult());\n      }\n\n      this.$__collection.bulkWrite(validOps, options, (error, res) => {\n        if (error) {\n          if (validationErrors.length > 0) {\n            error.mongoose = error.mongoose || {};\n            error.mongoose.validationErrors = validationErrors;\n          }\n\n          return reject(error);\n        }\n\n        for (let i = 0; i < validOpIndexes.length; ++i) {\n          results[validOpIndexes[i]] = null;\n        }\n        if (validationErrors.length > 0) {\n          if (options.throwOnValidationError) {\n            return reject(new MongooseBulkWriteError(\n              validationErrors,\n              results,\n              res,\n              'bulkWrite'\n            ));\n          } else {\n            res.mongoose = res.mongoose || {};\n            res.mongoose.validationErrors = validationErrors;\n            res.mongoose.results = results;\n          }\n        }\n\n        resolve(res);\n      });\n    }\n  });\n};\n\n/**\n *  takes an array of documents, gets the changes and inserts/updates documents in the database\n *  according to whether or not the document is new, or whether it has changes or not.\n *\n * `bulkSave` uses `bulkWrite` under the hood, so it's mostly useful when dealing with many documents (10K+)\n *\n * @param {Array<Document>} documents\n * @param {Object} [options] options passed to the underlying `bulkWrite()`\n * @param {Boolean} [options.timestamps] defaults to `null`, when set to false, mongoose will not add/update timestamps to the documents.\n * @param {ClientSession} [options.session=null] The session associated with this bulk write. See [transactions docs](https://mongoosejs.com/docs/transactions.html).\n * @param {String|number} [options.w=1] The [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/). See [`Query#w()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.w()) for more information.\n * @param {number} [options.wtimeout=null] The [write concern timeout](https://www.mongodb.com/docs/manual/reference/write-concern/#wtimeout).\n * @param {Boolean} [options.j=true] If false, disable [journal acknowledgement](https://www.mongodb.com/docs/manual/reference/write-concern/#j-option)\n *\n */\nModel.bulkSave = async function bulkSave(documents, options) {\n  options = options || {};\n\n  if (options.timestamps != null) {\n    for (const document of documents) {\n      document.$__.saveOptions = document.$__.saveOptions || {};\n      document.$__.saveOptions.timestamps = options.timestamps;\n    }\n  } else {\n    for (const document of documents) {\n      if (document.$__.timestamps != null) {\n        document.$__.saveOptions = document.$__.saveOptions || {};\n        document.$__.saveOptions.timestamps = document.$__.timestamps;\n      }\n    }\n  }\n\n  await Promise.all(documents.map(buildPreSavePromise));\n\n  const writeOperations = this.buildBulkWriteOperations(documents, { skipValidation: true, timestamps: options.timestamps });\n\n  const { bulkWriteResult, bulkWriteError } = await this.bulkWrite(writeOperations, options).then(\n    (res) => ({ bulkWriteResult: res, bulkWriteError: null }),\n    (err) => ({ bulkWriteResult: null, bulkWriteError: err })\n  );\n\n  await Promise.all(\n    documents.map(async(document) => {\n      const documentError = bulkWriteError && bulkWriteError.writeErrors.find(writeError => {\n        const writeErrorDocumentId = writeError.err.op._id || writeError.err.op.q._id;\n        return writeErrorDocumentId.toString() === document._id.toString();\n      });\n\n      if (documentError == null) {\n        await handleSuccessfulWrite(document);\n      }\n    })\n  );\n\n  if (bulkWriteError && bulkWriteError.writeErrors && bulkWriteError.writeErrors.length) {\n    throw bulkWriteError;\n  }\n\n  return bulkWriteResult;\n};\n\nfunction buildPreSavePromise(document) {\n  return new Promise((resolve, reject) => {\n    document.schema.s.hooks.execPre('save', document, (err) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve();\n    });\n  });\n}\n\nfunction handleSuccessfulWrite(document) {\n  return new Promise((resolve, reject) => {\n    if (document.$isNew) {\n      _setIsNew(document, false);\n    }\n\n    document.$__reset();\n    document.schema.s.hooks.execPost('save', document, [document], {}, (err) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve();\n    });\n\n  });\n}\n\n/**\n * Apply defaults to the given document or POJO.\n *\n * @param {Object|Document} obj object or document to apply defaults on\n * @returns {Object|Document}\n * @api public\n */\n\nModel.applyDefaults = function applyDefaults(doc) {\n  if (doc.$__ != null) {\n    applyDefaultsHelper(doc, doc.$__.fields, doc.$__.exclude);\n\n    for (const subdoc of doc.$getAllSubdocs()) {\n      applyDefaults(subdoc, subdoc.$__.fields, subdoc.$__.exclude);\n    }\n\n    return doc;\n  }\n\n  applyDefaultsToPOJO(doc, this.schema);\n\n  return doc;\n};\n\n/**\n * Cast the given POJO to the model's schema\n *\n * #### Example:\n *\n *     const Test = mongoose.model('Test', Schema({ num: Number }));\n *\n *     const obj = Test.castObject({ num: '42' });\n *     obj.num; // 42 as a number\n *\n *     Test.castObject({ num: 'not a number' }); // Throws a ValidationError\n *\n * @param {Object} obj object or document to cast\n * @param {Object} options options passed to castObject\n * @param {Boolean} options.ignoreCastErrors If set to `true` will not throw a ValidationError and only return values that were successfully cast.\n * @returns {Object} POJO casted to the model's schema\n * @throws {ValidationError} if casting failed for at least one path\n * @api public\n */\n\nModel.castObject = function castObject(obj, options) {\n  options = options || {};\n  const ret = {};\n\n  const schema = this.schema;\n  const paths = Object.keys(schema.paths);\n\n  for (const path of paths) {\n    const schemaType = schema.path(path);\n    if (!schemaType || !schemaType.$isMongooseArray) {\n      continue;\n    }\n\n    const val = get(obj, path);\n    pushNestedArrayPaths(paths, val, path);\n  }\n\n  let error = null;\n\n  for (const path of paths) {\n    const schemaType = schema.path(path);\n    if (schemaType == null) {\n      continue;\n    }\n\n    let val = get(obj, path, void 0);\n\n    if (val == null) {\n      continue;\n    }\n\n    const pieces = path.indexOf('.') === -1 ? [path] : path.split('.');\n    let cur = ret;\n    for (let i = 0; i < pieces.length - 1; ++i) {\n      if (cur[pieces[i]] == null) {\n        cur[pieces[i]] = isNaN(pieces[i + 1]) ? {} : [];\n      }\n      cur = cur[pieces[i]];\n    }\n\n    if (schemaType.$isMongooseDocumentArray) {\n      continue;\n    }\n    if (schemaType.$isSingleNested || schemaType.$isMongooseDocumentArrayElement) {\n      try {\n        val = Model.castObject.call(schemaType.caster, val);\n      } catch (err) {\n        if (!options.ignoreCastErrors) {\n          error = error || new ValidationError();\n          error.addError(path, err);\n        }\n        continue;\n      }\n\n      cur[pieces[pieces.length - 1]] = val;\n      continue;\n    }\n\n    try {\n      val = schemaType.cast(val);\n      cur[pieces[pieces.length - 1]] = val;\n    } catch (err) {\n      if (!options.ignoreCastErrors) {\n        error = error || new ValidationError();\n        error.addError(path, err);\n      }\n\n      continue;\n    }\n  }\n\n  if (error != null) {\n    throw error;\n  }\n\n  return ret;\n};\n\n/**\n * Build bulk write operations for `bulkSave()`.\n *\n * @param {Array<Document>} documents The array of documents to build write operations of\n * @param {Object} options\n * @param {Boolean} options.skipValidation defaults to `false`, when set to true, building the write operations will bypass validating the documents.\n * @param {Boolean} options.timestamps defaults to `null`, when set to false, mongoose will not add/update timestamps to the documents.\n * @return {Array<Promise>} Returns a array of all Promises the function executes to be awaited.\n * @api private\n */\n\nModel.buildBulkWriteOperations = function buildBulkWriteOperations(documents, options) {\n  if (!Array.isArray(documents)) {\n    throw new Error(`bulkSave expects an array of documents to be passed, received \\`${documents}\\` instead`);\n  }\n\n  setDefaultOptions();\n  const discriminatorKey = this.schema.options.discriminatorKey;\n\n  const writeOperations = documents.reduce((accumulator, document, i) => {\n    if (!options.skipValidation) {\n      if (!(document instanceof Document)) {\n        throw new Error(`documents.${i} was not a mongoose document, documents must be an array of mongoose documents (instanceof mongoose.Document).`);\n      }\n      const validationError = document.validateSync();\n      if (validationError) {\n        throw validationError;\n      }\n    }\n\n    const isANewDocument = document.isNew;\n    if (isANewDocument) {\n      const writeOperation = { insertOne: { document } };\n      utils.injectTimestampsOption(writeOperation.insertOne, options.timestamps);\n      accumulator.push(writeOperation);\n\n      return accumulator;\n    }\n\n    const delta = document.$__delta();\n    const isDocumentWithChanges = delta != null && !utils.isEmptyObject(delta[0]);\n\n    if (isDocumentWithChanges) {\n      const where = document.$__where(delta[0]);\n      const changes = delta[1];\n\n      _applyCustomWhere(document, where);\n\n      // Set the discriminator key, so bulk write casting knows which\n      // schema to use re: gh-13907\n      if (document[discriminatorKey] != null && !(discriminatorKey in where)) {\n        where[discriminatorKey] = document[discriminatorKey];\n      }\n\n      document.$__version(where, delta);\n      const writeOperation = { updateOne: { filter: where, update: changes } };\n      utils.injectTimestampsOption(writeOperation.updateOne, options.timestamps);\n      accumulator.push(writeOperation);\n\n      return accumulator;\n    }\n\n    return accumulator;\n  }, []);\n\n  return writeOperations;\n\n\n  function setDefaultOptions() {\n    options = options || {};\n    if (options.skipValidation == null) {\n      options.skipValidation = false;\n    }\n  }\n};\n\n\n/**\n * Shortcut for creating a new Document from existing raw data, pre-saved in the DB.\n * The document returned has no paths marked as modified initially.\n *\n * #### Example:\n *\n *     // hydrate previous data into a Mongoose document\n *     const mongooseCandy = Candy.hydrate({ _id: '54108337212ffb6d459f854c', type: 'jelly bean' });\n *\n * @param {Object} obj\n * @param {Object|String|String[]} [projection] optional projection containing which fields should be selected for this document\n * @param {Object} [options] optional options\n * @param {Boolean} [options.setters=false] if true, apply schema setters when hydrating\n * @return {Document} document instance\n * @api public\n */\n\nModel.hydrate = function(obj, projection, options) {\n  _checkContext(this, 'hydrate');\n\n  if (projection != null) {\n    if (obj != null && obj.$__ != null) {\n      obj = obj.toObject(internalToObjectOptions);\n    }\n    obj = applyProjection(obj, projection);\n  }\n\n  const document = require('./queryHelpers').createModel(this, obj, projection);\n  document.$init(obj, options);\n  return document;\n};\n\n/**\n * Same as `updateOne()`, except MongoDB will update _all_ documents that match\n * `filter` (as opposed to just the first one) regardless of the value of\n * the `multi` option.\n *\n * **Note** updateMany will _not_ fire update middleware. Use `pre('updateMany')`\n * and `post('updateMany')` instead.\n *\n * #### Example:\n *\n *     const res = await Person.updateMany({ name: /Stark$/ }, { isDeleted: true });\n *     res.matchedCount; // Number of documents matched\n *     res.modifiedCount; // Number of documents modified\n *     res.acknowledged; // Boolean indicating everything went smoothly.\n *     res.upsertedId; // null or an id containing a document that had to be upserted.\n *     res.upsertedCount; // Number indicating how many documents had to be upserted. Will either be 0 or 1.\n *\n * This function triggers the following middleware.\n *\n * - `updateMany()`\n *\n * @param {Object} filter\n * @param {Object|Array} update\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see MongoDB docs https://www.mongodb.com/docs/manual/reference/command/update/#update-command-output\n * @see UpdateResult https://mongodb.github.io/node-mongodb-native/4.9/interfaces/UpdateResult.html\n * @api public\n */\n\nModel.updateMany = function updateMany(conditions, doc, options) {\n  _checkContext(this, 'updateMany');\n\n  return _update(this, 'updateMany', conditions, doc, options);\n};\n\n/**\n * Update _only_ the first document that matches `filter`.\n *\n * - Use `replaceOne()` if you want to overwrite an entire document rather than using atomic operators like `$set`.\n *\n * #### Example:\n *\n *     const res = await Person.updateOne({ name: 'Jean-Luc Picard' }, { ship: 'USS Enterprise' });\n *     res.matchedCount; // Number of documents matched\n *     res.modifiedCount; // Number of documents modified\n *     res.acknowledged; // Boolean indicating everything went smoothly.\n *     res.upsertedId; // null or an id containing a document that had to be upserted.\n *     res.upsertedCount; // Number indicating how many documents had to be upserted. Will either be 0 or 1.\n *\n * This function triggers the following middleware.\n *\n * - `updateOne()`\n *\n * @param {Object} filter\n * @param {Object|Array} update\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see MongoDB docs https://www.mongodb.com/docs/manual/reference/command/update/#update-command-output\n * @see UpdateResult https://mongodb.github.io/node-mongodb-native/4.9/interfaces/UpdateResult.html\n * @api public\n */\n\nModel.updateOne = function updateOne(conditions, doc, options) {\n  _checkContext(this, 'updateOne');\n\n  return _update(this, 'updateOne', conditions, doc, options);\n};\n\n/**\n * Replace the existing document with the given document (no atomic operators like `$set`).\n *\n * #### Example:\n *\n *     const res = await Person.replaceOne({ _id: 24601 }, { name: 'Jean Valjean' });\n *     res.matchedCount; // Number of documents matched\n *     res.modifiedCount; // Number of documents modified\n *     res.acknowledged; // Boolean indicating everything went smoothly.\n *     res.upsertedId; // null or an id containing a document that had to be upserted.\n *     res.upsertedCount; // Number indicating how many documents had to be upserted. Will either be 0 or 1.\n *\n * This function triggers the following middleware.\n *\n * - `replaceOne()`\n *\n * @param {Object} filter\n * @param {Object} doc\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.setOptions())\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](https://mongoosejs.com/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](https://mongoosejs.com/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.translateAliases=null] If set to `true`, translates any schema-defined aliases in `filter`, `projection`, `update`, and `distinct`. Throws an error if there are any conflicts where both alias and raw property are defined on the same object.\n * @return {Query}\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see UpdateResult https://mongodb.github.io/node-mongodb-native/4.9/interfaces/UpdateResult.html\n * @return {Query}\n * @api public\n */\n\nModel.replaceOne = function replaceOne(conditions, doc, options) {\n  _checkContext(this, 'replaceOne');\n\n  const versionKey = this && this.schema && this.schema.options && this.schema.options.versionKey || null;\n  if (versionKey && !doc[versionKey]) {\n    doc[versionKey] = 0;\n  }\n\n  return _update(this, 'replaceOne', conditions, doc, options);\n};\n\n/**\n * Common code for `updateOne()`, `updateMany()`, `replaceOne()`, and `update()`\n * because they need to do the same thing\n * @api private\n */\n\nfunction _update(model, op, conditions, doc, options) {\n  const mq = new model.Query({}, {}, model, model.collection);\n\n  // gh-2406\n  // make local deep copy of conditions\n  if (conditions instanceof Document) {\n    conditions = conditions.toObject();\n  } else {\n    conditions = clone(conditions);\n  }\n  options = typeof options === 'function' ? options : clone(options);\n\n  const versionKey = model &&\n  model.schema &&\n  model.schema.options &&\n  model.schema.options.versionKey || null;\n  decorateUpdateWithVersionKey(doc, options, versionKey);\n\n  return mq[op](conditions, doc, options);\n}\n\n/**\n * Performs [aggregations](https://www.mongodb.com/docs/manual/aggregation/) on the models collection.\n *\n * If a `callback` is passed, the `aggregate` is executed and a `Promise` is returned. If a callback is not passed, the `aggregate` itself is returned.\n *\n * This function triggers the following middleware.\n *\n * - `aggregate()`\n *\n * #### Example:\n *\n *     // Find the max balance of all accounts\n *     const res = await Users.aggregate([\n *       { $group: { _id: null, maxBalance: { $max: '$balance' }}},\n *       { $project: { _id: 0, maxBalance: 1 }}\n *     ]);\n *\n *     console.log(res); // [ { maxBalance: 98000 } ]\n *\n *     // Or use the aggregation pipeline builder.\n *     const res = await Users.aggregate().\n *       group({ _id: null, maxBalance: { $max: '$balance' } }).\n *       project('-id maxBalance').\n *       exec();\n *     console.log(res); // [ { maxBalance: 98 } ]\n *\n * #### Note:\n *\n * - Mongoose does **not** cast aggregation pipelines to the model's schema because `$project` and `$group` operators allow redefining the \"shape\" of the documents at any stage of the pipeline, which may leave documents in an incompatible format. You can use the [mongoose-cast-aggregation plugin](https://github.com/AbdelrahmanHafez/mongoose-cast-aggregation) to enable minimal casting for aggregation pipelines.\n * - The documents returned are plain javascript objects, not mongoose documents (since any shape of document can be returned).\n *\n * #### More About Aggregations:\n *\n * - [Mongoose `Aggregate`](https://mongoosejs.com/docs/api/aggregate.html)\n * - [An Introduction to Mongoose Aggregate](https://masteringjs.io/tutorials/mongoose/aggregate)\n * - [MongoDB Aggregation docs](https://www.mongodb.com/docs/manual/applications/aggregation/)\n *\n * @see Aggregate https://mongoosejs.com/docs/api/aggregate.html#Aggregate()\n * @see MongoDB https://www.mongodb.com/docs/manual/applications/aggregation/\n * @param {Array} [pipeline] aggregation pipeline as an array of objects\n * @param {Object} [options] aggregation options\n * @return {Aggregate}\n * @api public\n */\n\nModel.aggregate = function aggregate(pipeline, options) {\n  _checkContext(this, 'aggregate');\n\n  if (typeof options === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.aggregate() no longer accepts a callback');\n  }\n\n  const aggregate = new Aggregate(pipeline || []);\n  aggregate.model(this);\n  if (options != null) {\n    aggregate.option(options);\n  }\n\n  if (typeof callback === 'undefined') {\n    return aggregate;\n  }\n\n  return aggregate;\n};\n\n/**\n * Casts and validates the given object against this model's schema, passing the\n * given `context` to custom validators.\n *\n * #### Example:\n *\n *     const Model = mongoose.model('Test', Schema({\n *       name: { type: String, required: true },\n *       age: { type: Number, required: true }\n *     });\n *\n *     try {\n *       await Model.validate({ name: null }, ['name'])\n *     } catch (err) {\n *       err instanceof mongoose.Error.ValidationError; // true\n *       Object.keys(err.errors); // ['name']\n *     }\n *\n * @param {Object} obj\n * @param {Object|Array|String} pathsOrOptions\n * @param {Object} [context]\n * @return {Promise<Object>} casted and validated copy of `obj` if validation succeeded\n * @api public\n */\n\nModel.validate = async function validate(obj, pathsOrOptions, context) {\n  if ((arguments.length < 3) || (arguments.length === 3 && typeof arguments[2] === 'function')) {\n    // For convenience, if we're validating a document or an object, make `context` default to\n    // the model so users don't have to always pass `context`, re: gh-10132, gh-10346\n    context = obj;\n  }\n  if (typeof context === 'function' || typeof arguments[3] === 'function') {\n    throw new MongooseError('Model.validate() no longer accepts a callback');\n  }\n\n  let schema = this.schema;\n  const discriminatorKey = schema.options.discriminatorKey;\n  if (schema.discriminators != null && obj != null && obj[discriminatorKey] != null) {\n    schema = getSchemaDiscriminatorByValue(schema, obj[discriminatorKey]) || schema;\n  }\n  let paths = Object.keys(schema.paths);\n\n  if (pathsOrOptions != null) {\n    const _pathsToValidate = typeof pathsOrOptions === 'string' ? new Set(pathsOrOptions.split(' ')) : Array.isArray(pathsOrOptions) ? new Set(pathsOrOptions) : new Set(paths);\n    paths = paths.filter(p => {\n      if (pathsOrOptions.pathsToSkip) {\n        if (Array.isArray(pathsOrOptions.pathsToSkip)) {\n          if (pathsOrOptions.pathsToSkip.find(x => x == p)) {\n            return false;\n          }\n        } else if (typeof pathsOrOptions.pathsToSkip == 'string') {\n          if (pathsOrOptions.pathsToSkip.includes(p)) {\n            return false;\n          }\n        }\n      }\n      const pieces = p.split('.');\n      let cur = pieces[0];\n\n      for (const piece of pieces) {\n        if (_pathsToValidate.has(cur)) {\n          return true;\n        }\n        cur += '.' + piece;\n      }\n\n      return _pathsToValidate.has(p);\n    });\n  }\n\n  for (const path of paths) {\n    const schemaType = schema.path(path);\n    if (!schemaType || !schemaType.$isMongooseArray || schemaType.$isMongooseDocumentArray) {\n      continue;\n    }\n\n    const val = get(obj, path);\n    pushNestedArrayPaths(paths, val, path);\n  }\n\n  let error = null;\n  paths = new Set(paths);\n\n  try {\n    obj = this.castObject(obj);\n  } catch (err) {\n    error = err;\n    for (const key of Object.keys(error.errors || {})) {\n      paths.delete(key);\n    }\n  }\n\n  let remaining = paths.size;\n\n  return new Promise((resolve, reject) => {\n    for (const path of paths) {\n      const schemaType = schema.path(path);\n      if (schemaType == null) {\n        _checkDone();\n        continue;\n      }\n\n      const pieces = path.indexOf('.') === -1 ? [path] : path.split('.');\n      let cur = obj;\n      for (let i = 0; i < pieces.length - 1; ++i) {\n        cur = cur[pieces[i]];\n      }\n\n      const val = get(obj, path, void 0);\n\n      schemaType.doValidate(val, err => {\n        if (err) {\n          error = error || new ValidationError();\n          error.addError(path, err);\n        }\n        _checkDone();\n      }, context, { path: path });\n    }\n\n    function _checkDone() {\n      if (--remaining <= 0) {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(obj);\n        }\n      }\n    }\n  });\n};\n\n/**\n * Populates document references.\n *\n * Changed in Mongoose 6: the model you call `populate()` on should be the\n * \"local field\" model, **not** the \"foreign field\" model.\n *\n * #### Available top-level options:\n *\n * - path: space delimited path(s) to populate\n * - select: optional fields to select\n * - match: optional query conditions to match\n * - model: optional name of the model to use for population\n * - options: optional query options like sort, limit, etc\n * - justOne: optional boolean, if true Mongoose will always set `path` to a document, or `null` if no document was found. If false, Mongoose will always set `path` to an array, which will be empty if no documents are found. Inferred from schema by default.\n * - strictPopulate: optional boolean, set to `false` to allow populating paths that aren't in the schema.\n *\n * #### Example:\n *\n *     const Dog = mongoose.model('Dog', new Schema({ name: String, breed: String }));\n *     const Person = mongoose.model('Person', new Schema({\n *       name: String,\n *       pet: { type: mongoose.ObjectId, ref: 'Dog' }\n *     }));\n *\n *     const pets = await Pet.create([\n *       { name: 'Daisy', breed: 'Beagle' },\n *       { name: 'Einstein', breed: 'Catalan Sheepdog' }\n *     ]);\n *\n *     // populate many plain objects\n *     const users = [\n *       { name: 'John Wick', dog: pets[0]._id },\n *       { name: 'Doc Brown', dog: pets[1]._id }\n *     ];\n *     await User.populate(users, { path: 'dog', select: 'name' });\n *     users[0].dog.name; // 'Daisy'\n *     users[0].dog.breed; // undefined because of `select`\n *\n * @param {Document|Array} docs Either a single document or array of documents to populate.\n * @param {Object|String} options Either the paths to populate or an object specifying all parameters\n * @param {string} [options.path=null] The path to populate.\n * @param {string|PopulateOptions} [options.populate=null] Recursively populate paths in the populated documents. See [deep populate docs](https://mongoosejs.com/docs/populate.html#deep-populate).\n * @param {boolean} [options.retainNullValues=false] By default, Mongoose removes null and undefined values from populated arrays. Use this option to make `populate()` retain `null` and `undefined` array entries.\n * @param {boolean} [options.getters=false] If true, Mongoose will call any getters defined on the `localField`. By default, Mongoose gets the raw value of `localField`. For example, you would need to set this option to `true` if you wanted to [add a `lowercase` getter to your `localField`](https://mongoosejs.com/docs/schematypes.html#schematype-options).\n * @param {boolean} [options.clone=false] When you do `BlogPost.find().populate('author')`, blog posts with the same author will share 1 copy of an `author` doc. Enable this option to make Mongoose clone populated docs before assigning them.\n * @param {Object|Function} [options.match=null] Add an additional filter to the populate query. Can be a filter object containing [MongoDB query syntax](https://www.mongodb.com/docs/manual/tutorial/query-documents/), or a function that returns a filter object.\n * @param {Boolean} [options.skipInvalidIds=false] By default, Mongoose throws a cast error if `localField` and `foreignField` schemas don't line up. If you enable this option, Mongoose will instead filter out any `localField` properties that cannot be casted to `foreignField`'s schema type.\n * @param {Number} [options.perDocumentLimit=null] For legacy reasons, `limit` with `populate()` may give incorrect results because it only executes a single query for every document being populated. If you set `perDocumentLimit`, Mongoose will ensure correct `limit` per document by executing a separate query for each document to `populate()`. For example, `.find().populate({ path: 'test', perDocumentLimit: 2 })` will execute 2 additional queries if `.find()` returns 2 documents.\n * @param {Boolean} [options.strictPopulate=true] Set to false to allow populating paths that aren't defined in the given model's schema.\n * @param {Object} [options.options=null] Additional options like `limit` and `lean`.\n * @param {Function} [options.transform=null] Function that Mongoose will call on every populated document that allows you to transform the populated document.\n * @param {Function} [callback(err,doc)] Optional callback, executed upon completion. Receives `err` and the `doc(s)`.\n * @return {Promise}\n * @api public\n */\n\nModel.populate = async function populate(docs, paths) {\n  _checkContext(this, 'populate');\n  if (typeof paths === 'function' || typeof arguments[2] === 'function') {\n    throw new MongooseError('Model.populate() no longer accepts a callback');\n  }\n  const _this = this;\n  // normalized paths\n  paths = utils.populate(paths);\n  // data that should persist across subPopulate calls\n  const cache = {};\n\n  return new Promise((resolve, reject) => {\n    _populate(_this, docs, paths, cache, (err, res) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve(res);\n    });\n  });\n};\n\n/**\n * Populate helper\n *\n * @param {Model} model the model to use\n * @param {Document|Array} docs Either a single document or array of documents to populate.\n * @param {Object} paths\n * @param {never} cache Unused\n * @param {Function} [callback] Optional callback, executed upon completion. Receives `err` and the `doc(s)`.\n * @return {Function}\n * @api private\n */\n\nfunction _populate(model, docs, paths, cache, callback) {\n  let pending = paths.length;\n  if (paths.length === 0) {\n    return callback(null, docs);\n  }\n  // each path has its own query options and must be executed separately\n  for (const path of paths) {\n    populate(model, docs, path, next);\n  }\n\n  function next(err) {\n    if (err) {\n      return callback(err, null);\n    }\n    if (--pending) {\n      return;\n    }\n    callback(null, docs);\n  }\n}\n\n/*!\n * Populates `docs`\n */\nconst excludeIdReg = /\\s?-_id\\s?/;\nconst excludeIdRegGlobal = /\\s?-_id\\s?/g;\n\nfunction populate(model, docs, options, callback) {\n  const populateOptions = options;\n  if (options.strictPopulate == null) {\n    if (options._localModel != null && options._localModel.schema._userProvidedOptions.strictPopulate != null) {\n      populateOptions.strictPopulate = options._localModel.schema._userProvidedOptions.strictPopulate;\n    } else if (options._localModel != null && model.base.options.strictPopulate != null) {\n      populateOptions.strictPopulate = model.base.options.strictPopulate;\n    } else if (model.base.options.strictPopulate != null) {\n      populateOptions.strictPopulate = model.base.options.strictPopulate;\n    }\n  }\n\n  // normalize single / multiple docs passed\n  if (!Array.isArray(docs)) {\n    docs = [docs];\n  }\n  if (docs.length === 0 || docs.every(utils.isNullOrUndefined)) {\n    return callback();\n  }\n\n  const modelsMap = getModelsMapForPopulate(model, docs, populateOptions);\n\n  if (modelsMap instanceof MongooseError) {\n    return immediate(function() {\n      callback(modelsMap);\n    });\n  }\n  const len = modelsMap.length;\n  let vals = [];\n\n  function flatten(item) {\n    // no need to include undefined values in our query\n    return undefined !== item;\n  }\n\n  let _remaining = len;\n  let hasOne = false;\n  const params = [];\n  for (let i = 0; i < len; ++i) {\n    const mod = modelsMap[i];\n    let select = mod.options.select;\n    let ids = utils.array.flatten(mod.ids, flatten);\n    ids = utils.array.unique(ids);\n\n    const assignmentOpts = {};\n    assignmentOpts.sort = mod &&\n      mod.options &&\n      mod.options.options &&\n      mod.options.options.sort || void 0;\n    assignmentOpts.excludeId = excludeIdReg.test(select) || (select && select._id === 0);\n\n    // Lean transform may delete `_id`, which would cause assignment\n    // to fail. So delay running lean transform until _after_\n    // `_assign()`\n    if (mod.options &&\n        mod.options.options &&\n        mod.options.options.lean &&\n        mod.options.options.lean.transform) {\n      mod.options.options._leanTransform = mod.options.options.lean.transform;\n      mod.options.options.lean = true;\n    }\n\n    if (ids.length === 0 || ids.every(utils.isNullOrUndefined)) {\n      // Ensure that we set to 0 or empty array even\n      // if we don't actually execute a query to make sure there's a value\n      // and we know this path was populated for future sets. See gh-7731, gh-8230\n      --_remaining;\n      _assign(model, [], mod, assignmentOpts);\n      continue;\n    }\n\n    hasOne = true;\n    if (typeof populateOptions.foreignField === 'string') {\n      mod.foreignField.clear();\n      mod.foreignField.add(populateOptions.foreignField);\n    }\n    const match = createPopulateQueryFilter(ids, mod.match, mod.foreignField, mod.model, mod.options.skipInvalidIds);\n    if (assignmentOpts.excludeId) {\n      // override the exclusion from the query so we can use the _id\n      // for document matching during assignment. we'll delete the\n      // _id back off before returning the result.\n      if (typeof select === 'string') {\n        select = select.replace(excludeIdRegGlobal, ' ');\n      } else {\n        // preserve original select conditions by copying\n        select = { ...select };\n        delete select._id;\n      }\n    }\n\n    if (mod.options.options && mod.options.options.limit != null) {\n      assignmentOpts.originalLimit = mod.options.options.limit;\n    } else if (mod.options.limit != null) {\n      assignmentOpts.originalLimit = mod.options.limit;\n    }\n    params.push([mod, match, select, assignmentOpts, _next]);\n  }\n  if (!hasOne) {\n    // If models but no docs, skip further deep populate.\n    if (modelsMap.length !== 0) {\n      return callback();\n    }\n    // If no models to populate but we have a nested populate,\n    // keep trying, re: gh-8946\n    if (populateOptions.populate != null) {\n      const opts = utils.populate(populateOptions.populate).map(pop => Object.assign({}, pop, {\n        path: populateOptions.path + '.' + pop.path\n      }));\n      model.populate(docs, opts).then(res => { callback(null, res); }, err => { callback(err); });\n      return;\n    }\n    return callback();\n  }\n\n  for (const arr of params) {\n    _execPopulateQuery.apply(null, arr);\n  }\n  function _next(err, valsFromDb) {\n    if (err != null) {\n      return callback(err, null);\n    }\n    vals = vals.concat(valsFromDb);\n    if (--_remaining === 0) {\n      _done();\n    }\n  }\n\n  function _done() {\n    for (const arr of params) {\n      const mod = arr[0];\n      const assignmentOpts = arr[3];\n      for (const val of vals) {\n        mod.options._childDocs.push(val);\n      }\n      try {\n        _assign(model, vals, mod, assignmentOpts);\n      } catch (err) {\n        return callback(err);\n      }\n    }\n\n    for (const arr of params) {\n      removeDeselectedForeignField(arr[0].foreignField, arr[0].options, vals);\n    }\n    for (const arr of params) {\n      const mod = arr[0];\n      if (mod.options && mod.options.options && mod.options.options._leanTransform) {\n        for (const doc of vals) {\n          mod.options.options._leanTransform(doc);\n        }\n      }\n    }\n    callback();\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _execPopulateQuery(mod, match, select, assignmentOpts, callback) {\n  let subPopulate = clone(mod.options.populate);\n  const queryOptions = Object.assign({\n    skip: mod.options.skip,\n    limit: mod.options.limit,\n    perDocumentLimit: mod.options.perDocumentLimit\n  }, mod.options.options);\n\n  if (mod.count) {\n    delete queryOptions.skip;\n  }\n\n  if (queryOptions.perDocumentLimit != null) {\n    queryOptions.limit = queryOptions.perDocumentLimit;\n    delete queryOptions.perDocumentLimit;\n  } else if (queryOptions.limit != null) {\n    queryOptions.limit = queryOptions.limit * mod.ids.length;\n  }\n\n  const query = mod.model.find(match, select, queryOptions);\n  // If we're doing virtual populate and projection is inclusive and foreign\n  // field is not selected, automatically select it because mongoose needs it.\n  // If projection is exclusive and client explicitly unselected the foreign\n  // field, that's the client's fault.\n  for (const foreignField of mod.foreignField) {\n    if (foreignField !== '_id' &&\n        query.selectedInclusively() &&\n        !isPathSelectedInclusive(query._fields, foreignField)) {\n      query.select(foreignField);\n    }\n  }\n\n  // If using count, still need the `foreignField` so we can match counts\n  // to documents, otherwise we would need a separate `count()` for every doc.\n  if (mod.count) {\n    for (const foreignField of mod.foreignField) {\n      query.select(foreignField);\n    }\n  }\n\n  // If we need to sub-populate, call populate recursively\n  if (subPopulate) {\n    // If subpopulating on a discriminator, skip check for non-existent\n    // paths. Because the discriminator may not have the path defined.\n    if (mod.model.baseModelName != null) {\n      if (Array.isArray(subPopulate)) {\n        subPopulate.forEach(pop => { pop.strictPopulate = false; });\n      } else if (typeof subPopulate === 'string') {\n        subPopulate = { path: subPopulate, strictPopulate: false };\n      } else {\n        subPopulate.strictPopulate = false;\n      }\n    }\n    const basePath = mod.options._fullPath || mod.options.path;\n\n    if (Array.isArray(subPopulate)) {\n      for (const pop of subPopulate) {\n        pop._fullPath = basePath + '.' + pop.path;\n      }\n    } else if (typeof subPopulate === 'object') {\n      subPopulate._fullPath = basePath + '.' + subPopulate.path;\n    }\n\n    query.populate(subPopulate);\n  }\n\n  query.exec().then(\n    docs => {\n      for (const val of docs) {\n        leanPopulateMap.set(val, mod.model);\n      }\n      callback(null, docs);\n    },\n    err => {\n      callback(err);\n    }\n  );\n}\n\n/*!\n * ignore\n */\n\nfunction _assign(model, vals, mod, assignmentOpts) {\n  const options = mod.options;\n  const isVirtual = mod.isVirtual;\n  const justOne = mod.justOne;\n  let _val;\n  const lean = options &&\n    options.options &&\n    options.options.lean || false;\n  const len = vals.length;\n  const rawOrder = {};\n  const rawDocs = {};\n  let key;\n  let val;\n\n  // Clone because `assignRawDocsToIdStructure` will mutate the array\n  const allIds = clone(mod.allIds);\n  // optimization:\n  // record the document positions as returned by\n  // the query result.\n  for (let i = 0; i < len; i++) {\n    val = vals[i];\n    if (val == null) {\n      continue;\n    }\n    for (const foreignField of mod.foreignField) {\n      _val = utils.getValue(foreignField, val);\n      if (Array.isArray(_val)) {\n        _val = utils.array.unique(utils.array.flatten(_val));\n\n        for (let __val of _val) {\n          if (__val instanceof Document) {\n            __val = __val._id;\n          }\n          key = String(__val);\n          if (rawDocs[key]) {\n            if (Array.isArray(rawDocs[key])) {\n              rawDocs[key].push(val);\n              rawOrder[key].push(i);\n            } else {\n              rawDocs[key] = [rawDocs[key], val];\n              rawOrder[key] = [rawOrder[key], i];\n            }\n          } else {\n            if (isVirtual && !justOne) {\n              rawDocs[key] = [val];\n              rawOrder[key] = [i];\n            } else {\n              rawDocs[key] = val;\n              rawOrder[key] = i;\n            }\n          }\n        }\n      } else {\n        if (_val instanceof Document) {\n          _val = _val._id;\n        }\n        key = String(_val);\n        if (rawDocs[key]) {\n          if (Array.isArray(rawDocs[key])) {\n            rawDocs[key].push(val);\n            rawOrder[key].push(i);\n          } else if (isVirtual ||\n            rawDocs[key].constructor !== val.constructor ||\n            String(rawDocs[key]._id) !== String(val._id)) {\n            // May need to store multiple docs with the same id if there's multiple models\n            // if we have discriminators or a ref function. But avoid converting to an array\n            // if we have multiple queries on the same model because of `perDocumentLimit` re: gh-9906\n            rawDocs[key] = [rawDocs[key], val];\n            rawOrder[key] = [rawOrder[key], i];\n          }\n        } else {\n          rawDocs[key] = val;\n          rawOrder[key] = i;\n        }\n      }\n      // flag each as result of population\n      if (!lean) {\n        val.$__.wasPopulated = val.$__.wasPopulated || true;\n      }\n    }\n  }\n\n  assignVals({\n    originalModel: model,\n    // If virtual, make sure to not mutate original field\n    rawIds: mod.isVirtual ? allIds : mod.allIds,\n    allIds: allIds,\n    unpopulatedValues: mod.unpopulatedValues,\n    foreignField: mod.foreignField,\n    rawDocs: rawDocs,\n    rawOrder: rawOrder,\n    docs: mod.docs,\n    path: options.path,\n    options: assignmentOpts,\n    justOne: mod.justOne,\n    isVirtual: mod.isVirtual,\n    allOptions: mod,\n    populatedModel: mod.model,\n    lean: lean,\n    virtual: mod.virtual,\n    count: mod.count,\n    match: mod.match\n  });\n}\n\n/**\n * Compiler utility.\n *\n * @param {String|Function} name model name or class extending Model\n * @param {Schema} schema\n * @param {String} collectionName\n * @param {Connection} connection\n * @param {Mongoose} base mongoose instance\n * @api private\n */\n\nModel.compile = function compile(name, schema, collectionName, connection, base) {\n  const versioningEnabled = schema.options.versionKey !== false;\n\n  if (versioningEnabled && !schema.paths[schema.options.versionKey]) {\n    // add versioning to top level documents only\n    const o = {};\n    o[schema.options.versionKey] = Number;\n    schema.add(o);\n  }\n  let model;\n  if (typeof name === 'function' && name.prototype instanceof Model) {\n    model = name;\n    name = model.name;\n    schema.loadClass(model, false);\n    model.prototype.$isMongooseModelPrototype = true;\n  } else {\n    // generate new class\n    model = function model(doc, fields, skipId) {\n      model.hooks.execPreSync('createModel', doc);\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      const discriminatorKey = model.schema.options.discriminatorKey;\n\n      if (model.discriminators == null || doc == null || doc[discriminatorKey] == null) {\n        Model.call(this, doc, fields, skipId);\n        return;\n      }\n\n      // If discriminator key is set, use the discriminator instead (gh-7586)\n      const Discriminator = model.discriminators[doc[discriminatorKey]] ||\n        getDiscriminatorByValue(model.discriminators, doc[discriminatorKey]);\n      if (Discriminator != null) {\n        return new Discriminator(doc, fields, skipId);\n      }\n\n      // Otherwise, just use the top-level model\n      Model.call(this, doc, fields, skipId);\n    };\n  }\n\n  model.hooks = schema.s.hooks.clone();\n  model.base = base;\n  model.modelName = name;\n\n  if (!(model.prototype instanceof Model)) {\n    Object.setPrototypeOf(model, Model);\n    Object.setPrototypeOf(model.prototype, Model.prototype);\n  }\n  model.model = function model(name) {\n    return this.db.model(name);\n  };\n\n  model.db = connection;\n  model.prototype.db = connection;\n  model.prototype[modelDbSymbol] = connection;\n  model.discriminators = model.prototype.discriminators = undefined;\n  model[modelSymbol] = true;\n  model.events = new EventEmitter();\n\n  schema._preCompile();\n\n  const _userProvidedOptions = schema._userProvidedOptions || {};\n\n  const collectionOptions = {\n    schemaUserProvidedOptions: _userProvidedOptions,\n    capped: schema.options.capped,\n    Promise: model.base.Promise,\n    modelName: name\n  };\n  if (schema.options.autoCreate !== void 0) {\n    collectionOptions.autoCreate = schema.options.autoCreate;\n  }\n\n  const collection = connection.collection(\n    collectionName,\n    collectionOptions\n  );\n\n  model.prototype.collection = collection;\n  model.prototype.$collection = collection;\n  model.prototype[modelCollectionSymbol] = collection;\n\n  model.prototype.$__setSchema(schema);\n\n  // apply methods and statics\n  applyMethods(model, schema);\n  applyStatics(model, schema);\n  applyHooks(model, schema);\n  applyStaticHooks(model, schema.s.hooks, schema.statics);\n\n  model.schema = model.prototype.$__schema;\n  model.collection = collection;\n  model.$__collection = collection;\n\n  // Create custom query constructor\n  model.Query = function() {\n    Query.apply(this, arguments);\n  };\n  Object.setPrototypeOf(model.Query.prototype, Query.prototype);\n  model.Query.base = Query.base;\n  model.Query.prototype.constructor = Query;\n  applyQueryMiddleware(model.Query, model);\n  applyQueryMethods(model, schema.query);\n\n  return model;\n};\n\n/**\n * Register custom query methods for this model\n *\n * @param {Model} model\n * @param {Schema} schema\n * @api private\n */\n\nfunction applyQueryMethods(model, methods) {\n  for (const i in methods) {\n    model.Query.prototype[i] = methods[i];\n  }\n}\n\n/**\n * Subclass this model with `conn`, `schema`, and `collection` settings.\n *\n * @param {Connection} conn\n * @param {Schema} [schema]\n * @param {String} [collection]\n * @return {Model}\n * @api private\n * @memberOf Model\n * @static\n * @method __subclass\n */\n\nModel.__subclass = function subclass(conn, schema, collection) {\n  // subclass model using this connection and collection name\n  const _this = this;\n\n  const Model = function Model(doc, fields, skipId) {\n    if (!(this instanceof Model)) {\n      return new Model(doc, fields, skipId);\n    }\n    _this.call(this, doc, fields, skipId);\n  };\n\n  Object.setPrototypeOf(Model, _this);\n  Object.setPrototypeOf(Model.prototype, _this.prototype);\n  Model.db = conn;\n  Model.prototype.db = conn;\n  Model.prototype[modelDbSymbol] = conn;\n\n  _this[subclassedSymbol] = _this[subclassedSymbol] || [];\n  _this[subclassedSymbol].push(Model);\n  if (_this.discriminators != null) {\n    Model.discriminators = {};\n    for (const key of Object.keys(_this.discriminators)) {\n      Model.discriminators[key] = _this.discriminators[key].\n        __subclass(_this.db, _this.discriminators[key].schema, collection);\n    }\n  }\n\n  const s = schema && typeof schema !== 'string'\n    ? schema\n    : _this.prototype.$__schema;\n\n  const options = s.options || {};\n  const _userProvidedOptions = s._userProvidedOptions || {};\n\n  if (!collection) {\n    collection = _this.prototype.$__schema.get('collection') ||\n      utils.toCollectionName(_this.modelName, this.base.pluralize());\n  }\n\n  const collectionOptions = {\n    schemaUserProvidedOptions: _userProvidedOptions,\n    capped: s && options.capped\n  };\n\n  Model.prototype.collection = conn.collection(collection, collectionOptions);\n  Model.prototype.$collection = Model.prototype.collection;\n  Model.prototype[modelCollectionSymbol] = Model.prototype.collection;\n  Model.collection = Model.prototype.collection;\n  Model.$__collection = Model.collection;\n  // Errors handled internally, so ignore\n  Model.init().catch(() => {});\n  return Model;\n};\n\n/**\n * Helper for console.log. Given a model named 'MyModel', returns the string\n * `'Model { MyModel }'`.\n *\n * #### Example:\n *\n *     const MyModel = mongoose.model('Test', Schema({ name: String }));\n *     MyModel.inspect(); // 'Model { Test }'\n *     console.log(MyModel); // Prints 'Model { Test }'\n *\n * @api public\n */\n\nModel.inspect = function() {\n  return `Model { ${this.modelName} }`;\n};\n\nif (util.inspect.custom) {\n  // Avoid Node deprecation warning DEP0079\n  Model[util.inspect.custom] = Model.inspect;\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = Model;\n"],"mappings":"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ID,MAAM,YAAYjE,MAAM,EAAE;IAC5B,MAAM,IAAImE,SAAS,CAAC,oDAAoD,GACtE,sEAAsE,GACtE,qBAAqB,CAAC;EAC1B;EACA7E,QAAQ,CAAC8E,IAAI,CAAC,IAAI,EAAEJ,GAAG,EAAEC,MAAM,EAAEC,MAAM,CAAC;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAP,MAAM,CAACU,cAAc,CAACN,KAAK,CAACO,SAAS,EAAEhF,QAAQ,CAACgF,SAAS,CAAC;AAC1DP,KAAK,CAACO,SAAS,CAACC,yBAAyB,GAAG,IAAI;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAR,KAAK,CAACO,SAAS,CAACE,EAAE;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAT,KAAK,CAACO,SAAS,CAACG,UAAU;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGAV,KAAK,CAACO,SAAS,CAACI,aAAa;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAX,KAAK,CAACO,SAAS,CAACK,SAAS;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAZ,KAAK,CAACO,SAAS,CAACM,MAAM;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAb,KAAK,CAACO,SAAS,CAACO,aAAa;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAd,KAAK,CAACe,MAAM;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAf,KAAK,CAACgB,WAAW;;AAEjB;AACA;AACA;;AAEA,SAASC,iBAAiBA,CAAChB,GAAG,EAAEiB,KAAK,EAAE;EACrC,IAAIjB,GAAG,CAACY,MAAM,IAAI,IAAI,EAAE;IACtB;EACF;EACA,KAAK,MAAMM,GAAG,IAAIvB,MAAM,CAACwB,IAAI,CAACnB,GAAG,CAACY,MAAM,CAAC,EAAE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"},"metadata":{},"sourceType":"script","externalDependencies":[]}